-- MySQL dump 10.13  Distrib 8.0.16, for Win64 (x86_64)
--
-- Host: ::1    Database: local
-- ------------------------------------------------------
-- Server version	8.0.16

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8mb4 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'comment',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
INSERT INTO `wp_comments` VALUES (1,1,'A WordPress Commenter','wapuu@wordpress.example','https://wordpress.org/','','2023-11-14 13:16:36','2023-11-14 13:16:36','Hi, this is a comment.\nTo get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.\nCommenter avatars come from <a href=\"https://en.gravatar.com/\">Gravatar</a>.',0,'post-trashed','','comment',0,0);
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`),
  KEY `autoload` (`autoload`)
) ENGINE=InnoDB AUTO_INCREMENT=446 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','https://simplelearn.local','yes');
INSERT INTO `wp_options` VALUES (2,'home','https://simplelearn.local','yes');
INSERT INTO `wp_options` VALUES (3,'blogname','SimpleLearn','yes');
INSERT INTO `wp_options` VALUES (4,'blogdescription','Learning code, made simpler.','yes');
INSERT INTO `wp_options` VALUES (5,'users_can_register','0','yes');
INSERT INTO `wp_options` VALUES (6,'admin_email','simple.learn@learn.org','yes');
INSERT INTO `wp_options` VALUES (7,'start_of_week','1','yes');
INSERT INTO `wp_options` VALUES (8,'use_balanceTags','0','yes');
INSERT INTO `wp_options` VALUES (9,'use_smilies','1','yes');
INSERT INTO `wp_options` VALUES (10,'require_name_email','1','yes');
INSERT INTO `wp_options` VALUES (11,'comments_notify','1','yes');
INSERT INTO `wp_options` VALUES (12,'posts_per_rss','10','yes');
INSERT INTO `wp_options` VALUES (13,'rss_use_excerpt','0','yes');
INSERT INTO `wp_options` VALUES (14,'mailserver_url','mail.example.com','yes');
INSERT INTO `wp_options` VALUES (15,'mailserver_login','login@example.com','yes');
INSERT INTO `wp_options` VALUES (16,'mailserver_pass','password','yes');
INSERT INTO `wp_options` VALUES (17,'mailserver_port','110','yes');
INSERT INTO `wp_options` VALUES (18,'default_category','1','yes');
INSERT INTO `wp_options` VALUES (19,'default_comment_status','open','yes');
INSERT INTO `wp_options` VALUES (20,'default_ping_status','open','yes');
INSERT INTO `wp_options` VALUES (21,'default_pingback_flag','1','yes');
INSERT INTO `wp_options` VALUES (22,'posts_per_page','10','yes');
INSERT INTO `wp_options` VALUES (23,'date_format','F j, Y','yes');
INSERT INTO `wp_options` VALUES (24,'time_format','g:i a','yes');
INSERT INTO `wp_options` VALUES (25,'links_updated_date_format','F j, Y g:i a','yes');
INSERT INTO `wp_options` VALUES (26,'comment_moderation','0','yes');
INSERT INTO `wp_options` VALUES (27,'moderation_notify','1','yes');
INSERT INTO `wp_options` VALUES (28,'permalink_structure','/%postname%/','yes');
INSERT INTO `wp_options` VALUES (29,'rewrite_rules','a:93:{s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:17:\"^wp-sitemap\\.xml$\";s:23:\"index.php?sitemap=index\";s:17:\"^wp-sitemap\\.xsl$\";s:36:\"index.php?sitemap-stylesheet=sitemap\";s:23:\"^wp-sitemap-index\\.xsl$\";s:34:\"index.php?sitemap-stylesheet=index\";s:48:\"^wp-sitemap-([a-z]+?)-([a-z\\d_-]+?)-(\\d+?)\\.xml$\";s:75:\"index.php?sitemap=$matches[1]&sitemap-subtype=$matches[2]&paged=$matches[3]\";s:34:\"^wp-sitemap-([a-z]+?)-(\\d+?)\\.xml$\";s:47:\"index.php?sitemap=$matches[1]&paged=$matches[2]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:13:\"favicon\\.ico$\";s:19:\"index.php?favicon=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:27:\"[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\"[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\"[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"([^/]+)/embed/?$\";s:37:\"index.php?name=$matches[1]&embed=true\";s:20:\"([^/]+)/trackback/?$\";s:31:\"index.php?name=$matches[1]&tb=1\";s:40:\"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:35:\"([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:28:\"([^/]+)/page/?([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&paged=$matches[2]\";s:35:\"([^/]+)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&cpage=$matches[2]\";s:24:\"([^/]+)(?:/([0-9]+))?/?$\";s:43:\"index.php?name=$matches[1]&page=$matches[2]\";s:16:\"[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:26:\"[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:46:\"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:22:\"[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";}','yes');
INSERT INTO `wp_options` VALUES (30,'hack_file','0','yes');
INSERT INTO `wp_options` VALUES (31,'blog_charset','UTF-8','yes');
INSERT INTO `wp_options` VALUES (32,'moderation_keys','','no');
INSERT INTO `wp_options` VALUES (33,'active_plugins','a:0:{}','yes');
INSERT INTO `wp_options` VALUES (34,'category_base','','yes');
INSERT INTO `wp_options` VALUES (35,'ping_sites','http://rpc.pingomatic.com/','yes');
INSERT INTO `wp_options` VALUES (36,'comment_max_links','2','yes');
INSERT INTO `wp_options` VALUES (37,'gmt_offset','0','yes');
INSERT INTO `wp_options` VALUES (38,'default_email_category','1','yes');
INSERT INTO `wp_options` VALUES (39,'recently_edited','','no');
INSERT INTO `wp_options` VALUES (40,'template','raft','yes');
INSERT INTO `wp_options` VALUES (41,'stylesheet','raft','yes');
INSERT INTO `wp_options` VALUES (42,'comment_registration','0','yes');
INSERT INTO `wp_options` VALUES (43,'html_type','text/html','yes');
INSERT INTO `wp_options` VALUES (44,'use_trackback','0','yes');
INSERT INTO `wp_options` VALUES (45,'default_role','subscriber','yes');
INSERT INTO `wp_options` VALUES (46,'db_version','56657','yes');
INSERT INTO `wp_options` VALUES (47,'uploads_use_yearmonth_folders','1','yes');
INSERT INTO `wp_options` VALUES (48,'upload_path','','yes');
INSERT INTO `wp_options` VALUES (49,'blog_public','1','yes');
INSERT INTO `wp_options` VALUES (50,'default_link_category','2','yes');
INSERT INTO `wp_options` VALUES (51,'show_on_front','posts','yes');
INSERT INTO `wp_options` VALUES (52,'tag_base','','yes');
INSERT INTO `wp_options` VALUES (53,'show_avatars','1','yes');
INSERT INTO `wp_options` VALUES (54,'avatar_rating','G','yes');
INSERT INTO `wp_options` VALUES (55,'upload_url_path','','yes');
INSERT INTO `wp_options` VALUES (56,'thumbnail_size_w','150','yes');
INSERT INTO `wp_options` VALUES (57,'thumbnail_size_h','150','yes');
INSERT INTO `wp_options` VALUES (58,'thumbnail_crop','1','yes');
INSERT INTO `wp_options` VALUES (59,'medium_size_w','300','yes');
INSERT INTO `wp_options` VALUES (60,'medium_size_h','300','yes');
INSERT INTO `wp_options` VALUES (61,'avatar_default','mystery','yes');
INSERT INTO `wp_options` VALUES (62,'large_size_w','1024','yes');
INSERT INTO `wp_options` VALUES (63,'large_size_h','1024','yes');
INSERT INTO `wp_options` VALUES (64,'image_default_link_type','none','yes');
INSERT INTO `wp_options` VALUES (65,'image_default_size','','yes');
INSERT INTO `wp_options` VALUES (66,'image_default_align','','yes');
INSERT INTO `wp_options` VALUES (67,'close_comments_for_old_posts','0','yes');
INSERT INTO `wp_options` VALUES (68,'close_comments_days_old','14','yes');
INSERT INTO `wp_options` VALUES (69,'thread_comments','1','yes');
INSERT INTO `wp_options` VALUES (70,'thread_comments_depth','5','yes');
INSERT INTO `wp_options` VALUES (71,'page_comments','0','yes');
INSERT INTO `wp_options` VALUES (72,'comments_per_page','50','yes');
INSERT INTO `wp_options` VALUES (73,'default_comments_page','newest','yes');
INSERT INTO `wp_options` VALUES (74,'comment_order','asc','yes');
INSERT INTO `wp_options` VALUES (75,'sticky_posts','a:0:{}','yes');
INSERT INTO `wp_options` VALUES (76,'widget_categories','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (77,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (78,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (79,'uninstall_plugins','a:0:{}','no');
INSERT INTO `wp_options` VALUES (80,'timezone_string','','yes');
INSERT INTO `wp_options` VALUES (81,'page_for_posts','0','yes');
INSERT INTO `wp_options` VALUES (82,'page_on_front','0','yes');
INSERT INTO `wp_options` VALUES (83,'default_post_format','0','yes');
INSERT INTO `wp_options` VALUES (84,'link_manager_enabled','0','yes');
INSERT INTO `wp_options` VALUES (85,'finished_splitting_shared_terms','1','yes');
INSERT INTO `wp_options` VALUES (86,'site_icon','33','yes');
INSERT INTO `wp_options` VALUES (87,'medium_large_size_w','768','yes');
INSERT INTO `wp_options` VALUES (88,'medium_large_size_h','0','yes');
INSERT INTO `wp_options` VALUES (89,'wp_page_for_privacy_policy','3','yes');
INSERT INTO `wp_options` VALUES (90,'show_comments_cookies_opt_in','1','yes');
INSERT INTO `wp_options` VALUES (91,'admin_email_lifespan','1715519795','yes');
INSERT INTO `wp_options` VALUES (92,'disallowed_keys','','no');
INSERT INTO `wp_options` VALUES (93,'comment_previously_approved','1','yes');
INSERT INTO `wp_options` VALUES (94,'auto_plugin_theme_update_emails','a:0:{}','no');
INSERT INTO `wp_options` VALUES (95,'auto_update_core_dev','enabled','yes');
INSERT INTO `wp_options` VALUES (96,'auto_update_core_minor','enabled','yes');
INSERT INTO `wp_options` VALUES (97,'auto_update_core_major','enabled','yes');
INSERT INTO `wp_options` VALUES (98,'wp_force_deactivated_plugins','a:0:{}','yes');
INSERT INTO `wp_options` VALUES (99,'wp_attachment_pages_enabled','0','yes');
INSERT INTO `wp_options` VALUES (100,'initial_db_version','56657','yes');
INSERT INTO `wp_options` VALUES (101,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:61:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes');
INSERT INTO `wp_options` VALUES (102,'fresh_site','0','yes');
INSERT INTO `wp_options` VALUES (103,'user_count','1','no');
INSERT INTO `wp_options` VALUES (104,'widget_block','a:6:{i:2;a:1:{s:7:\"content\";s:19:\"<!-- wp:search /-->\";}i:3;a:1:{s:7:\"content\";s:154:\"<!-- wp:group --><div class=\"wp-block-group\"><!-- wp:heading --><h2>Recent Posts</h2><!-- /wp:heading --><!-- wp:latest-posts /--></div><!-- /wp:group -->\";}i:4;a:1:{s:7:\"content\";s:227:\"<!-- wp:group --><div class=\"wp-block-group\"><!-- wp:heading --><h2>Recent Comments</h2><!-- /wp:heading --><!-- wp:latest-comments {\"displayAvatar\":false,\"displayDate\":false,\"displayExcerpt\":false} /--></div><!-- /wp:group -->\";}i:5;a:1:{s:7:\"content\";s:146:\"<!-- wp:group --><div class=\"wp-block-group\"><!-- wp:heading --><h2>Archives</h2><!-- /wp:heading --><!-- wp:archives /--></div><!-- /wp:group -->\";}i:6;a:1:{s:7:\"content\";s:150:\"<!-- wp:group --><div class=\"wp-block-group\"><!-- wp:heading --><h2>Categories</h2><!-- /wp:heading --><!-- wp:categories /--></div><!-- /wp:group -->\";}s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (105,'sidebars_widgets','a:2:{s:19:\"wp_inactive_widgets\";a:5:{i:0;s:7:\"block-2\";i:1;s:7:\"block-3\";i:2;s:7:\"block-4\";i:3;s:7:\"block-5\";i:4;s:7:\"block-6\";}s:13:\"array_version\";i:3;}','yes');
INSERT INTO `wp_options` VALUES (106,'cron','a:9:{i:1700342197;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1700356597;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1700356648;a:1:{s:21:\"wp_update_user_counts\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1700399797;a:1:{s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1700399848;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1700399850;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1700572708;a:1:{s:30:\"wp_delete_temp_updater_backups\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}}i:1700658997;a:1:{s:30:\"wp_site_health_scheduled_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}}s:7:\"version\";i:2;}','yes');
INSERT INTO `wp_options` VALUES (107,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (108,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (109,'widget_archives','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (110,'widget_media_audio','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (111,'widget_media_image','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (112,'widget_media_gallery','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (113,'widget_media_video','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (114,'widget_meta','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (115,'widget_search','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (116,'widget_recent-posts','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (117,'widget_recent-comments','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (118,'widget_tag_cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (119,'widget_nav_menu','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (120,'widget_custom_html','a:1:{s:12:\"_multiwidget\";i:1;}','yes');
INSERT INTO `wp_options` VALUES (121,'_transient_wp_core_block_css_files','a:2:{s:7:\"version\";s:5:\"6.4.1\";s:5:\"files\";a:500:{i:0;s:23:\"archives/editor-rtl.css\";i:1;s:27:\"archives/editor-rtl.min.css\";i:2;s:19:\"archives/editor.css\";i:3;s:23:\"archives/editor.min.css\";i:4;s:22:\"archives/style-rtl.css\";i:5;s:26:\"archives/style-rtl.min.css\";i:6;s:18:\"archives/style.css\";i:7;s:22:\"archives/style.min.css\";i:8;s:20:\"audio/editor-rtl.css\";i:9;s:24:\"audio/editor-rtl.min.css\";i:10;s:16:\"audio/editor.css\";i:11;s:20:\"audio/editor.min.css\";i:12;s:19:\"audio/style-rtl.css\";i:13;s:23:\"audio/style-rtl.min.css\";i:14;s:15:\"audio/style.css\";i:15;s:19:\"audio/style.min.css\";i:16;s:19:\"audio/theme-rtl.css\";i:17;s:23:\"audio/theme-rtl.min.css\";i:18;s:15:\"audio/theme.css\";i:19;s:19:\"audio/theme.min.css\";i:20;s:21:\"avatar/editor-rtl.css\";i:21;s:25:\"avatar/editor-rtl.min.css\";i:22;s:17:\"avatar/editor.css\";i:23;s:21:\"avatar/editor.min.css\";i:24;s:20:\"avatar/style-rtl.css\";i:25;s:24:\"avatar/style-rtl.min.css\";i:26;s:16:\"avatar/style.css\";i:27;s:20:\"avatar/style.min.css\";i:28;s:20:\"block/editor-rtl.css\";i:29;s:24:\"block/editor-rtl.min.css\";i:30;s:16:\"block/editor.css\";i:31;s:20:\"block/editor.min.css\";i:32;s:21:\"button/editor-rtl.css\";i:33;s:25:\"button/editor-rtl.min.css\";i:34;s:17:\"button/editor.css\";i:35;s:21:\"button/editor.min.css\";i:36;s:20:\"button/style-rtl.css\";i:37;s:24:\"button/style-rtl.min.css\";i:38;s:16:\"button/style.css\";i:39;s:20:\"button/style.min.css\";i:40;s:22:\"buttons/editor-rtl.css\";i:41;s:26:\"buttons/editor-rtl.min.css\";i:42;s:18:\"buttons/editor.css\";i:43;s:22:\"buttons/editor.min.css\";i:44;s:21:\"buttons/style-rtl.css\";i:45;s:25:\"buttons/style-rtl.min.css\";i:46;s:17:\"buttons/style.css\";i:47;s:21:\"buttons/style.min.css\";i:48;s:22:\"calendar/style-rtl.css\";i:49;s:26:\"calendar/style-rtl.min.css\";i:50;s:18:\"calendar/style.css\";i:51;s:22:\"calendar/style.min.css\";i:52;s:25:\"categories/editor-rtl.css\";i:53;s:29:\"categories/editor-rtl.min.css\";i:54;s:21:\"categories/editor.css\";i:55;s:25:\"categories/editor.min.css\";i:56;s:24:\"categories/style-rtl.css\";i:57;s:28:\"categories/style-rtl.min.css\";i:58;s:20:\"categories/style.css\";i:59;s:24:\"categories/style.min.css\";i:60;s:19:\"code/editor-rtl.css\";i:61;s:23:\"code/editor-rtl.min.css\";i:62;s:15:\"code/editor.css\";i:63;s:19:\"code/editor.min.css\";i:64;s:18:\"code/style-rtl.css\";i:65;s:22:\"code/style-rtl.min.css\";i:66;s:14:\"code/style.css\";i:67;s:18:\"code/style.min.css\";i:68;s:18:\"code/theme-rtl.css\";i:69;s:22:\"code/theme-rtl.min.css\";i:70;s:14:\"code/theme.css\";i:71;s:18:\"code/theme.min.css\";i:72;s:22:\"columns/editor-rtl.css\";i:73;s:26:\"columns/editor-rtl.min.css\";i:74;s:18:\"columns/editor.css\";i:75;s:22:\"columns/editor.min.css\";i:76;s:21:\"columns/style-rtl.css\";i:77;s:25:\"columns/style-rtl.min.css\";i:78;s:17:\"columns/style.css\";i:79;s:21:\"columns/style.min.css\";i:80;s:29:\"comment-content/style-rtl.css\";i:81;s:33:\"comment-content/style-rtl.min.css\";i:82;s:25:\"comment-content/style.css\";i:83;s:29:\"comment-content/style.min.css\";i:84;s:30:\"comment-template/style-rtl.css\";i:85;s:34:\"comment-template/style-rtl.min.css\";i:86;s:26:\"comment-template/style.css\";i:87;s:30:\"comment-template/style.min.css\";i:88;s:42:\"comments-pagination-numbers/editor-rtl.css\";i:89;s:46:\"comments-pagination-numbers/editor-rtl.min.css\";i:90;s:38:\"comments-pagination-numbers/editor.css\";i:91;s:42:\"comments-pagination-numbers/editor.min.css\";i:92;s:34:\"comments-pagination/editor-rtl.css\";i:93;s:38:\"comments-pagination/editor-rtl.min.css\";i:94;s:30:\"comments-pagination/editor.css\";i:95;s:34:\"comments-pagination/editor.min.css\";i:96;s:33:\"comments-pagination/style-rtl.css\";i:97;s:37:\"comments-pagination/style-rtl.min.css\";i:98;s:29:\"comments-pagination/style.css\";i:99;s:33:\"comments-pagination/style.min.css\";i:100;s:29:\"comments-title/editor-rtl.css\";i:101;s:33:\"comments-title/editor-rtl.min.css\";i:102;s:25:\"comments-title/editor.css\";i:103;s:29:\"comments-title/editor.min.css\";i:104;s:23:\"comments/editor-rtl.css\";i:105;s:27:\"comments/editor-rtl.min.css\";i:106;s:19:\"comments/editor.css\";i:107;s:23:\"comments/editor.min.css\";i:108;s:22:\"comments/style-rtl.css\";i:109;s:26:\"comments/style-rtl.min.css\";i:110;s:18:\"comments/style.css\";i:111;s:22:\"comments/style.min.css\";i:112;s:20:\"cover/editor-rtl.css\";i:113;s:24:\"cover/editor-rtl.min.css\";i:114;s:16:\"cover/editor.css\";i:115;s:20:\"cover/editor.min.css\";i:116;s:19:\"cover/style-rtl.css\";i:117;s:23:\"cover/style-rtl.min.css\";i:118;s:15:\"cover/style.css\";i:119;s:19:\"cover/style.min.css\";i:120;s:22:\"details/editor-rtl.css\";i:121;s:26:\"details/editor-rtl.min.css\";i:122;s:18:\"details/editor.css\";i:123;s:22:\"details/editor.min.css\";i:124;s:21:\"details/style-rtl.css\";i:125;s:25:\"details/style-rtl.min.css\";i:126;s:17:\"details/style.css\";i:127;s:21:\"details/style.min.css\";i:128;s:20:\"embed/editor-rtl.css\";i:129;s:24:\"embed/editor-rtl.min.css\";i:130;s:16:\"embed/editor.css\";i:131;s:20:\"embed/editor.min.css\";i:132;s:19:\"embed/style-rtl.css\";i:133;s:23:\"embed/style-rtl.min.css\";i:134;s:15:\"embed/style.css\";i:135;s:19:\"embed/style.min.css\";i:136;s:19:\"embed/theme-rtl.css\";i:137;s:23:\"embed/theme-rtl.min.css\";i:138;s:15:\"embed/theme.css\";i:139;s:19:\"embed/theme.min.css\";i:140;s:19:\"file/editor-rtl.css\";i:141;s:23:\"file/editor-rtl.min.css\";i:142;s:15:\"file/editor.css\";i:143;s:19:\"file/editor.min.css\";i:144;s:18:\"file/style-rtl.css\";i:145;s:22:\"file/style-rtl.min.css\";i:146;s:14:\"file/style.css\";i:147;s:18:\"file/style.min.css\";i:148;s:23:\"footnotes/style-rtl.css\";i:149;s:27:\"footnotes/style-rtl.min.css\";i:150;s:19:\"footnotes/style.css\";i:151;s:23:\"footnotes/style.min.css\";i:152;s:23:\"freeform/editor-rtl.css\";i:153;s:27:\"freeform/editor-rtl.min.css\";i:154;s:19:\"freeform/editor.css\";i:155;s:23:\"freeform/editor.min.css\";i:156;s:22:\"gallery/editor-rtl.css\";i:157;s:26:\"gallery/editor-rtl.min.css\";i:158;s:18:\"gallery/editor.css\";i:159;s:22:\"gallery/editor.min.css\";i:160;s:21:\"gallery/style-rtl.css\";i:161;s:25:\"gallery/style-rtl.min.css\";i:162;s:17:\"gallery/style.css\";i:163;s:21:\"gallery/style.min.css\";i:164;s:21:\"gallery/theme-rtl.css\";i:165;s:25:\"gallery/theme-rtl.min.css\";i:166;s:17:\"gallery/theme.css\";i:167;s:21:\"gallery/theme.min.css\";i:168;s:20:\"group/editor-rtl.css\";i:169;s:24:\"group/editor-rtl.min.css\";i:170;s:16:\"group/editor.css\";i:171;s:20:\"group/editor.min.css\";i:172;s:19:\"group/style-rtl.css\";i:173;s:23:\"group/style-rtl.min.css\";i:174;s:15:\"group/style.css\";i:175;s:19:\"group/style.min.css\";i:176;s:19:\"group/theme-rtl.css\";i:177;s:23:\"group/theme-rtl.min.css\";i:178;s:15:\"group/theme.css\";i:179;s:19:\"group/theme.min.css\";i:180;s:21:\"heading/style-rtl.css\";i:181;s:25:\"heading/style-rtl.min.css\";i:182;s:17:\"heading/style.css\";i:183;s:21:\"heading/style.min.css\";i:184;s:19:\"html/editor-rtl.css\";i:185;s:23:\"html/editor-rtl.min.css\";i:186;s:15:\"html/editor.css\";i:187;s:19:\"html/editor.min.css\";i:188;s:20:\"image/editor-rtl.css\";i:189;s:24:\"image/editor-rtl.min.css\";i:190;s:16:\"image/editor.css\";i:191;s:20:\"image/editor.min.css\";i:192;s:19:\"image/style-rtl.css\";i:193;s:23:\"image/style-rtl.min.css\";i:194;s:15:\"image/style.css\";i:195;s:19:\"image/style.min.css\";i:196;s:19:\"image/theme-rtl.css\";i:197;s:23:\"image/theme-rtl.min.css\";i:198;s:15:\"image/theme.css\";i:199;s:19:\"image/theme.min.css\";i:200;s:29:\"latest-comments/style-rtl.css\";i:201;s:33:\"latest-comments/style-rtl.min.css\";i:202;s:25:\"latest-comments/style.css\";i:203;s:29:\"latest-comments/style.min.css\";i:204;s:27:\"latest-posts/editor-rtl.css\";i:205;s:31:\"latest-posts/editor-rtl.min.css\";i:206;s:23:\"latest-posts/editor.css\";i:207;s:27:\"latest-posts/editor.min.css\";i:208;s:26:\"latest-posts/style-rtl.css\";i:209;s:30:\"latest-posts/style-rtl.min.css\";i:210;s:22:\"latest-posts/style.css\";i:211;s:26:\"latest-posts/style.min.css\";i:212;s:18:\"list/style-rtl.css\";i:213;s:22:\"list/style-rtl.min.css\";i:214;s:14:\"list/style.css\";i:215;s:18:\"list/style.min.css\";i:216;s:25:\"media-text/editor-rtl.css\";i:217;s:29:\"media-text/editor-rtl.min.css\";i:218;s:21:\"media-text/editor.css\";i:219;s:25:\"media-text/editor.min.css\";i:220;s:24:\"media-text/style-rtl.css\";i:221;s:28:\"media-text/style-rtl.min.css\";i:222;s:20:\"media-text/style.css\";i:223;s:24:\"media-text/style.min.css\";i:224;s:19:\"more/editor-rtl.css\";i:225;s:23:\"more/editor-rtl.min.css\";i:226;s:15:\"more/editor.css\";i:227;s:19:\"more/editor.min.css\";i:228;s:30:\"navigation-link/editor-rtl.css\";i:229;s:34:\"navigation-link/editor-rtl.min.css\";i:230;s:26:\"navigation-link/editor.css\";i:231;s:30:\"navigation-link/editor.min.css\";i:232;s:29:\"navigation-link/style-rtl.css\";i:233;s:33:\"navigation-link/style-rtl.min.css\";i:234;s:25:\"navigation-link/style.css\";i:235;s:29:\"navigation-link/style.min.css\";i:236;s:33:\"navigation-submenu/editor-rtl.css\";i:237;s:37:\"navigation-submenu/editor-rtl.min.css\";i:238;s:29:\"navigation-submenu/editor.css\";i:239;s:33:\"navigation-submenu/editor.min.css\";i:240;s:25:\"navigation/editor-rtl.css\";i:241;s:29:\"navigation/editor-rtl.min.css\";i:242;s:21:\"navigation/editor.css\";i:243;s:25:\"navigation/editor.min.css\";i:244;s:24:\"navigation/style-rtl.css\";i:245;s:28:\"navigation/style-rtl.min.css\";i:246;s:20:\"navigation/style.css\";i:247;s:24:\"navigation/style.min.css\";i:248;s:23:\"nextpage/editor-rtl.css\";i:249;s:27:\"nextpage/editor-rtl.min.css\";i:250;s:19:\"nextpage/editor.css\";i:251;s:23:\"nextpage/editor.min.css\";i:252;s:24:\"page-list/editor-rtl.css\";i:253;s:28:\"page-list/editor-rtl.min.css\";i:254;s:20:\"page-list/editor.css\";i:255;s:24:\"page-list/editor.min.css\";i:256;s:23:\"page-list/style-rtl.css\";i:257;s:27:\"page-list/style-rtl.min.css\";i:258;s:19:\"page-list/style.css\";i:259;s:23:\"page-list/style.min.css\";i:260;s:24:\"paragraph/editor-rtl.css\";i:261;s:28:\"paragraph/editor-rtl.min.css\";i:262;s:20:\"paragraph/editor.css\";i:263;s:24:\"paragraph/editor.min.css\";i:264;s:23:\"paragraph/style-rtl.css\";i:265;s:27:\"paragraph/style-rtl.min.css\";i:266;s:19:\"paragraph/style.css\";i:267;s:23:\"paragraph/style.min.css\";i:268;s:25:\"post-author/style-rtl.css\";i:269;s:29:\"post-author/style-rtl.min.css\";i:270;s:21:\"post-author/style.css\";i:271;s:25:\"post-author/style.min.css\";i:272;s:33:\"post-comments-form/editor-rtl.css\";i:273;s:37:\"post-comments-form/editor-rtl.min.css\";i:274;s:29:\"post-comments-form/editor.css\";i:275;s:33:\"post-comments-form/editor.min.css\";i:276;s:32:\"post-comments-form/style-rtl.css\";i:277;s:36:\"post-comments-form/style-rtl.min.css\";i:278;s:28:\"post-comments-form/style.css\";i:279;s:32:\"post-comments-form/style.min.css\";i:280;s:23:\"post-date/style-rtl.css\";i:281;s:27:\"post-date/style-rtl.min.css\";i:282;s:19:\"post-date/style.css\";i:283;s:23:\"post-date/style.min.css\";i:284;s:27:\"post-excerpt/editor-rtl.css\";i:285;s:31:\"post-excerpt/editor-rtl.min.css\";i:286;s:23:\"post-excerpt/editor.css\";i:287;s:27:\"post-excerpt/editor.min.css\";i:288;s:26:\"post-excerpt/style-rtl.css\";i:289;s:30:\"post-excerpt/style-rtl.min.css\";i:290;s:22:\"post-excerpt/style.css\";i:291;s:26:\"post-excerpt/style.min.css\";i:292;s:34:\"post-featured-image/editor-rtl.css\";i:293;s:38:\"post-featured-image/editor-rtl.min.css\";i:294;s:30:\"post-featured-image/editor.css\";i:295;s:34:\"post-featured-image/editor.min.css\";i:296;s:33:\"post-featured-image/style-rtl.css\";i:297;s:37:\"post-featured-image/style-rtl.min.css\";i:298;s:29:\"post-featured-image/style.css\";i:299;s:33:\"post-featured-image/style.min.css\";i:300;s:34:\"post-navigation-link/style-rtl.css\";i:301;s:38:\"post-navigation-link/style-rtl.min.css\";i:302;s:30:\"post-navigation-link/style.css\";i:303;s:34:\"post-navigation-link/style.min.css\";i:304;s:28:\"post-template/editor-rtl.css\";i:305;s:32:\"post-template/editor-rtl.min.css\";i:306;s:24:\"post-template/editor.css\";i:307;s:28:\"post-template/editor.min.css\";i:308;s:27:\"post-template/style-rtl.css\";i:309;s:31:\"post-template/style-rtl.min.css\";i:310;s:23:\"post-template/style.css\";i:311;s:27:\"post-template/style.min.css\";i:312;s:24:\"post-terms/style-rtl.css\";i:313;s:28:\"post-terms/style-rtl.min.css\";i:314;s:20:\"post-terms/style.css\";i:315;s:24:\"post-terms/style.min.css\";i:316;s:24:\"post-title/style-rtl.css\";i:317;s:28:\"post-title/style-rtl.min.css\";i:318;s:20:\"post-title/style.css\";i:319;s:24:\"post-title/style.min.css\";i:320;s:26:\"preformatted/style-rtl.css\";i:321;s:30:\"preformatted/style-rtl.min.css\";i:322;s:22:\"preformatted/style.css\";i:323;s:26:\"preformatted/style.min.css\";i:324;s:24:\"pullquote/editor-rtl.css\";i:325;s:28:\"pullquote/editor-rtl.min.css\";i:326;s:20:\"pullquote/editor.css\";i:327;s:24:\"pullquote/editor.min.css\";i:328;s:23:\"pullquote/style-rtl.css\";i:329;s:27:\"pullquote/style-rtl.min.css\";i:330;s:19:\"pullquote/style.css\";i:331;s:23:\"pullquote/style.min.css\";i:332;s:23:\"pullquote/theme-rtl.css\";i:333;s:27:\"pullquote/theme-rtl.min.css\";i:334;s:19:\"pullquote/theme.css\";i:335;s:23:\"pullquote/theme.min.css\";i:336;s:39:\"query-pagination-numbers/editor-rtl.css\";i:337;s:43:\"query-pagination-numbers/editor-rtl.min.css\";i:338;s:35:\"query-pagination-numbers/editor.css\";i:339;s:39:\"query-pagination-numbers/editor.min.css\";i:340;s:31:\"query-pagination/editor-rtl.css\";i:341;s:35:\"query-pagination/editor-rtl.min.css\";i:342;s:27:\"query-pagination/editor.css\";i:343;s:31:\"query-pagination/editor.min.css\";i:344;s:30:\"query-pagination/style-rtl.css\";i:345;s:34:\"query-pagination/style-rtl.min.css\";i:346;s:26:\"query-pagination/style.css\";i:347;s:30:\"query-pagination/style.min.css\";i:348;s:25:\"query-title/style-rtl.css\";i:349;s:29:\"query-title/style-rtl.min.css\";i:350;s:21:\"query-title/style.css\";i:351;s:25:\"query-title/style.min.css\";i:352;s:20:\"query/editor-rtl.css\";i:353;s:24:\"query/editor-rtl.min.css\";i:354;s:16:\"query/editor.css\";i:355;s:20:\"query/editor.min.css\";i:356;s:19:\"query/style-rtl.css\";i:357;s:23:\"query/style-rtl.min.css\";i:358;s:15:\"query/style.css\";i:359;s:19:\"query/style.min.css\";i:360;s:19:\"quote/style-rtl.css\";i:361;s:23:\"quote/style-rtl.min.css\";i:362;s:15:\"quote/style.css\";i:363;s:19:\"quote/style.min.css\";i:364;s:19:\"quote/theme-rtl.css\";i:365;s:23:\"quote/theme-rtl.min.css\";i:366;s:15:\"quote/theme.css\";i:367;s:19:\"quote/theme.min.css\";i:368;s:23:\"read-more/style-rtl.css\";i:369;s:27:\"read-more/style-rtl.min.css\";i:370;s:19:\"read-more/style.css\";i:371;s:23:\"read-more/style.min.css\";i:372;s:18:\"rss/editor-rtl.css\";i:373;s:22:\"rss/editor-rtl.min.css\";i:374;s:14:\"rss/editor.css\";i:375;s:18:\"rss/editor.min.css\";i:376;s:17:\"rss/style-rtl.css\";i:377;s:21:\"rss/style-rtl.min.css\";i:378;s:13:\"rss/style.css\";i:379;s:17:\"rss/style.min.css\";i:380;s:21:\"search/editor-rtl.css\";i:381;s:25:\"search/editor-rtl.min.css\";i:382;s:17:\"search/editor.css\";i:383;s:21:\"search/editor.min.css\";i:384;s:20:\"search/style-rtl.css\";i:385;s:24:\"search/style-rtl.min.css\";i:386;s:16:\"search/style.css\";i:387;s:20:\"search/style.min.css\";i:388;s:20:\"search/theme-rtl.css\";i:389;s:24:\"search/theme-rtl.min.css\";i:390;s:16:\"search/theme.css\";i:391;s:20:\"search/theme.min.css\";i:392;s:24:\"separator/editor-rtl.css\";i:393;s:28:\"separator/editor-rtl.min.css\";i:394;s:20:\"separator/editor.css\";i:395;s:24:\"separator/editor.min.css\";i:396;s:23:\"separator/style-rtl.css\";i:397;s:27:\"separator/style-rtl.min.css\";i:398;s:19:\"separator/style.css\";i:399;s:23:\"separator/style.min.css\";i:400;s:23:\"separator/theme-rtl.css\";i:401;s:27:\"separator/theme-rtl.min.css\";i:402;s:19:\"separator/theme.css\";i:403;s:23:\"separator/theme.min.css\";i:404;s:24:\"shortcode/editor-rtl.css\";i:405;s:28:\"shortcode/editor-rtl.min.css\";i:406;s:20:\"shortcode/editor.css\";i:407;s:24:\"shortcode/editor.min.css\";i:408;s:24:\"site-logo/editor-rtl.css\";i:409;s:28:\"site-logo/editor-rtl.min.css\";i:410;s:20:\"site-logo/editor.css\";i:411;s:24:\"site-logo/editor.min.css\";i:412;s:23:\"site-logo/style-rtl.css\";i:413;s:27:\"site-logo/style-rtl.min.css\";i:414;s:19:\"site-logo/style.css\";i:415;s:23:\"site-logo/style.min.css\";i:416;s:27:\"site-tagline/editor-rtl.css\";i:417;s:31:\"site-tagline/editor-rtl.min.css\";i:418;s:23:\"site-tagline/editor.css\";i:419;s:27:\"site-tagline/editor.min.css\";i:420;s:25:\"site-title/editor-rtl.css\";i:421;s:29:\"site-title/editor-rtl.min.css\";i:422;s:21:\"site-title/editor.css\";i:423;s:25:\"site-title/editor.min.css\";i:424;s:24:\"site-title/style-rtl.css\";i:425;s:28:\"site-title/style-rtl.min.css\";i:426;s:20:\"site-title/style.css\";i:427;s:24:\"site-title/style.min.css\";i:428;s:26:\"social-link/editor-rtl.css\";i:429;s:30:\"social-link/editor-rtl.min.css\";i:430;s:22:\"social-link/editor.css\";i:431;s:26:\"social-link/editor.min.css\";i:432;s:27:\"social-links/editor-rtl.css\";i:433;s:31:\"social-links/editor-rtl.min.css\";i:434;s:23:\"social-links/editor.css\";i:435;s:27:\"social-links/editor.min.css\";i:436;s:26:\"social-links/style-rtl.css\";i:437;s:30:\"social-links/style-rtl.min.css\";i:438;s:22:\"social-links/style.css\";i:439;s:26:\"social-links/style.min.css\";i:440;s:21:\"spacer/editor-rtl.css\";i:441;s:25:\"spacer/editor-rtl.min.css\";i:442;s:17:\"spacer/editor.css\";i:443;s:21:\"spacer/editor.min.css\";i:444;s:20:\"spacer/style-rtl.css\";i:445;s:24:\"spacer/style-rtl.min.css\";i:446;s:16:\"spacer/style.css\";i:447;s:20:\"spacer/style.min.css\";i:448;s:20:\"table/editor-rtl.css\";i:449;s:24:\"table/editor-rtl.min.css\";i:450;s:16:\"table/editor.css\";i:451;s:20:\"table/editor.min.css\";i:452;s:19:\"table/style-rtl.css\";i:453;s:23:\"table/style-rtl.min.css\";i:454;s:15:\"table/style.css\";i:455;s:19:\"table/style.min.css\";i:456;s:19:\"table/theme-rtl.css\";i:457;s:23:\"table/theme-rtl.min.css\";i:458;s:15:\"table/theme.css\";i:459;s:19:\"table/theme.min.css\";i:460;s:23:\"tag-cloud/style-rtl.css\";i:461;s:27:\"tag-cloud/style-rtl.min.css\";i:462;s:19:\"tag-cloud/style.css\";i:463;s:23:\"tag-cloud/style.min.css\";i:464;s:28:\"template-part/editor-rtl.css\";i:465;s:32:\"template-part/editor-rtl.min.css\";i:466;s:24:\"template-part/editor.css\";i:467;s:28:\"template-part/editor.min.css\";i:468;s:27:\"template-part/theme-rtl.css\";i:469;s:31:\"template-part/theme-rtl.min.css\";i:470;s:23:\"template-part/theme.css\";i:471;s:27:\"template-part/theme.min.css\";i:472;s:30:\"term-description/style-rtl.css\";i:473;s:34:\"term-description/style-rtl.min.css\";i:474;s:26:\"term-description/style.css\";i:475;s:30:\"term-description/style.min.css\";i:476;s:27:\"text-columns/editor-rtl.css\";i:477;s:31:\"text-columns/editor-rtl.min.css\";i:478;s:23:\"text-columns/editor.css\";i:479;s:27:\"text-columns/editor.min.css\";i:480;s:26:\"text-columns/style-rtl.css\";i:481;s:30:\"text-columns/style-rtl.min.css\";i:482;s:22:\"text-columns/style.css\";i:483;s:26:\"text-columns/style.min.css\";i:484;s:19:\"verse/style-rtl.css\";i:485;s:23:\"verse/style-rtl.min.css\";i:486;s:15:\"verse/style.css\";i:487;s:19:\"verse/style.min.css\";i:488;s:20:\"video/editor-rtl.css\";i:489;s:24:\"video/editor-rtl.min.css\";i:490;s:16:\"video/editor.css\";i:491;s:20:\"video/editor.min.css\";i:492;s:19:\"video/style-rtl.css\";i:493;s:23:\"video/style-rtl.min.css\";i:494;s:15:\"video/style.css\";i:495;s:19:\"video/style.min.css\";i:496;s:19:\"video/theme-rtl.css\";i:497;s:23:\"video/theme-rtl.min.css\";i:498;s:15:\"video/theme.css\";i:499;s:19:\"video/theme.min.css\";}}','yes');
INSERT INTO `wp_options` VALUES (123,'recovery_keys','a:0:{}','yes');
INSERT INTO `wp_options` VALUES (124,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-6.4.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-6.4.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-6.4.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-6.4.1-new-bundled.zip\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"6.4.1\";s:7:\"version\";s:5:\"6.4.1\";s:11:\"php_version\";s:5:\"7.0.0\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"6.4\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1700431265;s:15:\"version_checked\";s:5:\"6.4.1\";s:12:\"translations\";a:0:{}}','no');
INSERT INTO `wp_options` VALUES (126,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1700317334;s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:0:{}}','no');
INSERT INTO `wp_options` VALUES (130,'theme_mods_twentytwentyfour','a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1699968061;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:3:{i:0;s:7:\"block-2\";i:1;s:7:\"block-3\";i:2;s:7:\"block-4\";}s:9:\"sidebar-2\";a:2:{i:0;s:7:\"block-5\";i:1;s:7:\"block-6\";}}}}','yes');
INSERT INTO `wp_options` VALUES (132,'_site_transient_timeout_browser_9c1ce27f08b16479d2e17743062b28ed','1700572649','no');
INSERT INTO `wp_options` VALUES (133,'_site_transient_browser_9c1ce27f08b16479d2e17743062b28ed','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:9:\"120.0.0.0\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no');
INSERT INTO `wp_options` VALUES (134,'_site_transient_timeout_php_check_18f908370f4cb169b20964c7203d6110','1700572650','no');
INSERT INTO `wp_options` VALUES (135,'_site_transient_php_check_18f908370f4cb169b20964c7203d6110','a:5:{s:19:\"recommended_version\";s:3:\"7.4\";s:15:\"minimum_version\";s:3:\"7.0\";s:12:\"is_supported\";b:1;s:9:\"is_secure\";b:1;s:13:\"is_acceptable\";b:1;}','no');
INSERT INTO `wp_options` VALUES (149,'can_compress_scripts','1','yes');
INSERT INTO `wp_options` VALUES (153,'finished_updating_comment_type','1','yes');
INSERT INTO `wp_options` VALUES (158,'current_theme','Raft','yes');
INSERT INTO `wp_options` VALUES (159,'theme_mods_raft','a:4:{i:0;b:0;s:19:\"wp_classic_sidebars\";a:0:{}s:18:\"nav_menu_locations\";a:0:{}s:18:\"custom_css_post_id\";i:-1;}','yes');
INSERT INTO `wp_options` VALUES (160,'theme_switched','','yes');
INSERT INTO `wp_options` VALUES (161,'raft_install','1699968061','yes');
INSERT INTO `wp_options` VALUES (164,'_transient_timeout_raft_106versions','1700400062','no');
INSERT INTO `wp_options` VALUES (165,'_transient_raft_106versions','a:6:{i:0;a:2:{s:7:\"version\";s:5:\"1.0.1\";s:3:\"url\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.1.zip\";}i:1;a:2:{s:7:\"version\";s:5:\"1.0.2\";s:3:\"url\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.2.zip\";}i:2;a:2:{s:7:\"version\";s:5:\"1.0.3\";s:3:\"url\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.3.zip\";}i:3;a:2:{s:7:\"version\";s:5:\"1.0.4\";s:3:\"url\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.4.zip\";}i:4;a:2:{s:7:\"version\";s:5:\"1.0.5\";s:3:\"url\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.5.zip\";}i:5;a:2:{s:7:\"version\";s:5:\"1.0.6\";s:3:\"url\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.6.zip\";}}','no');
INSERT INTO `wp_options` VALUES (172,'WPLANG','','yes');
INSERT INTO `wp_options` VALUES (173,'new_admin_email','simple.learn@learn.org','yes');
INSERT INTO `wp_options` VALUES (179,'site_logo','33','yes');
INSERT INTO `wp_options` VALUES (208,'elementor_disable_color_schemes','yes','yes');
INSERT INTO `wp_options` VALUES (209,'elementor_disable_typography_schemes','yes','yes');
INSERT INTO `wp_options` VALUES (210,'elementor_viewport_lg','1000','yes');
INSERT INTO `wp_options` VALUES (211,'elementor_viewport_md','690','yes');
INSERT INTO `wp_options` VALUES (212,'theme_mods_blocksy','a:12:{s:38:\"blocksy_woocommerce_thumbnail_cropping\";s:10:\"predefined\";s:18:\"blog_archive_order\";a:7:{i:0;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:0;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:1;a:3:{s:2:\"id\";s:5:\"title\";s:11:\"heading_tag\";s:2:\"h2\";s:7:\"enabled\";b:1;}i:2;a:5:{s:2:\"id\";s:14:\"featured_image\";s:11:\"thumb_ratio\";s:3:\"4/3\";s:12:\"is_boundless\";s:3:\"yes\";s:10:\"image_size\";s:12:\"medium_large\";s:7:\"enabled\";b:1;}i:3;a:3:{s:2:\"id\";s:7:\"excerpt\";s:14:\"excerpt_length\";s:2:\"40\";s:7:\"enabled\";b:1;}i:4;a:3:{s:2:\"id\";s:9:\"read_more\";s:11:\"button_type\";s:10:\"background\";s:7:\"enabled\";b:0;}i:5;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:6;a:2:{s:2:\"id\";s:7:\"divider\";s:7:\"enabled\";b:0;}}s:18:\"blog_hero_elements\";a:3:{i:0;a:4:{s:2:\"id\";s:12:\"custom_title\";s:7:\"enabled\";b:1;s:11:\"heading_tag\";s:2:\"h1\";s:5:\"title\";s:4:\"Home\";}i:1;a:3:{s:2:\"id\";s:18:\"custom_description\";s:7:\"enabled\";b:1;s:22:\"description_visibility\";a:3:{s:7:\"desktop\";b:1;s:6:\"tablet\";b:1;s:6:\"mobile\";b:0;}}i:2;a:2:{s:2:\"id\";s:11:\"breadcrumbs\";s:7:\"enabled\";b:0;}}s:24:\"categories_archive_order\";a:7:{i:0;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:0;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:1;a:3:{s:2:\"id\";s:5:\"title\";s:11:\"heading_tag\";s:2:\"h2\";s:7:\"enabled\";b:1;}i:2;a:5:{s:2:\"id\";s:14:\"featured_image\";s:11:\"thumb_ratio\";s:3:\"4/3\";s:12:\"is_boundless\";s:3:\"yes\";s:10:\"image_size\";s:12:\"medium_large\";s:7:\"enabled\";b:1;}i:3;a:3:{s:2:\"id\";s:7:\"excerpt\";s:14:\"excerpt_length\";s:2:\"40\";s:7:\"enabled\";b:1;}i:4;a:3:{s:2:\"id\";s:9:\"read_more\";s:11:\"button_type\";s:10:\"background\";s:7:\"enabled\";b:0;}i:5;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:6;a:2:{s:2:\"id\";s:7:\"divider\";s:7:\"enabled\";b:0;}}s:24:\"categories_hero_elements\";a:3:{i:0;a:4:{s:2:\"id\";s:12:\"custom_title\";s:7:\"enabled\";b:1;s:11:\"heading_tag\";s:2:\"h1\";s:5:\"title\";s:4:\"Home\";}i:1;a:3:{s:2:\"id\";s:18:\"custom_description\";s:7:\"enabled\";b:1;s:22:\"description_visibility\";a:3:{s:7:\"desktop\";b:1;s:6:\"tablet\";b:1;s:6:\"mobile\";b:0;}}i:2;a:2:{s:2:\"id\";s:11:\"breadcrumbs\";s:7:\"enabled\";b:0;}}s:20:\"author_archive_order\";a:7:{i:0;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:0;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:1;a:3:{s:2:\"id\";s:5:\"title\";s:11:\"heading_tag\";s:2:\"h2\";s:7:\"enabled\";b:1;}i:2;a:5:{s:2:\"id\";s:14:\"featured_image\";s:11:\"thumb_ratio\";s:3:\"4/3\";s:12:\"is_boundless\";s:3:\"yes\";s:10:\"image_size\";s:12:\"medium_large\";s:7:\"enabled\";b:1;}i:3;a:3:{s:2:\"id\";s:7:\"excerpt\";s:14:\"excerpt_length\";s:2:\"40\";s:7:\"enabled\";b:1;}i:4;a:3:{s:2:\"id\";s:9:\"read_more\";s:11:\"button_type\";s:10:\"background\";s:7:\"enabled\";b:0;}i:5;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:6;a:2:{s:2:\"id\";s:7:\"divider\";s:7:\"enabled\";b:0;}}s:20:\"author_hero_elements\";a:5:{i:0;a:6:{s:2:\"id\";s:12:\"custom_title\";s:7:\"enabled\";b:1;s:11:\"heading_tag\";s:2:\"h1\";s:5:\"title\";s:4:\"Home\";s:17:\"has_author_avatar\";s:3:\"yes\";s:18:\"author_avatar_size\";i:60;}i:1;a:3:{s:2:\"id\";s:18:\"custom_description\";s:7:\"enabled\";b:1;s:22:\"description_visibility\";a:3:{s:7:\"desktop\";b:1;s:6:\"tablet\";b:1;s:6:\"mobile\";b:0;}}i:2;a:4:{s:2:\"id\";s:11:\"custom_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:3:\"yes\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:18:\"page_meta_elements\";a:3:{s:6:\"joined\";b:1;s:14:\"articles_count\";b:1;s:8:\"comments\";b:1;}}i:3;a:2:{s:2:\"id\";s:22:\"author_social_channels\";s:7:\"enabled\";b:1;}i:4;a:2:{s:2:\"id\";s:11:\"breadcrumbs\";s:7:\"enabled\";b:0;}}s:20:\"search_archive_order\";a:7:{i:0;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:0;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:1;a:3:{s:2:\"id\";s:5:\"title\";s:11:\"heading_tag\";s:2:\"h2\";s:7:\"enabled\";b:1;}i:2;a:5:{s:2:\"id\";s:14:\"featured_image\";s:11:\"thumb_ratio\";s:3:\"4/3\";s:12:\"is_boundless\";s:3:\"yes\";s:10:\"image_size\";s:12:\"medium_large\";s:7:\"enabled\";b:1;}i:3;a:3:{s:2:\"id\";s:7:\"excerpt\";s:14:\"excerpt_length\";s:2:\"40\";s:7:\"enabled\";b:1;}i:4;a:3:{s:2:\"id\";s:9:\"read_more\";s:11:\"button_type\";s:10:\"background\";s:7:\"enabled\";b:0;}i:5;a:5:{s:2:\"id\";s:9:\"post_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:2:\"no\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:9:\"meta_type\";s:6:\"simple\";s:12:\"meta_divider\";s:5:\"slash\";}i:6;a:2:{s:2:\"id\";s:7:\"divider\";s:7:\"enabled\";b:0;}}s:20:\"search_hero_elements\";a:3:{i:0;a:4:{s:2:\"id\";s:12:\"custom_title\";s:7:\"enabled\";b:1;s:11:\"heading_tag\";s:2:\"h1\";s:5:\"title\";s:4:\"Home\";}i:1;a:3:{s:2:\"id\";s:18:\"custom_description\";s:7:\"enabled\";b:1;s:22:\"description_visibility\";a:3:{s:7:\"desktop\";b:1;s:6:\"tablet\";b:1;s:6:\"mobile\";b:0;}}i:2;a:2:{s:2:\"id\";s:11:\"breadcrumbs\";s:7:\"enabled\";b:0;}}s:30:\"single_blog_post_hero_elements\";a:4:{i:0;a:4:{s:2:\"id\";s:12:\"custom_title\";s:7:\"enabled\";b:1;s:11:\"heading_tag\";s:2:\"h1\";s:5:\"title\";s:4:\"Home\";}i:1;a:3:{s:2:\"id\";s:18:\"custom_description\";s:7:\"enabled\";b:1;s:22:\"description_visibility\";a:3:{s:7:\"desktop\";b:1;s:6:\"tablet\";b:1;s:6:\"mobile\";b:0;}}i:2;a:4:{s:2:\"id\";s:11:\"custom_meta\";s:7:\"enabled\";b:1;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:3:\"yes\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:18:\"page_meta_elements\";a:3:{s:6:\"joined\";b:1;s:14:\"articles_count\";b:1;s:8:\"comments\";b:1;}}i:3;a:2:{s:2:\"id\";s:11:\"breadcrumbs\";s:7:\"enabled\";b:0;}}s:25:\"single_page_hero_elements\";a:4:{i:0;a:4:{s:2:\"id\";s:12:\"custom_title\";s:7:\"enabled\";b:1;s:11:\"heading_tag\";s:2:\"h1\";s:5:\"title\";s:4:\"Home\";}i:1;a:3:{s:2:\"id\";s:18:\"custom_description\";s:7:\"enabled\";b:1;s:22:\"description_visibility\";a:3:{s:7:\"desktop\";b:1;s:6:\"tablet\";b:1;s:6:\"mobile\";b:0;}}i:2;a:4:{s:2:\"id\";s:11:\"custom_meta\";s:7:\"enabled\";b:0;s:13:\"meta_elements\";a:5:{i:0;a:5:{s:2:\"id\";s:6:\"author\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"By\";s:17:\"has_author_avatar\";s:3:\"yes\";s:11:\"avatar_size\";i:25;}i:1;a:5:{s:2:\"id\";s:9:\"post_date\";s:7:\"enabled\";b:1;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:2;a:5:{s:2:\"id\";s:12:\"updated_date\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"On\";s:18:\"date_format_source\";s:7:\"default\";s:11:\"date_format\";s:6:\"M j, Y\";}i:3;a:4:{s:2:\"id\";s:10:\"categories\";s:7:\"enabled\";b:0;s:5:\"label\";s:2:\"In\";s:5:\"style\";s:6:\"simple\";}i:4;a:2:{s:2:\"id\";s:8:\"comments\";s:7:\"enabled\";b:1;}}s:18:\"page_meta_elements\";a:3:{s:6:\"joined\";b:1;s:14:\"articles_count\";b:1;s:8:\"comments\";b:1;}}i:3;a:2:{s:2:\"id\";s:11:\"breadcrumbs\";s:7:\"enabled\";b:0;}}s:18:\"custom_css_post_id\";i:-1;}','yes');
INSERT INTO `wp_options` VALUES (213,'_transient_timeout_blocksy_dynamic_styles_descriptor','1731149204','no');
INSERT INTO `wp_options` VALUES (214,'_transient_blocksy_dynamic_styles_descriptor','a:2:{s:12:\"google_fonts\";a:0:{}s:6:\"styles\";a:3:{s:7:\"desktop\";s:8276:\"[data-header*=\"type-1\"] .ct-header [data-id=\"logo\"] .site-title {--fontWeight:700;--fontSize:25px;--lineHeight:1.5;--linkInitialColor:var(--paletteColor4);} [data-header*=\"type-1\"] .ct-header [data-id=\"menu\"] > ul > li > a {--fontWeight:700;--textTransform:uppercase;--fontSize:12px;--lineHeight:1.3;--linkInitialColor:var(--color);} [data-header*=\"type-1\"] .ct-header [data-id=\"menu\"][data-menu*=\"type-3\"] > ul > li > a {--linkHoverColor:#ffffff;--linkActiveColor:#ffffff;} [data-header*=\"type-1\"] .ct-header [data-id=\"menu\"] .sub-menu .ct-menu-link {--linkInitialColor:#ffffff;--fontWeight:500;--fontSize:12px;} [data-header*=\"type-1\"] .ct-header [data-id=\"menu\"] .sub-menu {--dropdown-divider:1px dashed rgba(255, 255, 255, 0.1);--box-shadow:0px 10px 20px rgba(41, 51, 61, 0.1);--border-radius:0px 0px 2px 2px;} [data-header*=\"type-1\"] .ct-header [data-row*=\"middle\"] {--height:120px;background-color:var(--paletteColor8);background-image:none;--borderTop:none;--borderBottom:none;--box-shadow:none;} [data-header*=\"type-1\"] .ct-header [data-row*=\"middle\"] > div {--borderTop:none;--borderBottom:none;} [data-header*=\"type-1\"] [data-id=\"mobile-menu\"] {--fontWeight:700;--fontSize:20px;--linkInitialColor:#ffffff;--mobile-menu-divider:none;} [data-header*=\"type-1\"] #offcanvas .ct-panel-inner {background-color:rgba(18, 21, 25, 0.98);} [data-header*=\"type-1\"] #offcanvas {--side-panel-width:500px;} [data-header*=\"type-1\"] [data-behaviour*=\"side\"] {--box-shadow:0px 0px 70px rgba(0, 0, 0, 0.35);} [data-header*=\"type-1\"] [data-id=\"search\"] .ct-label {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;} [data-header*=\"type-1\"] #search-modal .ct-search-results a {--fontWeight:500;--fontSize:14px;--lineHeight:1.4;} [data-header*=\"type-1\"] #search-modal {--linkInitialColor:#ffffff;--form-text-initial-color:#ffffff;--form-text-focus-color:#ffffff;background-color:rgba(18, 21, 25, 0.98);} [data-header*=\"type-1\"] #search-modal input {--form-field-border-initial-color:rgba(255, 255, 255, 0.2);} [data-header*=\"type-1\"] [data-id=\"trigger\"] {--icon-size:18px;} [data-header*=\"type-1\"] [data-id=\"trigger\"] .ct-label {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;} [data-header*=\"type-1\"] {--header-height:120px;} [data-footer*=\"type-1\"] .ct-footer [data-row*=\"bottom\"] > div {--container-spacing:25px;--border:none;--border-top:none;--border-bottom:none;--grid-template-columns:initial;} [data-footer*=\"type-1\"] .ct-footer [data-row*=\"bottom\"] .widget-title {--fontSize:16px;} [data-footer*=\"type-1\"] .ct-footer [data-row*=\"bottom\"] {--border-top:none;--border-bottom:none;background-color:transparent;} [data-footer*=\"type-1\"] [data-id=\"copyright\"] {--fontWeight:400;--fontSize:15px;--lineHeight:1.3;} [data-footer*=\"type-1\"][data-footer*=\"reveal\"] .site-main {--footer-box-shadow:0px 30px 50px rgba(0, 0, 0, 0.1);} [data-footer*=\"type-1\"] footer.ct-footer {background-color:var(--paletteColor6);}:root {--fontFamily:-apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif, \'Apple Color Emoji\', \'Segoe UI Emoji\', \'Segoe UI Symbol\';--fontWeight:400;--textTransform:none;--textDecoration:none;--fontSize:16px;--lineHeight:1.65;--letterSpacing:0em;--buttonFontWeight:500;--buttonFontSize:15px;--has-classic-forms:var(--true);--has-modern-forms:var(--false);--form-field-border-initial-color:var(--border-color);--form-field-border-focus-color:var(--paletteColor1);--form-selection-control-initial-color:var(--border-color);--form-selection-control-accent-color:var(--paletteColor1);--paletteColor1:#2872fa;--paletteColor2:#1559ed;--paletteColor3:#3A4F66;--paletteColor4:#192a3d;--paletteColor5:#e1e8ed;--paletteColor6:#f2f5f7;--paletteColor7:#FAFBFC;--paletteColor8:#ffffff;--color:var(--paletteColor3);--linkInitialColor:var(--paletteColor1);--linkHoverColor:var(--paletteColor2);--selectionTextColor:#ffffff;--selectionBackgroundColor:var(--paletteColor1);--border-color:var(--paletteColor5);--headings-color:var(--paletteColor4);--content-spacing:1.5em;--buttonMinHeight:40px;--buttonShadow:none;--buttonTransform:none;--buttonTextInitialColor:#ffffff;--buttonTextHoverColor:#ffffff;--buttonInitialColor:var(--paletteColor1);--buttonHoverColor:var(--paletteColor2);--button-border:none;--buttonBorderRadius:3px;--button-padding:5px 20px;--normal-container-max-width:1290px;--content-vertical-spacing:60px;--narrow-container-max-width:750px;--wide-offset:130px;}h1 {--fontWeight:700;--fontSize:40px;--lineHeight:1.5;}h2 {--fontWeight:700;--fontSize:35px;--lineHeight:1.5;}h3 {--fontWeight:700;--fontSize:30px;--lineHeight:1.5;}h4 {--fontWeight:700;--fontSize:25px;--lineHeight:1.5;}h5 {--fontWeight:700;--fontSize:20px;--lineHeight:1.5;}h6 {--fontWeight:700;--fontSize:16px;--lineHeight:1.5;}.wp-block-pullquote, .ct-quote-widget blockquote {--fontFamily:Georgia;--fontWeight:600;--fontSize:25px;}code, kbd, samp, pre {--fontFamily:monospace;--fontWeight:400;--fontSize:16px;}.ct-sidebar .widget-title {--fontSize:18px;}.ct-breadcrumbs {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;}body {background-color:var(--paletteColor7);background-image:none;} [data-prefix=\"single_blog_post\"] .entry-header .page-title {--fontSize:30px;} [data-prefix=\"single_blog_post\"] .entry-header .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;--lineHeight:1.3;} [data-prefix=\"categories\"] .entry-header .page-title {--fontSize:30px;} [data-prefix=\"categories\"] .entry-header .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;--lineHeight:1.3;} [data-prefix=\"search\"] .entry-header .page-title {--fontSize:30px;} [data-prefix=\"search\"] .entry-header .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;--lineHeight:1.3;} [data-prefix=\"author\"] .entry-header .page-title {--fontSize:30px;} [data-prefix=\"author\"] .entry-header .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;--lineHeight:1.3;} [data-prefix=\"author\"] .hero-section[data-type=\"type-2\"] {background-color:var(--paletteColor6);background-image:none;--container-padding:50px 0;} [data-prefix=\"single_page\"] .entry-header .page-title {--fontSize:30px;} [data-prefix=\"single_page\"] .entry-header .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;--lineHeight:1.3;} [data-prefix=\"blog\"] .entries {--grid-template-columns:repeat(3, minmax(0, 1fr));} [data-prefix=\"blog\"] .entry-card .entry-title {--fontSize:20px;--lineHeight:1.3;} [data-prefix=\"blog\"] .entry-card .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;} [data-prefix=\"blog\"] .entry-card {background-color:var(--paletteColor8);--box-shadow:0px 12px 18px -6px rgba(34, 56, 101, 0.04);} [data-prefix=\"categories\"] .entries {--grid-template-columns:repeat(3, minmax(0, 1fr));} [data-prefix=\"categories\"] .entry-card .entry-title {--fontSize:20px;--lineHeight:1.3;} [data-prefix=\"categories\"] .entry-card .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;} [data-prefix=\"categories\"] .entry-card {background-color:var(--paletteColor8);--box-shadow:0px 12px 18px -6px rgba(34, 56, 101, 0.04);} [data-prefix=\"author\"] .entries {--grid-template-columns:repeat(3, minmax(0, 1fr));} [data-prefix=\"author\"] .entry-card .entry-title {--fontSize:20px;--lineHeight:1.3;} [data-prefix=\"author\"] .entry-card .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;} [data-prefix=\"author\"] .entry-card {background-color:var(--paletteColor8);--box-shadow:0px 12px 18px -6px rgba(34, 56, 101, 0.04);} [data-prefix=\"search\"] .entries {--grid-template-columns:repeat(3, minmax(0, 1fr));} [data-prefix=\"search\"] .entry-card .entry-title {--fontSize:20px;--lineHeight:1.3;} [data-prefix=\"search\"] .entry-card .entry-meta {--fontWeight:600;--textTransform:uppercase;--fontSize:12px;} [data-prefix=\"search\"] .entry-card {background-color:var(--paletteColor8);--box-shadow:0px 12px 18px -6px rgba(34, 56, 101, 0.04);}form textarea {--form-field-height:170px;}.ct-sidebar {--linkInitialColor:var(--color);} [data-prefix=\"single_blog_post\"] [class*=\"ct-container\"] > article[class*=\"post\"] {--has-boxed:var(--false);--has-wide:var(--true);} [data-prefix=\"single_page\"] [class*=\"ct-container\"] > article[class*=\"post\"] {--has-boxed:var(--false);--has-wide:var(--true);}\";s:6:\"tablet\";s:621:\"[data-header*=\"type-1\"] .ct-header [data-row*=\"middle\"] {--height:70px;} [data-header*=\"type-1\"] #offcanvas {--side-panel-width:65vw;} [data-header*=\"type-1\"] {--header-height:70px;} [data-footer*=\"type-1\"] .ct-footer [data-row*=\"bottom\"] > div {--grid-template-columns:initial;} [data-prefix=\"blog\"] .entries {--grid-template-columns:repeat(2, minmax(0, 1fr));} [data-prefix=\"categories\"] .entries {--grid-template-columns:repeat(2, minmax(0, 1fr));} [data-prefix=\"author\"] .entries {--grid-template-columns:repeat(2, minmax(0, 1fr));} [data-prefix=\"search\"] .entries {--grid-template-columns:repeat(2, minmax(0, 1fr));}\";s:6:\"mobile\";s:835:\"[data-header*=\"type-1\"] #offcanvas {--side-panel-width:90vw;} [data-footer*=\"type-1\"] .ct-footer [data-row*=\"bottom\"] > div {--container-spacing:15px;--grid-template-columns:initial;} [data-prefix=\"blog\"] .entries {--grid-template-columns:repeat(1, minmax(0, 1fr));} [data-prefix=\"blog\"] .entry-card .entry-title {--fontSize:18px;} [data-prefix=\"categories\"] .entries {--grid-template-columns:repeat(1, minmax(0, 1fr));} [data-prefix=\"categories\"] .entry-card .entry-title {--fontSize:18px;} [data-prefix=\"author\"] .entries {--grid-template-columns:repeat(1, minmax(0, 1fr));} [data-prefix=\"author\"] .entry-card .entry-title {--fontSize:18px;} [data-prefix=\"search\"] .entries {--grid-template-columns:repeat(1, minmax(0, 1fr));} [data-prefix=\"search\"] .entry-card .entry-title {--fontSize:18px;}:root {--content-vertical-spacing:50px;}\";}}','no');
INSERT INTO `wp_options` VALUES (215,'blocksy_db_version','1.9.11','yes');
INSERT INTO `wp_options` VALUES (219,'raft-welcome-notice-dismissed','yes','yes');
INSERT INTO `wp_options` VALUES (220,'category_children','a:0:{}','yes');
INSERT INTO `wp_options` VALUES (237,'https_migration_required','1','yes');
INSERT INTO `wp_options` VALUES (258,'_transient_health-check-site-status-result','{\"good\":\"20\",\"recommended\":\"2\",\"critical\":\"0\"}','yes');
INSERT INTO `wp_options` VALUES (318,'_site_transient_timeout_community-events-d41d8cd98f00b204e9800998ecf8427e','1700381583','no');
INSERT INTO `wp_options` VALUES (319,'_site_transient_community-events-d41d8cd98f00b204e9800998ecf8427e','a:4:{s:9:\"sandboxed\";b:0;s:5:\"error\";N;s:8:\"location\";a:1:{s:2:\"ip\";b:0;}s:6:\"events\";a:0:{}}','no');
INSERT INTO `wp_options` VALUES (334,'recently_activated','a:0:{}','yes');
INSERT INTO `wp_options` VALUES (346,'_site_transient_update_themes','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1700337538;s:7:\"checked\";a:1:{s:4:\"raft\";s:5:\"1.0.6\";}s:8:\"response\";a:0:{}s:9:\"no_update\";a:1:{s:4:\"raft\";a:6:{s:5:\"theme\";s:4:\"raft\";s:11:\"new_version\";s:5:\"1.0.6\";s:3:\"url\";s:34:\"https://wordpress.org/themes/raft/\";s:7:\"package\";s:52:\"https://downloads.wordpress.org/theme/raft.1.0.6.zip\";s:8:\"requires\";s:3:\"5.5\";s:12:\"requires_php\";s:3:\"7.0\";}}s:12:\"translations\";a:0:{}}','no');
INSERT INTO `wp_options` VALUES (362,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1700345293','no');
INSERT INTO `wp_options` VALUES (363,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:52:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n\n \n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:8:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"The latest news about WordPress and the WordPress community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 22:46:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://wordpress.org/?v=6.5-alpha-57122\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"image\";a:1:{i:0;a:6:{s:4:\"data\";s:11:\"\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:3:\"url\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://s.w.org/favicon.ico?2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"width\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"32\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:6:\"height\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"32\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:63:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"State of the Word 2023 – Madrid, Spain\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2023/11/state-of-the-word-2023-madrid-spain/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Nov 2023 20:03:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:6:\"Events\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:4:\"sotw\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:17:\"state of the word\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16429\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:328:\"The countdown is on for this year\'s State of the Word! If you missed the initial announcement a few weeks ago, mark your calendars for December 11, 2023.\n\nState of the Word is the annual keynote in which WordPress co-founder Matt Mullenweg celebrates the progress of the open source project and offers a glimpse into its future.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Dan Soschin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4331:\"\n<figure class=\"wp-block-image size-large\"><img fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=1024%2C683&#038;ssl=1\" alt=\"State of the Word\" class=\"wp-image-16438\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The countdown is on for this year&#8217;s State of the Word! If you missed the initial announcement a few weeks ago, you&#8217;ll want to mark your calendars for December 11, 2023.</p>\n\n\n\n<p>State of the Word is the annual keynote in which WordPress co-founder <a href=\"https://ma.tt/\">Matt Mullenweg</a> celebrates the progress of the open source project and offers a glimpse into its future.</p>\n\n\n\n<p>For the first time, State of the Word ventures beyond North America, bringing the WordPress community to a new and vibrant city that plays a vital role in the WordPress project &#8212; Madrid, Spain! The event will be live-streamed to WordPress enthusiasts and newcomers around the globe via the <a href=\"https://youtube.com/wordpress\">WordPress YouTube channel</a>.</p>\n\n\n\n<p>Please visit the <a href=\"https://wordpress.org/state-of-the-word\">event website</a> for more event details and live-streaming information.</p>\n\n\n\n<p><strong>What:</strong> State of the Word 2023<br><strong>When: </strong><a href=\"https://calendar.google.com/calendar/u/0/r/eventedit?text=State+of+the+Word+2023&amp;dates=20231211T150000Z/20231211T190000Z&amp;details=State+of+the+Word+is+the+annual+keynote+address+delivered+by+the+WordPress+project%E2%80%99s+co-founder%2C+Matt+Mullenweg.+Every+year%2C+Matt+shares+reflections+on+the+project%E2%80%99s+progress+and+the+future+of+open+source.+Expect+this+and+more+in+this+year%E2%80%99s+edition.%0A%0AState+of+the+Word+will+be+live+streamed+from+Madrid,+Spain,+and+is+free+for+all+to+watch+or+attend+in+person+with+a+ticket.%0A%0Ahttps://wordpress.org/state-of-the-word/\">December 11, 2023, 15:00 UTC</a> (Start of live stream)<br><strong>Where: </strong><a href=\"https://www.palacioneptuno.com/\">Palacio Neptuno</a>, Madrid, Spain<br><strong>Streaming: </strong><a href=\"https://youtube.com/wordpress\">Watch the live stream</a> on the WordPress YouTube channel.<br><strong>Tickets: </strong><a href=\"https://wordcampcentral.survey.fm/request-a-seat-sotw-2023-spain\">Request a ticket to attend in person</a>.<strong><br></strong><em>Please note that the venue’s capacity is limited; therefore, not all ticket requests will be granted.&nbsp;</em><br><strong>Meetups: </strong>The community will sponsor several local watch parties globally, both in<br>person and online. <a href=\"https://wordpress.org/state-of-the-word\">Find one near you or organize one</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Have a question for Matt?</h2>\n\n\n\n<p>State of the Word will include a Q&amp;A session. If you want to participate, you can send your question to ask-matt@wordcamp.org or ask during the event via the Q&amp;A app Slido. A QR code for your submission will be provided during the event live stream.</p>\n\n\n\n<p>Given the volume of questions usually submitted, only some will be answered live, while others will be covered in a follow-up post published after the event on <a href=\"https://make.wordpress.org/project\">make.wordpress.org/project</a>.</p>\n\n\n\n<p>Is this your first State of the Word? Check out <a href=\"https://wordpress.tv/tag/state-of-the-word/\">prior events on WordPress.tv</a> for an introduction to the format.</p>\n\n\n\n<p>See you in person and online on December 11!</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" />\n\n\n\n<p><em>Thank you to <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a> and <a href=\"https://profiles.wordpress.org/cbringmann/\">Chloé Bringmann</a> for reviewing this post.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16429\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:68:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n\n\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Introducing Twenty Twenty-Four\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wordpress.org/news/2023/11/introducing-twenty-twenty-four/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Nov 2023 18:29:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:6:\"Design\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:18:\"Twenty Twenty-Four\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16394\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:127:\"Meet Twenty Twenty-Four, the most versatile default theme yet—bundled with WordPress 6.4 and ready to make it uniquely yours.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:2:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:59:\"https://wordpress.org/news/files/2023/11/tt4-i9-small-1.mp4\";s:6:\"length\";s:7:\"6747134\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:82:\"https://wordpress.org/news/files/2023/11/tt4-howto-replace-template_compressed.mp4\";s:6:\"length\";s:8:\"12815358\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Maggie Cabrera\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:7209:\"\n<p>When it comes to designing a website, one size doesn&#8217;t fit all. We understand that every WordPress user has unique needs and goals, whether you&#8217;re an aspiring entrepreneur, a passionate photographer, a prolific writer, or a bit of them all. That&#8217;s why we are thrilled to introduce <a href=\"https://wordpress.org/themes/twentytwentyfour/\"><strong>Twenty Twenty-Four</strong></a>, the most versatile default theme yet—bundled with <a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4</a> and ready to make it uniquely yours.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls poster=\"https://wordpress.org/news/files/2023/11/TT4-square.jpg\" src=\"https://wordpress.org/news/files/2023/11/tt4-i9-small-1.mp4\"></video></figure>\n\n\n\n<h2 class=\"wp-block-heading\">A theme for every style</h2>\n\n\n\n<p>Unlike past default themes, Twenty Twenty-Four breaks away from the tradition of focusing on a specific topic or style. Instead, this theme has been thoughtfully crafted to cater to any type of website, regardless of its focus. The theme explores <strong>three different use cases</strong>: one designed for entrepreneurs and small businesses, another for photographers and artists, and a third tailored for writers and bloggers. Thanks to its multi-faceted nature and adaptability, Twenty Twenty-Four emerges as the perfect fit for any of your projects.</p>\n\n\n\n<p>As you dive into its templates and patterns, you will notice how the new Site Editor functionality opens up different pathways for building your site seamlessly.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Patterns at every step</h2>\n\n\n\n<p>Whether you&#8217;re looking to craft an About page, showcase your work, handle RSVPs, or design captivating landing pages, Twenty Twenty-Four has got you covered.<strong> </strong>Choose from an extensive collection of <a href=\"https://2024.wordpress.net/index.php/patterns/\"><strong>over 35 beautiful patterns</strong></a> to customize and suit your needs.</p>\n\n\n\n<p>For the first time, this theme features full-page patterns for templates like homepage, archive, search, single pages, and posts. Some are exclusively available during the template-switching and creation process, ensuring you have the right options when you need them.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://wordpress.org/news/files/2023/11/tt4-howto-replace-template_compressed.mp4\"></video></figure>\n\n\n\n<p>Moreover, you can take advantage of a variety of patterns for page sections, such as FAQs, testimonials, or pricing, to meet your site&#8217;s most specific requirements.</p>\n\n\n\n<p>With this diverse pattern library, Twenty Twenty-Four offers a flexible canvas to quickly assemble pages without having to start from scratch—saving you time and energy in the creation process. Just let your creativity flow and explore the possibilities!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" width=\"1024\" height=\"682\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=1024%2C682&#038;ssl=1\" alt=\"Screenshots of Twenty Twenty-Four patterns.\" class=\"wp-image-16397\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=1024%2C682&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=1536%2C1023&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?w=1600&amp;ssl=1 1600w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Site editing in its finest form</h2>\n\n\n\n<p>Twenty Twenty-Four ushers in a new era of block themes by bringing together the latest WordPress site editing capabilities. Discover newer design tools such as background image support in Group blocks and vertical text, providing an intuitive and efficient way to create compelling, interactive content.</p>\n\n\n\n<p>Find image placeholders with predefined aspect ratio settings within patterns, allowing you to drop images that perfectly fill the space. To go one step further, make your visuals interactive by enabling lightboxes. Ideal for showcasing galleries or portfolio images, this feature allows your visitors to expand and engage with them in full-screen mode. Activate it globally for all images throughout your site or for specific ones.</p>\n\n\n\n<p>For a smoother browsing experience on your site, you can disable the &#8220;Force page reload&#8221; setting in the Query Loop block. This allows the necessary content to be loaded dynamically when switching between different pages without needing a full-page refresh.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Elegance with purpose</h2>\n\n\n\n<p>Twenty Twenty-Four goes beyond versatility with a beautiful aesthetic inspired by contemporary design trends, giving your website a sleek and modern look. Key design elements include:</p>\n\n\n\n<ul>\n<li><strong>Cardo font for headlines</strong>: The Cardo font adds a touch of elegance to your site, creating a sophisticated visual experience.</li>\n\n\n\n<li><strong>Sans-serif system font for paragraphs</strong>: The sans-serif font ensures that your texts are cleaner and easier to read, enhancing overall readability.</li>\n\n\n\n<li><strong>Eight style variations</strong>: Twenty Twenty-Four presents a light color palette for a fresh and inviting appearance out-of-the-box, but you can customize it with seven additional style variations. Each includes fonts and colors carefully curated to work beautifully alongside the patterns and templates.</li>\n\n\n\n<li><strong>Sans-serif variations</strong>: Besides the default styles, the theme offers two additional sans-serif variations, providing more choices for your site&#8217;s typography.</li>\n</ul>\n\n\n\n<p>Along with its design, Twenty Twenty-Four has been meticulously optimized for performance. This ensures that your website not only looks great but also delivers a fast and efficient user experience.</p>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\" href=\"https://playground.wordpress.net/?theme=twentytwentyfour\">Explore Twenty Twenty-Four now</a></div>\n</div>\n\n\n\n<p>More information can be found in the following links:</p>\n\n\n\n<ul>\n<li><a href=\"https://wordpress.org/themes/twentytwentyfour/\">Download Twenty Twenty-Four</a></li>\n\n\n\n<li><a href=\"https://wordpress.org/documentation/article/twenty-twenty-four/\">Twenty Twenty-Four Documentation</a></li>\n\n\n\n<li><a href=\"https://make.wordpress.org/core/2023/08/24/introducing-twenty-twenty-four/\">Twenty Twenty-Four Kick Off</a></li>\n</ul>\n\n\n\n<p><em>The Twenty Twenty-Four theme was designed by </em><a href=\"https://profiles.wordpress.org/beafialho/\"><em>Beatriz Fialho</em></a><em> and made possible thanks to the passion and tireless work of <a href=\"https://github.com/WordPress/twentytwentyfour/blob/trunk/CONTRIBUTORS.md\">more than 120 contributors</a>.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16394\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:61:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WP Briefing: Episode 66: Advocating Open Source Solutions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://wordpress.org/news/2023/11/episode-66-advocating-open-source-solutions/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Nov 2023 12:00:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"Podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:11:\"wp-briefing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/news/?post_type=podcast&p=16357\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:296:\"WordPress Executive Director, Josepha Haden Chomphosy, speaks to the strategic approach to integrating open source solutions within your company and offers insight into initiating open source advocacy conversations. Tune in for a session that could redefine your company\'s technological approach.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:51:\"https://wordpress.org/news/files/2023/11/WPB066.mp3\";s:6:\"length\";s:1:\"0\";s:4:\"type\";s:0:\"\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brett McSherry\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:11349:\"\n<p>WordPress Executive Director, Josepha Haden Chomphosy, speaks to the strategic approach to integrating open source solutions within your company and offers insight into initiating open source advocacy conversations. Tune in for a session that could redefine your company&#8217;s technological approach.</p>\n\n\n\n<p><em><strong>Have a question you&#8217;d like answered? You can submit them to&nbsp;<a href=\"mailto:wpbriefing@wordpress.org\">wpbriefing@WordPress.org</a>, either written or as a voice recording.</strong></em></p>\n\n\n\n<h2 class=\"wp-block-heading\">Credits</h2>\n\n\n\n<p>Host:&nbsp;<a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden Chomphosy</a><br>Editor:&nbsp;<a href=\"https://profiles.wordpress.org/dustinhartzler/\">Dustin Hartzler</a><br>Logo:&nbsp;<a href=\"https://profiles.wordpress.org/javiarce/\">Javier Arce</a><br>Production:&nbsp;<a href=\"https://profiles.wordpress.org/bjmcsherry/\">Brett McSherry</a><br>Song: Fearless First by Kevin MacLeod</p>\n\n\n\n<h2 class=\"wp-block-heading\">Show Notes</h2>\n\n\n\n<ul>\n<li><strong>Small List of Big Things</strong>\n<ul>\n<li><a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4 &#8220;Shirley&#8221;</a>  &#8211; The final major release of 2023 launched on November 7 &#8211; WordPress 6.4 &#8220;Shirley.&#8221; Download and check out this empowering release. </li>\n\n\n\n<li><a href=\"https://make.wordpress.org/updates/2023/10/31/whats-new-on-learn-wordpress-in-october-2023/\" target=\"_blank\" rel=\"noreferrer noopener\">The Training Team recently published</a> several new Learn resources for training guides to support Meetup Organizers. From lesson plans to online workshops, there are several ways to help you in your goals as a contributor to WordPress.</li>\n\n\n\n<li>The Diversity Team <a href=\"https://make.wordpress.org/community/handbook/meetup-organizer/event-formats/diversity-speaker-training-workshop/\" target=\"_blank\" rel=\"noreferrer noopener\">recently published</a> a new Diverse Speaker Training page, providing resources for new and experienced contributors to bring more diverse speaker lineups and inclusive, diverse WP events for official WordPress Meetups and WordCamps.</li>\n\n\n\n<li>If you have a story showing how WordPress has impacted what you are doing or what people you know have done, record something and send it to <a href=\"mailto:wpbriefing@WordPress.org\">wpbriefing@WordPress.org</a>. We&#8217;d love to hear from you.</li>\n</ul>\n</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Transcripts</h2>\n\n\n\n<span id=\"more-16357\"></span>\n\n\n\n<p>[00:00:00] <strong>Josepha:</strong> Hello everyone. And welcome to the WordPress Briefing. The podcast where you can catch quick explanations of the ideas behind the WordPress open source project, some insight into the community that supports it and get a small list of big things coming up in the next two weeks. I&#8217;m your host, Josepha Haden Chomphosy. Here we go.</p>\n\n\n\n<p>[00:00:28] (Intro music)&nbsp;</p>\n\n\n\n<p>[00:00:40] <strong>Josepha:</strong> Today, we&#8217;re talking about something I used to have a lot of experience with in my career before WordPress. I worked at a marketing agency. I wasn&#8217;t a developer. I was in data and strategy sorts of things. But part of the work heading into every project was an evaluation of what software was best. There were always a variety being considered, but WordPress was frequently one of them.</p>\n\n\n\n<p>Now, I don&#8217;t know if any of you have had that moment where you&#8217;re having to talk open source with a CTO or a CEO, but it can be nerve-wracking, to say the least. And it makes sense, right? Open source has a PR problem, especially when you&#8217;re speaking to leadership inside a business. And it doesn&#8217;t really matter the size, right?</p>\n\n\n\n<p>You&#8217;re advocating for something that requires a completely different mental model. It doesn&#8217;t fit into accepted concepts of what makes a business thrive or what makes a bet a sure thing. There were three, maybe four, concerns that came up every time I had this conversation. So, I&#8217;m going to share those concerns with you and a few possible counterpoints to get you started.</p>\n\n\n\n<p>[00:01:48] <strong>Josepha:</strong> First and always is the concern around security. I believe that this particular mismatch is rooted in an idea that controlled equals secure, which isn&#8217;t always the case. So the talking point is this. Since open source has a transparent development process, it is often more secure than proprietary software, contrary to what you might hear.</p>\n\n\n\n<p>That transparency allows vulnerabilities to be identified by independent researchers and community members and then patched quickly because you aren&#8217;t limited by who or what you know personally. </p>\n\n\n\n<p>And if you&#8217;re not having a conversation where you&#8217;re having to defend the security in open source and you just want to bring it up yourself, here is a conversation opener for that. Security is a top concern for all of us. Surprisingly, open source solutions often have stronger security measures due to the collaborative nature of their development. It&#8217;s a proactive approach to minimizing risks.&nbsp;</p>\n\n\n\n<p>[00:02:43] <strong>Josepha:</strong> A second thing that frequently came up was questions around innovation and future proofing of open source products. I think this mismatch is fully rooted in the Cathedral and the Bazaar methods of advancement. So the talking point for that one is this. Embracing open source fosters innovation. We can tap into the latest technologies and stay ahead of industry trends that way. It is specifically because we have a diverse set of viewpoints that we can make sure to quickly account for future risks, along with taking advantage of future opportunities. And by our organization being more active, we can potentially get exactly the solutions we need for our clients long term.</p>\n\n\n\n<p>And the conversation opener for this, if you are the one bringing up the topic, is I&#8217;ve been thinking about our long-term goals and how to keep our technology stack relevant. Open source not only keeps us current but also positions us as innovators in our field.</p>\n\n\n\n<p>[00:03:40] <strong>Josepha:</strong> And finally, the thing that seems to make or break the decision is the concept of independence. Part of any good business decision, especially around software, is determining upfront costs to getting started, long-term effectiveness of the chosen solution, and long-term mobility should circumstances change. Open source can address these from multiple vantage points.</p>\n\n\n\n<p>So here&#8217;s a good talking point for that one. Open source liberates us from vendor lock-in. We&#8217;re not tied to a single vendor&#8217;s roadmap or pricing changes, providing us with more options that suit our needs our clients&#8217; needs. Also, given how ubiquitous WordPress is in particular, there will always be a disaster recovery option should a senior developer leave.</p>\n\n\n\n<p>And beyond all of that, clients can own all of the content, audience attention, and clientele that we have all worked so hard to help them earn. And again, if you&#8217;re not defending things and instead choosing to bring them up as somebody who is trying to affect change in your own organization, here is a good place to start for that.</p>\n\n\n\n<p>Considering the dynamic nature of our industry, having the freedom to choose solutions independent of a specific vendor makes sure that we are always in control of our destiny.</p>\n\n\n\n<p>[00:04:59] <strong>Josepha:</strong> So, those are the three most frequent things I encountered when I was having conversations about which software to choose and what software was the best choice long term for both our organization and our client&#8217;s organizations.</p>\n\n\n\n<p>If you have been in the midst of this type of conversation and have been longing for some counterpoints, I hope this helps. But if you have been feeling in your heart of hearts that your company or organization would be better off using open source software, and of course, in my context, particularly WordPress as that software, but you&#8217;ve been worried about bringing it up, I hope this gives you the courage to get out there and be an agent of change in your organization. You can do it, and I know you can.</p>\n\n\n\n<p>[00:05:44] (Music interlude)&nbsp;</p>\n\n\n\n<p>[00:05:51] <strong>Josepha:</strong> All right, my friends, that brings us now to our small list of big things. </p>\n\n\n\n<p>[00:05:57] <strong>Josepha:</strong> First on the list, big, big thing. We launched WordPress 6.4 on November 7th, about a week ago. Be sure to download and check out the latest update on this monumental release. And while you&#8217;re doing it. Be sure to check out the new default theme that came out with it. It has a lot of patterns in it. I know I&#8217;ve talked about it quite a bit over the course of the year, but it&#8217;s really beautiful, and I think that it&#8217;s worth a good, strong highlight. So WordPress 6.4, you can get it on WordPress.org/download or inside your own host, probably. </p>\n\n\n\n<p>[00:06:29] <strong>Josepha:</strong> The second thing that we have is that the training team recently published several new Learn resources to support meetup organizers. So we&#8217;ve got over there some lesson plans, tutorials, online workshops. And there are also new materials that help you figure out how to accomplish your goals as a contributor to the WordPress project.</p>\n\n\n\n<p>[00:06:49] <strong>Josepha:</strong> And we also have a recently published new diverse speaker training page. It provides incredible resources for new and experienced contributors to bring more diverse speaker lineups and inclusive, diverse WordPress events for official WordPress meetups and WordCamps. </p>\n\n\n\n<p>[00:07:06] <strong>Josepha:</strong> And the fourth thing on our small list of big things today is that I would love to get a few voice recordings from you all, from folks who are listening to the WordPress Briefing, or folks that you know, to learn more about how WordPress has impacted you. </p>\n\n\n\n<p>One of the things that I miss the most from my days as a WordCamp organizer is that annually, I got to see people who had shown up, once at a meetup, you know, to learn what WordPress was, and then came back year after year to our WordCamp with these new goals and new successes and I got to watch their businesses change over time. And so if you have a story like that where WordPress impacted what you are doing or what people that you know have done, record something and send it to wpbriefing@WordPress.org. </p>\n\n\n\n<p>So that, my friends, is your small list of big things.</p>\n\n\n\n<p>[00:08:04] <strong>Josepha:</strong> Don&#8217;t forget to follow us on your favorite podcasting app or subscribe directly on WordPress.org/news. You&#8217;ll get a friendly reminder whenever there is a new episode. If you liked what you heard today, share it with a fellow WordPresser. Or, if you had questions about what you heard, you can share those with me at wpbriefing@WordPress.org. I&#8217;m your host, Josepha Haden Chomphosy. Thanks for tuning in today for the WordPress Briefing, and I&#8217;ll see you again in a couple of weeks. </p>\n\n\n\n<p>[00:08:31] (Music outro)</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16357\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"The Month in WordPress – October 2023\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2023/11/the-month-in-wordpress-october-2023/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 10 Nov 2023 23:06:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:18:\"Month in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:18:\"month in wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16365\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:391:\"September-October 2023 was yet another fun and eventful chapter in WordPress, with more WordCamps hosting exciting discussions, knowledge sharing, and learning. This month also welcomed the release of WordPress 6.4 and the Twenty Twenty-Four theme. Let’s check it out. Meet WordPress 6.4 “Shirley” WordPress 6.4 “Shirley” was released on November 7, 2023, and named after [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Nicholas Garofalo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:11694:\"\n<p>September-October 2023 was yet another fun and eventful chapter in WordPress, with more WordCamps hosting exciting discussions, knowledge sharing, and learning. This month also welcomed the release of WordPress 6.4 and the Twenty Twenty-Four theme. Let’s check it out.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Meet WordPress 6.4 “Shirley”</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&#038;ssl=1\" alt=\"Shirley WordPress 6.4\" class=\"wp-image-16319\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://wordpress.org/news/2023/11/shirley/\">WordPress 6.4 “Shirley”</a> was released on November 7, 2023, and named after the iconic jazz artist Shirley Horn. With the release of WordPress 6.4 comes the new <a href=\"https://wordpress.org/themes/twentytwentyfour/\">Twenty Twenty-Four theme</a>, a multi-faceted, highly flexible default theme pre-loaded with more than 35 templates and patterns.&nbsp;</p>\n\n\n\n<p>This release includes more than 100 performance-related updates for a faster and more efficient experience. There’s also a host of new features and enhancements that help improve the content creation process and streamline site editing.&nbsp;</p>\n\n\n\n<p>WordPress 6.4 was made possible by more than 600 contributors in at least 56 countries.&nbsp;Leading this release has been an underrepresented gender team, emphasizing WordPress’ commitment to fostering diverse voices in the open source project.</p>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-layout-flex wp-container-2 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-white-color has-dark-strokes-grey-background-color has-text-color has-background has-link-color wp-element-button\" href=\"https://wordpress.org/download/releases/6-4/\">Learn more about WordPress 6.4</a></div>\n</div>\n\n\n\n<div style=\"height:3px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">State of the Word 2023</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=1024%2C683&#038;ssl=1\" alt=\"State of the Word 2023 in Madrid Spain on December 11, 2023 at 15:00 UTC\" class=\"wp-image-16208\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Mark your calendars for State of the Word! The annual keynote address delivered by the WordPress project’s co-founder, Matt Mullenweg, will be held on December 11, 2023. For the first time, the event will take place outside North America—this time with the Spanish community in <strong>Madrid, Spain</strong>.</p>\n\n\n\n<p>A live stream will be available for WordPress enthusiasts who will not be able to attend in person. Stay tuned for more information, including how to reserve a ticket, soon!</p>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-layout-flex wp-container-3 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-white-color has-dark-strokes-grey-background-color has-text-color has-background has-link-color wp-element-button\" href=\"https://wordpress.org/news/2023/10/state-of-the-word-2023/\">Learn more about this year’s State of the Word</a></div>\n</div>\n\n\n\n<div style=\"height:3px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">New in the Gutenberg plugin</h2>\n\n\n\n<p>Two new versions of Gutenberg shipped in October:</p>\n\n\n\n<ul>\n<li><a href=\"https://make.wordpress.org/core/2023/10/11/whats-new-in-gutenberg-16-8-11-october/\"><strong>Gutenberg 16.8</strong></a> was released on October 11, 2023. It introduced enhancements to the Cover block and Font Library, and added the option to view the active template when editing pages.</li>\n\n\n\n<li><a href=\"https://make.wordpress.org/core/2023/10/25/whats-new-in-gutenberg-16-9-25-october-2/\"><strong>Gutenberg 16.9</strong></a> was released on October 25, 2023. This update lets you rename nearly every block from within the editor, as well as duplicate or rename individual patterns.&nbsp;</li>\n</ul>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2023/10/05/core-editor-improvement-ensuring-excellence-in-the-writing-experience/\">October’s Core Editor Improvement</a> post dives into all the writing enhancements expected in the latest WordPress 6.4 release.</p>\n\n\n\n<a class=\"wp-block-jetpack-podcast-player jetpack-podcast-player__direct-link\" href=\"https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/\">https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/</a>\n\n\n\n<h2 class=\"wp-block-heading\">Team updates</h2>\n\n\n\n<ul>\n<li>The journey to update WordPress.org continues with the launch of a <a href=\"https://wordpress.org/news/2023/10/a-new-wordpress-showcase/\">new Showcase design</a>. The redesigned Showcase inspires creativity, highlights the platform’s flexibility, and demonstrates what’s possible with WordPress.</li>\n\n\n\n<li>The Performance Team held a <a href=\"https://make.wordpress.org/core/2023/09/18/hallway-hangout-performance-improvements-for-wordpress-6-4/\">Hallway Hangout</a> to discuss WordPress 6.3 performance impact in the field, diving into WordPress 6.4 performance improvements and looking ahead at what can be learned for WordPress 6.5.</li>\n\n\n\n<li>The Documentation Team created a new <a href=\"https://github.com/WordPress/documentation-end-user\">GitHub repo</a> for end-user documentation and its translations to all locales. You can find out more about this <a href=\"https://make.wordpress.org/project/2023/09/06/documentation-translation-localization/\">here</a>.</li>\n\n\n\n<li>Openverse has been awarded the <a href=\"https://wordpress.org/news/2023/09/openverse-wins-the-2023-oeg-open-infrastructure-award/\">2023 Open Education Award for Excellence in the Open Infrastructure category</a>. Congratulations!</li>\n\n\n\n<li><a href=\"https://make.wordpress.org/core/2023/09/07/evolving-the-fse-outreach-program/\">Learn more about the next chapter for the FSE (Full Site Editing) Outreach Program</a>, which looks to transition into a focused space for solving issues, creating resources, and facilitating conversations around adopting Phase 2 of Gutenberg.</li>\n\n\n\n<li>The Accessibility team is <a href=\"https://make.wordpress.org/accessibility/2023/09/13/accessibility-office-hours/\">holding weekly office hours</a> to discuss accessibility principles and best practices for the project.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Requests for feedback &amp; testing</h2>\n\n\n\n<ul>\n<li><a href=\"https://make.wordpress.org/updates/2023/11/03/mobile-team-update-november-3rd-2/\">Version 23.6</a> of the WordPress mobile app for iOS and Android is ready for testing.</li>\n</ul>\n\n\n\n<a class=\"wp-block-jetpack-podcast-player jetpack-podcast-player__direct-link\" href=\"https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/\">https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/</a>\n\n\n\n<h2 class=\"wp-block-heading\">WordPress events updates</h2>\n\n\n\n<ul>\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1f9-1f1fc.png\" alt=\"🇹🇼\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> WordCamp Asia has <a href=\"https://asia.wordcamp.org/2024/call-for-sponsors-extended-to-november-30th/\">extended their call for sponsors</a> for their conference slated to take place in Taipei, Taiwan, March 7-9, 2024.&nbsp;</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1e8-1f1f7.png\" alt=\"🇨🇷\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> There will be a <a href=\"https://www.eventbrite.com/e/wordpress-wpdiversity-speaker-workshop-for-women-voices-in-latin-america-tickets-621207738067?aff=oddtdtcreator\">WordPress #WPDiversity Speaker Workshop for Women Voices in Latin America</a> in San Jose, Costa Rica on November 11, 2023.</li>\n\n\n\n<li>Don’t miss these upcoming WordCamps:\n<ul>\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1ea-1f1f8.png\" alt=\"🇪🇸\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://valencia.wordcamp.org/2023/\">WordCamp Valencia 2023</a>, Spain on November 10-11, 2023.</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1ee-1f1f9.png\" alt=\"🇮🇹\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://verona.wordcamp.org/2023/\">WordCamp Verona 2023</a>, Italy on November 17-18, 2023.</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1ed-1f1f0.png\" alt=\"🇭🇰\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://hongkong.wordcamp.org/2023/\">WordCamp Hong Kong 2023</a>, China on November 18, 2023.</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1f5-1f1f0.png\" alt=\"🇵🇰\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://islamabad.wordcamp.org/2023/\">WordCamp Islamabad 2023</a>, Pakistan on November 25-26, 2023.</li>\n</ul>\n</li>\n</ul>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" />\n\n\n\n<p><em>Have a story we should include in the next issue of The Month in WordPress? Fill out </em><a href=\"https://make.wordpress.org/community/month-in-wordpress-submissions/\"><em>this quick form</em></a><em> to let us know.</em></p>\n\n\n\n<p><em>Thank you to </em><a href=\"https://profiles.wordpress.org/bernard0omnisend/\"><em>Bernard Meyer</em></a><em> and <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a> for their contributions to this edition of The Month in WordPress.</em></p>\n\n\n\n<div class=\"wp-block-group is-layout-constrained wp-block-group-is-layout-constrained\">\n<h2 class=\"wp-block-heading\">Subscribe to WordPress News</h2>\n\n\n\n<p>Join other subscribers and receive WordPress news directly in your inbox.</p>\n\n\n<div class=\"wp-block-jetpack-subscriptions__supports-newline is-style-split wp-block-jetpack-subscriptions\">\n		<div>\n			<div>\n				<div>\n					<p >\n						<a href=\"https://wordpress.org/news/?post_type=post&#038;p=16365\" style=\"text-decoration: none; font-size: 16px;padding: 15px 23px 15px 23px;margin: 0px; margin-left: 10px;border-radius: 0px;border-width: 1px; background-color: #113AF5; color: #FFFFFF;\">Subscribe</a>\n					</p>\n				</div>\n			</div>\n		</div>\n	</div></div>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16365\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress 6.4.1 Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2023/11/wordpress-6-4-1-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 09 Nov 2023 01:45:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16332\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:375:\"WordPress 6.4.1 is now available! This minor release features&#160;four bug fixes. You can review a summary of the maintenance updates in this release by reading the&#160;Release Candidate announcement or view the list of tickets on Trac. WordPress 6.4.1 is a short-cycle release. If you have sites that support automatic background updates, the update process will [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Josepha\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5986:\"\n<h2 class=\"wp-block-heading\">WordPress 6.4.1 is now available!</h2>\n\n\n\n<p>This minor release features&nbsp;<a href=\"https://core.trac.wordpress.org/query?status=accepted&amp;status=assigned&amp;status=closed&amp;status=new&amp;status=reopened&amp;status=reviewing&amp;id=!59852&amp;milestone=6.4.1&amp;col=id&amp;col=summary&amp;col=status&amp;col=milestone&amp;col=owner&amp;col=type&amp;col=priority&amp;order=priority\">four bug fixes</a>. You can review a summary of the maintenance updates in this release by reading the&nbsp;<a href=\"https://make.wordpress.org/core/2023/11/08/wordpress-6-4-1-rc1-is-now-available/\">Release Candidate announcement</a> or <a href=\"https://core.trac.wordpress.org/query?status=accepted&amp;status=assigned&amp;status=closed&amp;status=new&amp;status=reopened&amp;status=reviewing&amp;milestone=6.4.1&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=priority&amp;col=milestone&amp;order=priority\">view the list of tickets on Trac</a>.</p>\n\n\n\n<p>WordPress 6.4.1 is a short-cycle release. If you have sites that support automatic background updates, the update process will begin automatically. If your site does not update automatically, you can also update from your Dashboard.</p>\n\n\n\n<p>You can&nbsp;download <a href=\"https://wordpress.org/wordpress-6.4.1.zip\">WordPress 6.4.1 from WordPress.org</a>, or visit your WordPress Dashboard, click “Updates”, and then click “Update Now”.</p>\n\n\n\n<p>For more information on this release, <a href=\"https://wordpress.org/documentation/wordpress-version/version-6-4-1/\">please&nbsp;visit the HelpHub site</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Thank you to these WordPress contributors</h2>\n\n\n\n<p>This release was led by&nbsp;<a href=\"https://profiles.wordpress.org/jorbin/\">Aaron Jorbin</a> and <a href=\"https://profiles.wordpress.org/hellofromtonya/\">Tonya Mork</a>. Thank you to everyone who tested the RC and 6.4.1, and raised reports.</p>\n\n\n\n<p>WordPress 6.4.1 would not have been possible without the contributions of the following people. Their quick and concerted coordination to deliver maintenance fixes into a stable release is a testament to the power and capability of the WordPress community.</p>\n\n\n\n<p class=\"has-text-align-left\"><a href=\"https://profiles.wordpress.org/afragen/\">@afragen</a> <a href=\"https://profiles.wordpress.org/clorith/\">@clorith</a> <a href=\"https://profiles.wordpress.org/desrosj/\">@desrosj</a> <a href=\"https://profiles.wordpress.org/pbiron/\">@pbiron</a> <a href=\"https://profiles.wordpress.org/schlessera/\">@schlessera</a> <a href=\"https://profiles.wordpress.org/azaozz/\">@azaozz</a> <a href=\"https://profiles.wordpress.org/davidbaumwald/\">@davidbaumwald</a> <a href=\"https://profiles.wordpress.org/tomsommer/\">@tomsommer</a> <a href=\"https://profiles.wordpress.org/nexflaszlo/\">@nexflaszlo</a> <a href=\"https://profiles.wordpress.org/howdy_mcgee/\">@howdy_mcgee</a> <a href=\"https://profiles.wordpress.org/baxbridge/\">@baxbridge</a> <a href=\"https://profiles.wordpress.org/earnjam/\">@earnjam</a> <a href=\"https://profiles.wordpress.org/timothyblynjacobs/\">@timothyblynjacobs</a> <a href=\"https://profiles.wordpress.org/johnbillion/\">@johnbillion</a> <a href=\"https://profiles.wordpress.org/flixos90/\">@flixos90</a> <a href=\"https://profiles.wordpress.org/joedolson/\">@joedolson</a> <a href=\"https://profiles.wordpress.org/jeffpaul/\">@jeffpaul</a> <a href=\"https://profiles.wordpress.org/zunaid321/\">@zunaid321</a> <a href=\"https://profiles.wordpress.org/courane01/\">@courane01</a> <a href=\"https://profiles.wordpress.org/audrasjb/\">@audrasjb</a> <a href=\"https://profiles.wordpress.org/tacoverdo/\">@tacoverdo</a> <a href=\"https://profiles.wordpress.org/ironprogrammer/\">@ironprogrammer</a> <a href=\"https://profiles.wordpress.org/webcommsat/\">@webcommsat</a> <a href=\"https://profiles.wordpress.org/otto42/\">@otto42</a> <a href=\"https://profiles.wordpress.org/barry/\">@barry</a> <a href=\"https://profiles.wordpress.org/chanthaboune/\">@chanthaboune</a> <a href=\"https://profiles.wordpress.org/rajinsharwar/\">@rajinsharwar</a> <a href=\"https://profiles.wordpress.org/aaroncampbell/\">@aaroncampbell</a> <a href=\"https://profiles.wordpress.org/peterwilsoncc/\">@peterwilsoncc</a> <a href=\"https://profiles.wordpress.org/anandau14/\">@anandau14</a> <a href=\"https://profiles.wordpress.org/iandunn/\">@iandunn</a> <a href=\"https://profiles.wordpress.org/matthewjho/\">@matthewjho</a> <a href=\"https://profiles.wordpress.org/coffee2code/\">@coffee2code</a> <a href=\"https://profiles.wordpress.org/boogah/\">@boogah</a> <a href=\"https://profiles.wordpress.org/jason_the_adams/\">@jason_the_adams</a> <a href=\"https://profiles.wordpress.org/joemcgill/\">@joemcgill</a> <a href=\"https://profiles.wordpress.org/johnjamesjacoby/\">@johnjamesjacoby</a> <a href=\"https://profiles.wordpress.org/jrf/\">@jrf</a> <a href=\"https://profiles.wordpress.org/renehermi/\">@renehermi</a> <a href=\"https://profiles.wordpress.org/dlh/\">@dlh</a> <a href=\"https://profiles.wordpress.org/mukesh27/\">@mukesh27</a> <a href=\"https://profiles.wordpress.org/sumitbagthariya16/\">@sumitbagthariya16</a> <a href=\"https://profiles.wordpress.org/starbuck/\">@starbuck</a> <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">@sergeybiryukov</a> <a href=\"https://profiles.wordpress.org/ravipatel/\">@ravipatel</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">How to contribute</h2>\n\n\n\n<p>To get involved in WordPress core development, head over to Trac,&nbsp;<a href=\"https://core.trac.wordpress.org/report/6\">pick a ticket</a>, and join the conversation in the&nbsp;<a href=\"https://wordpress.slack.com/archives/C02RQBWTW\">#core</a>&nbsp;channel. Need help? Check out the&nbsp;<a href=\"https://make.wordpress.org/core/handbook/\">Core Contributor Handbook</a>.</p>\n\n\n\n<p class=\"has-text-align-right\"><em>Thanks to&nbsp;<a href=\"https://profiles.wordpress.org/jeffpaul/\">@jeffpaul</a>&nbsp;and <a href=\"https://profiles.wordpress.org/webcommsat/\">@webcommsat</a> for proofreading.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16332\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:66:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"WordPress 6.4 “Shirley”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://wordpress.org/news/2023/11/shirley/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 07 Nov 2023 19:59:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:8:\"releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16299\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:194:\"WordPress 6.4 \"Shirley\" is here! Named in honor of the iconic jazz singer and pianist Shirley Horn, this release was made possible by over 600 contributors. Download WordPress 6.4 Shirley today.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Josepha\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:74789:\"\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&#038;ssl=1\" alt=\"Record cover with an image of Shirley Horn, a record sliding down the right side, and the words Shirley WordPress 6.4.\" class=\"wp-image-16319\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Say hello to <a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4</a> “Shirley,” named after the iconic jazz artist <a href=\"https://wikipedia.org/wiki/Shirley_Horn\">Shirley Horn</a>. Her distinctive voice and extraordinary connection to the piano established her as one of the leading jazz musicians of her generation. Horn’s journey from the Washington D.C. jazz scene to the international stage is a testament to her dedication and perseverance. Her influence reached far beyond the confines of traditional jazz, breaking boundaries and inspiring audiences worldwide.</p>\n\n\n\n<p>Enjoy the easy pace of <a href=\"https://www.youtube.com/channel/UCS3pUiY9OmzB6bPta3-4ArQ/playlists\">Shirley Horn’s music</a> as you take in all that 6.4 offers.</p>\n\n\n\n<p>This latest version of WordPress introduces a new, versatile default theme and a suite of upgrades to empower every step of your creative journey. Craft your content seamlessly with further writing improvements. Explore more ways to bring your vision to life and streamline site editing with enhanced tools. Whether you&#8217;re new to WordPress or an experienced creator, “Shirley” has something for you. Discover the unmatched flexibility of building with blocks and let your ideas take flight.</p>\n\n\n\n<blockquote class=\"wp-block-quote has-extra-large-font-size\">\n<p>Many of the features and enhancements in WordPress 6.4 fall in the “small but mighty” category. Along with the adaptable beauty of the Twenty Twenty-Four theme, these updates help content creators and site developers alike save time and effort while delivering the high value, low hassle WordPress experience the world has grown to expect.</p>\n<cite>Josepha Haden Chomphosy, Executive Director of WordPress</cite></blockquote>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\" href=\"https://wordpress.org/download/\">Download WordPress 6.4 today</a></div>\n</div>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">What’s inside 6.4</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Meet Twenty Twenty-Four</h3>\n\n\n\n<p>Experience site editing at its finest with <a href=\"https://make.wordpress.org/core/2023/08/24/introducing-twenty-twenty-four/\">Twenty Twenty-Four</a>. This new multi-faceted default theme has been thoughtfully crafted with three distinct use cases in mind, from writers and artists to entrepreneurs. Save time and effort with its extensive collection of <a href=\"https://2024.wordpress.net/index.php/patterns/\">over 35 templates and patterns</a>—and unlock a world of creative possibilities with a few tweaks. Twenty Twenty-Four’s remarkable flexibility ensures an ideal fit for almost any type of site. <a href=\"https://2024.wordpress.net/\">Check it out in this demo</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=1024%2C666&#038;ssl=1\" alt=\"Cropped screenshots of the Twenty Twenty-Four theme, showing its diverse use cases for photographers, bloggers, and small businesses.\" class=\"wp-image-16274\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Let your writing flow</h3>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2023/10/05/core-editor-improvement-ensuring-excellence-in-the-writing-experience/\">New enhancements</a> ensure your content creation journey is smooth. Find new keyboard shortcuts in List View, smarter list merging, and enhanced control over link settings. A cohesive toolbar experience for the Navigation, List, and Quote blocks lets you work efficiently with the tooling options you need.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of a Quote block showing its improved toolbar and the text &quot;Études has saved us thousands of hours of work and has unlock insights we never thought possible.&quot;\" class=\"wp-image-16275\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">The Command Palette just got better</h3>\n\n\n\n<p>First introduced in WordPress 6.3, the Command Palette is a powerful tool to quickly find what you need, perform tasks efficiently, and speed up your building workflow. Enjoy a <a href=\"https://make.wordpress.org/core/2023/09/12/core-editor-improvement-commanding-the-command-palette/\">refreshed design and new commands</a> to perform block-specific actions in this release.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the refreshed UI of the Command Palette. It displays a search bar with the words &quot;Search for commands&quot; and a variety of shortcuts listed below, including &quot;Add new page,&quot; &quot;Preview in a new tab,&quot; and &quot;Patterns.&quot;\" class=\"wp-image-16276\" style=\"width:680px;height:auto\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Categorize and filter patterns</h3>\n\n\n\n<p><a href=\"https://wordpress.org/patterns/\">Patterns</a> are an excellent way to leverage the potential of blocks and simplify your site-building process. WordPress 6.4 allows you to organize them with custom categories. Plus, new advanced filtering in the Patterns section of the inserter makes finding all your patterns more intuitive.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the Site Editor\'s patterns view which shows a list of patterns with custom categories, such as &quot;About,&quot; &quot;Banners,&quot; and &quot;Call to Action,&quot; patterns.\" class=\"wp-image-16278\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Get creative with more design tools</h3>\n\n\n\n<p>Build beautiful and functional layouts with an expanded set of design tools. Play with background images in Group blocks for unique designs and maintain image dimensions consistent with placeholder aspect ratios. Do you want to add buttons to your Navigation block? Now you can do it conveniently without a line of code.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=1024%2C666&#038;ssl=1\" alt=\"Decorative image with text &quot;Background images in Group blocks.&quot;\" class=\"wp-image-16279\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Make your images stand out</h3>\n\n\n\n<p>Enable lightbox functionality to let your site visitors enjoy full-screen, interactive images on click. Apply it globally or to specific images to customize the viewing experience.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=1024%2C666&#038;ssl=1\" alt=\"Decorative photo of a triangular building structure with a &quot;click to expand&quot; icon on the right top corner.\" class=\"wp-image-16280\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Rename Group blocks</h3>\n\n\n\n<p>Set custom names for Group blocks to organize and distinguish areas of your content easily. These names will be visible in List View.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the List View tool. It shows a Group block renamed as &quot;Hero Area&quot; with inner Group blocks also with custom names, such as &quot;Content,&quot; &quot;Images,&quot; and &quot;Call to action.&quot;\" class=\"wp-image-16281\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Preview images in List View</h3>\n\n\n\n<p>New previews for Gallery and Image blocks in List View let you visualize and locate where images on your content are at a glance.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the List View tool, showing the new image previews for the Image and Gallery blocks.\" class=\"wp-image-16282\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Share patterns across sites</h3>\n\n\n\n<p>Need to use your custom patterns on another site? Import and export them as JSON files from the Site Editor&#8217;s patterns view.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot showing the &quot;Import pattern from JSON files&quot; option from the Site Editor\'s patterns view.\" class=\"wp-image-16303\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Introducing Block Hooks</h3>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2023/10/15/introducing-block-hooks-for-dynamic-blocks/\">Block Hooks</a> enables developers to automatically insert dynamic blocks at specific content locations, enriching the extensibility of block themes through plugins. While considered a developer tool, this feature is geared to respect your preferences and gives you complete control to add, dismiss, and customize auto-inserted blocks to your needs.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=1024%2C666&#038;ssl=1\" alt=\"Cropped screenshot showing a mini shopping cart (in a red dotted circle) inserted into a navigation menu by Block Hooks.\" class=\"wp-image-16284\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Performance wins</h3>\n\n\n\n<p>This release includes more than 100 performance-related updates for a faster and more efficient experience. Notable enhancements focus on <a href=\"https://make.wordpress.org/core/2023/10/17/improvements-to-template-loading-in-wordpress-6-4/\">template loading performance</a> for themes (including Twenty Twenty-Four), <a href=\"https://make.wordpress.org/core/2023/10/17/script-loading-changes-in-wordpress-6-4/\">usage of the script loading strategies</a> “defer” and “async” in core, blocks, and themes, and <a href=\"https://make.wordpress.org/core/2023/10/17/new-option-functions-in-6-4/\">optimization of autoloaded options</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Accessibility highlights</h3>\n\n\n\n<p>Every release is committed to making WordPress accessible to everyone. WordPress 6.4 brings several List View improvements and aria-label support for the Navigation block, among other highlights. The admin user interface includes enhancements to button placements, &#8220;Add New&#8221; menu items context, and Site Health spoken messages. <a href=\"https://make.wordpress.org/core/2023/11/03/wordpress-6-4-accessibility-improvements/\">Learn more about all the updates</a> aimed at improving accessibility.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Other notes of interest</h3>\n\n\n\n<ul>\n<li>PHP 8.1 or 8.2 are recommended for use with WordPress 6.4. Find in-depth details on PHP support <a href=\"https://wordpress.org/news/2023/10/wordpress-6-4s-php-compatibility/\">in this post</a>.</li>\n\n\n\n<li>WordPress 6.4 <a href=\"https://make.wordpress.org/core/2023/10/16/changes-to-attachment-pages/\">disables attachment pages</a> for new installations.</li>\n</ul>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Learn more about WordPress 6.4</h2>\n\n\n\n<p>Check out the new <a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4 page</a> to learn more about the numerous enhancements and features of this release.</p>\n\n\n\n<p>Explore <a href=\"https://learn.wordpress.org/\">Learn WordPress</a> for quick how-to videos, <a href=\"https://learn.wordpress.org/social-learning/\">online workshops</a>, and other free resources to level up your WordPress knowledge and skills.</p>\n\n\n\n<p>If you are looking for detailed technical notes on new changes, the <a href=\"https://make.wordpress.org/core/2023/10/23/wordpress-6-4-field-guide/\">WordPress 6.4 Field Guide</a> is for you. Don&#8217;t forget to subscribe to the <a href=\"https://developer.wordpress.org/news/\">Developer Blog</a> to stay on top of the latest development updates, tutorials, and more.</p>\n\n\n\n<p>For more information on installation, fixes, and file changes, visit the <a href=\"https://wordpress.org/documentation/wordpress-version/version-6-4/\">6.4 release notes</a>.</p>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">The 6.4 release squad</h2>\n\n\n\n<p>​​The WordPress 6.4 release comes to you from an <strong>underrepresented gender release squad</strong> to welcome and empower diverse voices in the WordPress open source project.</p>\n\n\n\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<blockquote class=\"wp-block-quote\">\n<p class=\"has-extra-large-font-size\">Being part of the 6.4 release coordination team has allowed me to closely observe the intricate release process, where every detail, no matter how minor, is meticulously addressed—taking into account various factors like performance and backward compatibility. There’s still much to learn, but I feel fortunate to have had the chance to contribute to WordPress 6.4.</p>\n<cite>Akshaya Rane, 6.4 release coordinator team member</cite></blockquote>\n\n\n\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p>Over several weeks, the 6.4 release squad kept the release on track and moving forward by leading collective work, connecting ideas, and removing roadblocks.</p>\n\n\n\n<ul>\n<li>Release Lead: <a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden Chomphosy</a></li>\n\n\n\n<li>Release Coordinators: <a href=\"https://profiles.wordpress.org/cbringmann/\">Chloé Bringmann</a>, <a href=\"https://profiles.wordpress.org/metalandcoffee/\">Ebonie Butler</a>, <a href=\"https://profiles.wordpress.org/akshayar/\">Akshaya Rane</a>, <a href=\"https://profiles.wordpress.org/francina/\">Francesca Marano</a>. Cohort: <a href=\"https://profiles.wordpress.org/thewebprincess/\">Dee Teal</a>, <a href=\"https://profiles.wordpress.org/jaimieolmstead/\">Jaimie Olmstead</a>, <a href=\"https://profiles.wordpress.org/jyolsna/\">Jyolsna J E</a>, <a href=\"https://profiles.wordpress.org/marybaum/\">Mary Baum</a></li>\n\n\n\n<li>Core Tech Leads: <a href=\"https://profiles.wordpress.org/mikeschroder/\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/hellofromtonya/\">Tonya Mork</a>. Cohort: <a href=\"https://profiles.wordpress.org/pypwalters/\">Stephanie Walters</a></li>\n\n\n\n<li>Editor Tech Leads:&nbsp; <a href=\"https://profiles.wordpress.org/mikachan/\">Sarah Norris</a>, <a href=\"https://profiles.wordpress.org/siobhyb/\">Siobhan Bamber</a>, <a href=\"https://profiles.wordpress.org/karmatosed/\">Tammie Lister</a>. Cohort: <a href=\"https://profiles.wordpress.org/68kheart/\">Devan Ferguson</a>, <a href=\"https://profiles.wordpress.org/battelfred/\">Frédérique Battel</a>, <a href=\"https://profiles.wordpress.org/jessicagoddard/\">Jessica Goddard</a>, <a href=\"https://profiles.wordpress.org/1happyplace/\">Katie Ayres</a>, <a href=\"https://profiles.wordpress.org/martatorre/\">Marta Torre</a>, <a href=\"https://profiles.wordpress.org/ngreennc/\">Nyasha Green</a>, <a href=\"https://profiles.wordpress.org/poojabhimani/\">Pooja Bhimani</a></li>\n\n\n\n<li>Core Triage Leads: <a href=\"https://profiles.wordpress.org/nicolefurlan/\">Nicole Furlan</a>, <a href=\"https://profiles.wordpress.org/oglekler/\">Olga Gleckler</a></li>\n\n\n\n<li>Editor Triage Leads: <a href=\"https://profiles.wordpress.org/annezazu/\">Anne McCarthy</a>, <a href=\"https://profiles.wordpress.org/bph/\">Birgit Pauli-Haack</a>. Cohort: <a href=\"https://profiles.wordpress.org/emilyatmobtown/\">Emily Leffler Schulman</a></li>\n\n\n\n<li>Documentation Leads: <a href=\"https://profiles.wordpress.org/webcommsat/\">Abha Thakor</a>, <a href=\"https://profiles.wordpress.org/femkreations/\">Femy Praseeth</a>, <a href=\"https://profiles.wordpress.org/611shabnam/\">Mushrit Shabnam</a>. Cohort: <a href=\"https://profiles.wordpress.org/itsjustdj/\">D.J. Billings</a>, <a href=\"https://wordpress.org/support/users/codente/\">Jamie VanRaalte</a>, <a href=\"https://profiles.wordpress.org/newyorkerlaura/\">Laura Byrne</a>, <a href=\"https://profiles.wordpress.org/baxbridge/\">Tiffany Bridge</a>, <a href=\"https://profiles.wordpress.org/planningwrite/\">Winstina Hughes</a></li>\n\n\n\n<li>Marketing and Communications Leads: <a href=\"https://profiles.wordpress.org/meher/\">Meher Bala</a>, <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a>, <a href=\"https://profiles.wordpress.org/sereedmedia/\">Sé Reed</a>. Cohort: <a href=\"https://profiles.wordpress.org/meaganhanes/\">Meagan Hanes</a>, <a href=\"https://profiles.wordpress.org/michelleames/\">Michelle Frechette</a></li>\n\n\n\n<li>Test Lead: <a href=\"https://profiles.wordpress.org/webtechpooja/\">Pooja Derashri</a>. Cohort: <a href=\"https://profiles.wordpress.org/annebovelett/\">Anne Bovelett</a>, <a href=\"https://profiles.wordpress.org/coachbirgit/\">Birgit Olzem</a></li>\n\n\n\n<li>Design Leads: <a href=\"https://profiles.wordpress.org/elmastudio/\">Ellen Bauer</a>, <a href=\"https://profiles.wordpress.org/estelaris/\">Estela Rueda</a>. Cohort: <a href=\"https://profiles.wordpress.org/allisonplus/\">Allison Tarr</a>, <a href=\"https://profiles.wordpress.org/acirujano/\">Ana Cirujano</a>, <a href=\"https://profiles.wordpress.org/cathibosco1/\">Cathi Bosco</a>, <a href=\"https://profiles.wordpress.org/nudge/\">Sonia Gaballa</a>, <a href=\"https://profiles.wordpress.org/ohia/\">Ohia</a></li>\n\n\n\n<li>Performance Lead: <a href=\"https://profiles.wordpress.org/clarkeemily/\">Emily Clarke</a>. Cohort: <a href=\"https://profiles.wordpress.org/linsoftware/\">Linnea Huxford</a></li>\n\n\n\n<li>Training Leads: <a href=\"https://profiles.wordpress.org/courtneypk/\">Courtney P.K.</a>, <a href=\"https://profiles.wordpress.org/courane01/\">Courtney Roberston</a></li>\n\n\n\n<li>Default Theme Leads: <a href=\"https://profiles.wordpress.org/luminuu/\">Jessica Lyschik</a>, <a href=\"https://profiles.wordpress.org/onemaggie/\">Maggie Cabrera</a></li>\n</ul>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Thank you, contributors</h2>\n\n\n\n<p>WordPress believes in democratizing publishing and the freedoms that come with open source. Supporting this idea is a global and diverse community of people working together to strengthen the software.</p>\n\n\n\n<p>WordPress 6.4 reflects the countless efforts and passion of <strong>more than 600 contributors in at least 56 countries</strong>. This release also welcomed over 170 first-time contributors!</p>\n\n\n\n<p>Their collaboration delivered more than 1150 enhancements and fixes, ensuring a stable release for all—a testament to the power and capability of the WordPress open source community.</p>\n\n\n\n<p class=\"is-style-wporg-props-long alignfull\"><a href=\"https://profiles.wordpress.org/6adminit/\">6adminit</a> · <a href=\"https://profiles.wordpress.org/aaroncampbell/\">Aaron D. Campbell</a> · <a href=\"https://profiles.wordpress.org/jorbin/\">Aaron Jorbin</a> · <a href=\"https://profiles.wordpress.org/aaronrobertshaw/\">Aaron Robertshaw</a> · <a href=\"https://profiles.wordpress.org/aayusha/\">aayusha</a> · <a href=\"https://profiles.wordpress.org/webcommsat/\">Abha Thakor</a> · <a href=\"https://profiles.wordpress.org/omarabid/\">Abid Omar</a> · <a href=\"https://profiles.wordpress.org/adamsilverstein/\">Adam Silverstein</a> · <a href=\"https://profiles.wordpress.org/adhun/\">Adhun Anand</a> · <a href=\"https://profiles.wordpress.org/ajmcfadyen/\">admcfajn</a> · <a href=\"https://profiles.wordpress.org/adrianduffell/\">adrianduffell</a> · <a href=\"https://profiles.wordpress.org/aegkr/\">aegkr</a> · <a href=\"https://profiles.wordpress.org/ahardyjpl/\">ahardyjpl</a> · <a href=\"https://profiles.wordpress.org/ahmedgeek/\">Ahmed Hussein</a> · <a href=\"https://profiles.wordpress.org/chaion07/\">Ahmed Kabir Chaion</a> · <a href=\"https://profiles.wordpress.org/ajakaroth/\">ajakaroth</a> · <a href=\"https://profiles.wordpress.org/wildworks/\">Aki Hamano</a> · <a href=\"https://profiles.wordpress.org/akihiroharai/\">Akihiro Harai</a> · <a href=\"https://profiles.wordpress.org/atachibana/\">Akira Tachibana</a> · <a href=\"https://profiles.wordpress.org/akshayar/\">Akshaya Rane</a> · <a href=\"https://profiles.wordpress.org/alaminfirdows/\">Al-Amin Firdows</a> · <a href=\"https://profiles.wordpress.org/schlessera/\">Alain Schlesser</a> · <a href=\"https://profiles.wordpress.org/aljullu/\">Albert Juh&#233; Lluveras</a> · <a href=\"https://profiles.wordpress.org/xknown/\">Alex Concha</a> · <a href=\"https://profiles.wordpress.org/alexkingorg/\">Alex King</a> · <a href=\"https://profiles.wordpress.org/ajlende/\">Alex Lende</a> · <a href=\"https://profiles.wordpress.org/alexstine/\">Alex Stine</a> · <a href=\"https://profiles.wordpress.org/alexandrebuffet/\">Alexandre Buffet</a> · <a href=\"https://profiles.wordpress.org/alishabajracharya27/\">Alisha Bajracharya</a> · <a href=\"https://profiles.wordpress.org/allisonplus/\">Allison Tarr</a> · <a href=\"https://profiles.wordpress.org/alvitazwar052/\">Alvi Tazwar</a> · <a href=\"https://profiles.wordpress.org/amedv/\">amedv</a> · <a href=\"https://profiles.wordpress.org/acirujano/\">Ana Cirujano</a> · <a href=\"https://profiles.wordpress.org/anandau14/\">Anand Upadhyay</a> · <a href=\"https://profiles.wordpress.org/anlino/\">Anders Nor&#233;n</a> · <a href=\"https://profiles.wordpress.org/oandregal/\">Andr&#233;</a> · <a href=\"https://profiles.wordpress.org/afercia/\">Andrea Fercia</a> · <a href=\"https://profiles.wordpress.org/andraganescu/\">Andrei Draganescu</a> · <a href=\"https://profiles.wordpress.org/andrewhayward/\">Andrew Hayward</a> · <a href=\"https://profiles.wordpress.org/l1nuxjedi/\">Andrew Hutchings</a> · <a href=\"https://profiles.wordpress.org/nacin/\">Andrew Nacin</a> · <a href=\"https://profiles.wordpress.org/azaozz/\">Andrew Ozz</a> · <a href=\"https://profiles.wordpress.org/andrewserong/\">Andrew Serong</a> · <a href=\"https://profiles.wordpress.org/eatingrules/\">Andrew Wilder</a> · <a href=\"https://profiles.wordpress.org/afragen/\">Andy Fragen</a> · <a href=\"https://profiles.wordpress.org/apeatling/\">Andy Peatling</a> · <a href=\"https://profiles.wordpress.org/wpgurudev/\">Ankit Gade</a> · <a href=\"https://profiles.wordpress.org/ankit-k-gupta/\">Ankit K Gupta</a> · <a href=\"https://profiles.wordpress.org/ankitmaru/\">Ankit Panchal</a> · <a href=\"https://profiles.wordpress.org/annashopina/\">Anna</a> · <a href=\"https://profiles.wordpress.org/askdesign/\">Anne Katzeff</a> · <a href=\"https://profiles.wordpress.org/annezazu/\">Anne McCarthy</a> · <a href=\"https://profiles.wordpress.org/annebovelett/\">Anne-Mieke Bovelett</a> · <a href=\"https://profiles.wordpress.org/anphira/\">anphira</a> · <a href=\"https://profiles.wordpress.org/antpb/\">Anthony Burchell</a> · <a href=\"https://profiles.wordpress.org/aplauche/\">Anton Plauche</a> · <a href=\"https://profiles.wordpress.org/atimmer/\">Anton Timmermans</a> · <a href=\"https://profiles.wordpress.org/antonvlasenko/\">Anton Vlasenko</a> · <a href=\"https://profiles.wordpress.org/anveshika/\">Anveshika Srivastava</a> · <a href=\"https://profiles.wordpress.org/archon810/\">archon810</a> · <a href=\"https://profiles.wordpress.org/arena/\">arena</a> · <a href=\"https://profiles.wordpress.org/aristath/\">Ari Stathopoulos</a> · <a href=\"https://profiles.wordpress.org/armondal/\">Arnab Mondal</a> · <a href=\"https://profiles.wordpress.org/artemiosans/\">Artemio Morales</a> · <a href=\"https://profiles.wordpress.org/arthur791004/\">Arthur Chu</a> · <a href=\"https://profiles.wordpress.org/asafm7/\">asafm7</a> · <a href=\"https://profiles.wordpress.org/aslamdoctor/\">Aslam Doctor</a> · <a href=\"https://profiles.wordpress.org/aurooba/\">Aurooba Ahmed</a> · <a href=\"https://profiles.wordpress.org/austinginder/\">Austin Ginder</a> · <a href=\"https://profiles.wordpress.org/ayeshrajans/\">Ayesh Karunaratne</a> · <a href=\"https://profiles.wordpress.org/azharckra/\">azharckra</a> · <a href=\"https://profiles.wordpress.org/balub/\">Balu B</a> · <a href=\"https://profiles.wordpress.org/bangank36/\">bangank36</a> · <a href=\"https://profiles.wordpress.org/barbmiller/\">barbmiller</a> · <a href=\"https://profiles.wordpress.org/barry/\">Barry</a> · <a href=\"https://profiles.wordpress.org/bartkalisz/\">Bart</a> · <a href=\"https://profiles.wordpress.org/basiliskan/\">Basilis Kanonidis</a> · <a href=\"https://profiles.wordpress.org/beafialho/\">Beatriz Fialho</a> · <a href=\"https://profiles.wordpress.org/behoney/\">behoney</a> · <a href=\"https://profiles.wordpress.org/benharri/\">ben</a> · <a href=\"https://profiles.wordpress.org/scruffian/\">Ben Dwyer</a> · <a href=\"https://profiles.wordpress.org/bengreeley/\">Ben Greeley</a> · <a href=\"https://profiles.wordpress.org/ubernaut/\">Ben Hansen</a> · <a href=\"https://profiles.wordpress.org/bfintal/\">Benjamin Intal</a> · <a href=\"https://profiles.wordpress.org/benjamin_zekavica/\">Benjamin Zekavica</a> · <a href=\"https://profiles.wordpress.org/benjaminknox/\">benjaminknox</a> · <a href=\"https://profiles.wordpress.org/benoitchantre/\">Benoit Chantre</a> · <a href=\"https://profiles.wordpress.org/bernhard reiter/\">Bernhard Reiter</a> · <a href=\"https://profiles.wordpress.org/bernhard-reiter/\">Bernie Reiter</a> · <a href=\"https://profiles.wordpress.org/bhrugesh12/\">Bhrugesh Bavishi</a> · <a href=\"https://profiles.wordpress.org/bijayyadav/\">Bijay Yadav</a> · <a href=\"https://profiles.wordpress.org/binsaifullah/\">Binsaifullah</a> · <a href=\"https://profiles.wordpress.org/bplv/\">Biplav</a> · <a href=\"https://profiles.wordpress.org/dhamibirendra/\">Birendra Dhami</a> · <a href=\"https://profiles.wordpress.org/coachbirgit/\">Birgit Olzem</a> · <a href=\"https://profiles.wordpress.org/bph/\">Birgit Pauli-Haack</a> · <a href=\"https://profiles.wordpress.org/bradley2083/\">Block Themes Pro</a> · <a href=\"https://profiles.wordpress.org/bmalsht/\">bmalsht</a> · <a href=\"https://profiles.wordpress.org/gitlost/\">bonger</a> · <a href=\"https://profiles.wordpress.org/bookwyrm/\">bookwyrm</a> · <a href=\"https://profiles.wordpress.org/boonebgorges/\">Boone Gorges</a> · <a href=\"https://profiles.wordpress.org/bor0/\">Boro Sitnikovski</a> · <a href=\"https://profiles.wordpress.org/bjorsch/\">Brad Jorsch</a> · <a href=\"https://profiles.wordpress.org/crazyjaco/\">Bradley Jacobs</a> · <a href=\"https://profiles.wordpress.org/kraftbj/\">Brandon Kraft</a> · <a href=\"https://profiles.wordpress.org/bvreeman22/\">Brandon Vreeman</a> · <a href=\"https://profiles.wordpress.org/bgardner/\">Brian Gardner</a> · <a href=\"https://profiles.wordpress.org/masteradhoc/\">Brian Haas</a> · <a href=\"https://profiles.wordpress.org/brookemk/\">Brooke</a> · <a href=\"https://profiles.wordpress.org/brookedot/\">Brooke.</a> · <a href=\"https://profiles.wordpress.org/trynet/\">Bud Kraus</a> · <a href=\"https://profiles.wordpress.org/icaleb/\">Caleb Burks</a> · <a href=\"https://profiles.wordpress.org/snicco/\">Calvin Alkan</a> · <a href=\"https://profiles.wordpress.org/karl94/\">Carlo Cannas</a> · <a href=\"https://profiles.wordpress.org/cbravobernal/\">Carlos Bravo</a> · <a href=\"https://profiles.wordpress.org/carlosgprim/\">Carlos G. P.</a> · <a href=\"https://profiles.wordpress.org/poena/\">Carolina Nymark</a> · <a href=\"https://profiles.wordpress.org/cathibosco1/\">Cathi Bosco</a> · <a href=\"https://profiles.wordpress.org/ceer/\">ceer</a> · <a href=\"https://profiles.wordpress.org/cenkdemir/\">cenkdemir</a> · <a href=\"https://profiles.wordpress.org/shireling/\">Chad Chadbourne</a> · <a href=\"https://profiles.wordpress.org/chasedsiedu/\">chased@si.edu</a> · <a href=\"https://profiles.wordpress.org/chintan1896/\">Chintan hingrajiya</a> · <a href=\"https://profiles.wordpress.org/chipbennett/\">Chip Bennett</a> · <a href=\"https://profiles.wordpress.org/cbringmann/\">Chloé Bringmann</a> · <a href=\"https://profiles.wordpress.org/crunnells/\">Chris Runnells</a> · <a href=\"https://profiles.wordpress.org/chriscct7/\">chriscct7</a> · <a href=\"https://profiles.wordpress.org/chrisdesrochers/\">chrisdesrochers</a> · <a href=\"https://profiles.wordpress.org/codersantosh/\">codersantosh</a> · <a href=\"https://profiles.wordpress.org/costdev/\">Colin Stewart</a> · <a href=\"https://profiles.wordpress.org/coreyw/\">Corey Worrell</a> · <a href=\"https://profiles.wordpress.org/courtneypk/\">Courtney Patubo Kranzke</a> · <a href=\"https://profiles.wordpress.org/courane01/\">Courtney Robertson</a> · <a href=\"https://profiles.wordpress.org/mitogh/\">Crisoforo Gaspar</a> · <a href=\"https://profiles.wordpress.org/crstauf/\">crstauf</a> · <a href=\"https://profiles.wordpress.org/littlebigthing/\">Csaba (LittleBigThings)</a> · <a href=\"https://profiles.wordpress.org/cu121/\">Cupid Chakma</a> · <a href=\"https://profiles.wordpress.org/didierjm/\">cybeardjm</a> · <a href=\"https://profiles.wordpress.org/cyberchicken/\">Cyberchicken</a> · <a href=\"https://profiles.wordpress.org/extendwings/\">Daisuke Takahashi</a> · <a href=\"https://profiles.wordpress.org/dajeema/\">Dajeema Rai</a> · <a href=\"https://profiles.wordpress.org/colorful-tones/\">Damon Cook</a> · <a href=\"https://profiles.wordpress.org/damonsharp/\">Damon Sharp</a> · <a href=\"https://profiles.wordpress.org/dantovbein/\">Dan Tovbein</a> · <a href=\"https://profiles.wordpress.org/danielbachhuber/\">Daniel Bachhuber</a> · <a href=\"https://profiles.wordpress.org/talldanwp/\">Daniel Richards</a> · <a href=\"https://profiles.wordpress.org/danieldudzic/\">danieldudzic</a> · <a href=\"https://profiles.wordpress.org/mte90/\">Daniele Scasciafratte</a> · <a href=\"https://profiles.wordpress.org/queerdevperson/\">Danielle Zarcaro</a> · <a href=\"https://profiles.wordpress.org/danieltj/\">danieltj</a> · <a href=\"https://profiles.wordpress.org/darerodz/\">darerodz</a> · <a href=\"https://profiles.wordpress.org/dkotter/\">Darin Kotter</a> · <a href=\"https://profiles.wordpress.org/darkfate/\">darkfate</a> · <a href=\"https://profiles.wordpress.org/nerrad/\">Darren Ethier (nerrad)</a> · <a href=\"https://profiles.wordpress.org/darshitrajyaguru97/\">Darshit Rajyaguru</a> · <a href=\"https://profiles.wordpress.org/davelo/\">Dave Loodts</a> · <a href=\"https://profiles.wordpress.org/dave03/\">dave03</a> · <a href=\"https://profiles.wordpress.org/davidbaumwald/\">David Baumwald</a> · <a href=\"https://profiles.wordpress.org/davidbinda/\">David Biňovec</a> · <a href=\"https://profiles.wordpress.org/dpcalhoun/\">David Calhoun</a> · <a href=\"https://profiles.wordpress.org/desmith/\">David E. Smith</a> · <a href=\"https://profiles.wordpress.org/dfavor/\">David Favor</a> · <a href=\"https://profiles.wordpress.org/dlh/\">David Herrera</a> · <a href=\"https://profiles.wordpress.org/dryanpress/\">David Ryan</a> · <a href=\"https://profiles.wordpress.org/get_dave/\">David Smith</a> · <a href=\"https://profiles.wordpress.org/dawidurbanski/\">Dawid Urbanski</a> · <a href=\"https://profiles.wordpress.org/daxelrod/\">daxelrod</a> · <a href=\"https://profiles.wordpress.org/arnedb/\">De Belser Arne</a> · <a href=\"https://profiles.wordpress.org/dsas/\">Dean Sas</a> · <a href=\"https://profiles.wordpress.org/thewebprincess/\">Dee Teal</a> · <a href=\"https://profiles.wordpress.org/deepakvijayan/\">Deepak Vijayan</a> · <a href=\"https://profiles.wordpress.org/dingo_d/\">Denis Žoljom</a> · <a href=\"https://profiles.wordpress.org/dmsnell/\">Dennis Snell</a> · <a href=\"https://profiles.wordpress.org/derekblank/\">Derek Blank</a> · <a href=\"https://profiles.wordpress.org/emrikol/\">Derrick Tennant</a> · <a href=\"https://profiles.wordpress.org/68kheart/\">Devan Ferguson</a> · <a href=\"https://profiles.wordpress.org/dharm1025/\">Dharmesh Patel</a> · <a href=\"https://profiles.wordpress.org/dhrumilk/\">Dhrumil Kumbhani</a> · <a href=\"https://profiles.wordpress.org/dhruvishah2203/\">Dhruvi Shah</a> · <a href=\"https://profiles.wordpress.org/dianeco/\">Diane Co</a> · <a href=\"https://profiles.wordpress.org/dilipbheda/\">Dilip Bheda</a> · <a href=\"https://profiles.wordpress.org/dimitrism/\">Dimitris Mitsis</a> · <a href=\"https://profiles.wordpress.org/dd32/\">Dion Hulse</a> · <a href=\"https://profiles.wordpress.org/itsjustdj/\">DJ</a> · <a href=\"https://profiles.wordpress.org/djcowan/\">dj.cowan</a> · <a href=\"https://profiles.wordpress.org/ocean90/\">Dominik Schilling</a> · <a href=\"https://profiles.wordpress.org/doughamlin/\">doughamlin</a> · <a href=\"https://profiles.wordpress.org/drewapicture/\">Drew Jaynes</a> · <a href=\"https://profiles.wordpress.org/elrae/\">Earle Davies</a> · <a href=\"https://profiles.wordpress.org/metalandcoffee/\">Ebonie Butler</a> · <a href=\"https://profiles.wordpress.org/ediamin/\">Edi Amin</a> · <a href=\"https://profiles.wordpress.org/cais/\">Edward Caissie</a> · <a href=\"https://profiles.wordpress.org/ehtis/\">Ehtisham S.</a> · <a href=\"https://profiles.wordpress.org/ellatrix/\">Ella van Durpe</a> · <a href=\"https://profiles.wordpress.org/elmastudio/\">Ellen Bauer</a> · <a href=\"https://profiles.wordpress.org/emailjoey/\">emailjoey</a> · <a href=\"https://profiles.wordpress.org/codex-m/\">Emerson Maningo</a> · <a href=\"https://profiles.wordpress.org/clarkeemily/\">Emily Clarke</a> · <a href=\"https://profiles.wordpress.org/emilyatmobtown/\">Emily Leffler Schulman</a> · <a href=\"https://profiles.wordpress.org/emirpprime/\">emirpprime</a> · <a href=\"https://profiles.wordpress.org/enodekciw/\">enodekciw</a> · <a href=\"https://profiles.wordpress.org/lopo/\">Enrico Battocchi</a> · <a href=\"https://profiles.wordpress.org/kebbet/\">Erik Betshammar</a> · <a href=\"https://profiles.wordpress.org/esratpopy/\">Esrat Sultana Popy</a> · <a href=\"https://profiles.wordpress.org/estelaris/\">Estela Rueda</a> · <a href=\"https://profiles.wordpress.org/fabiankaegy/\">Fabian K&#228;gy</a> · <a href=\"https://profiles.wordpress.org/gaambo/\">Fabian Todt</a> · <a href=\"https://profiles.wordpress.org/fabiorubioglio/\">Fabio Rubioglio</a> · <a href=\"https://profiles.wordpress.org/faisal03/\">Faisal Alvi</a> · <a href=\"https://profiles.wordpress.org/felipeelia/\">Felipe Elia</a> · <a href=\"https://profiles.wordpress.org/flixos90/\">Felix Arntz</a> · <a href=\"https://profiles.wordpress.org/femkreations/\">Femy Praseeth</a> · <a href=\"https://profiles.wordpress.org/floydwilde/\">floydwilde</a> · <a href=\"https://profiles.wordpress.org/foliovision/\">FolioVision</a> · <a href=\"https://profiles.wordpress.org/francina/\">Francesca Marano</a> · <a href=\"https://profiles.wordpress.org/nexflaszlo/\">Frank Laszlo</a> · <a href=\"https://profiles.wordpress.org/battelfred/\">Fredde Battel</a> · <a href=\"https://profiles.wordpress.org/fzhantw/\">fzhantw</a> · <a href=\"https://profiles.wordpress.org/mintindeed/\">Gabriel Koen</a> · <a href=\"https://profiles.wordpress.org/pauthake015/\">Ganesh Dahal</a> · <a href=\"https://profiles.wordpress.org/garrett-eclipse/\">Garrett Hyder</a> · <a href=\"https://profiles.wordpress.org/garyc40/\">Gary Cao</a> · <a href=\"https://profiles.wordpress.org/pento/\">Gary Pendergast</a> · <a href=\"https://profiles.wordpress.org/soulseekah/\">Gennady Kovshenin</a> · <a href=\"https://profiles.wordpress.org/revgeorge/\">George Hotelling</a> · <a href=\"https://profiles.wordpress.org/mamaduka/\">George Mamadashvili</a> · <a href=\"https://profiles.wordpress.org/geriux/\">Gerardo Pacheco</a> · <a href=\"https://profiles.wordpress.org/mokagio/\">Gio Lodi</a> · <a href=\"https://profiles.wordpress.org/glendaviesnz/\">Glen Davies</a> · <a href=\"https://profiles.wordpress.org/gnanasekaran/\">Gnanasekaran Loganathan</a> · <a href=\"https://profiles.wordpress.org/ingeniumed/\">Gopal Krishnan</a> · <a href=\"https://profiles.wordpress.org/90lines/\">GOZER</a> · <a href=\"https://profiles.wordpress.org/gpotter/\">gpotter</a> · <a href=\"https://profiles.wordpress.org/grantmkin/\">Grant M. Kinney</a> · <a href=\"https://profiles.wordpress.org/gregross/\">Greg Ross</a> · <a href=\"https://profiles.wordpress.org/gziolo/\">Greg Ziółkowski</a> · <a href=\"https://profiles.wordpress.org/gregfuller/\">gregfuller</a> · <a href=\"https://profiles.wordpress.org/guss77/\">Guss77</a> · <a href=\"https://profiles.wordpress.org/bordoni/\">Gustavo Bordoni</a> · <a href=\"https://profiles.wordpress.org/gvgvgvijayan/\">gvgvgvijayan</a> · <a href=\"https://profiles.wordpress.org/priethor/\">H&#233;ctor Prieto</a> · <a href=\"https://profiles.wordpress.org/poran766/\">H.M. Mushfiqur Rahman</a> · <a href=\"https://profiles.wordpress.org/hanneslsm/\">hanneslsm</a> · <a href=\"https://profiles.wordpress.org/hztyfoon/\">Hanzala Taifun</a> · <a href=\"https://profiles.wordpress.org/hareesh-pillai/\">Hareesh S</a> · <a href=\"https://profiles.wordpress.org/harshgajipara/\">Harsh Gajipara</a> · <a href=\"https://profiles.wordpress.org/hasanuzzamanshamim/\">Hasanuzzaman</a> · <a href=\"https://profiles.wordpress.org/hazdiego/\">Haz</a> · <a href=\"https://profiles.wordpress.org/helen/\">Helen Hou-Sandi</a> · <a href=\"https://profiles.wordpress.org/tejwanihemant/\">Hemant Tejwani</a> · <a href=\"https://profiles.wordpress.org/hbhalodia/\">Hit Bhalodia</a> · <a href=\"https://profiles.wordpress.org/hlunter/\">hlunter</a> · <a href=\"https://profiles.wordpress.org/howdy_mcgee/\">Howdy_McGee</a> · <a href=\"https://profiles.wordpress.org/huzaifaalmesbah/\">Huzaifa Al Mesbah</a> · <a href=\"https://profiles.wordpress.org/iandunn/\">Ian Dunn</a> · <a href=\"https://profiles.wordpress.org/incursadesigns/\">Incursa Designs</a> · <a href=\"https://profiles.wordpress.org/ironprogrammer/\">ironprogrammer</a> · <a href=\"https://profiles.wordpress.org/isabel_brison/\">Isabel Brison</a> · <a href=\"https://profiles.wordpress.org/itecrs/\">itecrs</a> · <a href=\"https://profiles.wordpress.org/ivanzhuck/\">Ivan Zhuck</a> · <a href=\"https://profiles.wordpress.org/jaimieolmstead/\">jaimieolmstead</a> · <a href=\"https://profiles.wordpress.org/jakariaistauk/\">Jakaria Istauk</a> · <a href=\"https://profiles.wordpress.org/jakemgold/\">Jake Goldman</a> · <a href=\"https://profiles.wordpress.org/whyisjake/\">Jake Spurlock</a> · <a href=\"https://profiles.wordpress.org/bonkerz/\">James Hunt</a> · <a href=\"https://profiles.wordpress.org/thelovelist/\">James Janco</a> · <a href=\"https://profiles.wordpress.org/jameskoster/\">James Koster</a> · <a href=\"https://profiles.wordpress.org/james roberts/\">James Roberts</a> · <a href=\"https://profiles.wordpress.org/james0r/\">james0r</a> · <a href=\"https://profiles.wordpress.org/jamiemchale/\">Jamie McHale</a> · <a href=\"https://profiles.wordpress.org/perrelet/\">Jamie Perrelet</a> · <a href=\"https://profiles.wordpress.org/codente/\">Jamie VanRaalte</a> · <a href=\"https://profiles.wordpress.org/jane/\">jane</a> · <a href=\"https://profiles.wordpress.org/jsnajdr/\">Jarda Snajdr</a> · <a href=\"https://profiles.wordpress.org/yari2u/\">Jari Vuorenmaa</a> · <a href=\"https://profiles.wordpress.org/ipajen/\">Jarko Piironen</a> · <a href=\"https://profiles.wordpress.org/jason_the_adams/\">Jason Adams</a> · <a href=\"https://profiles.wordpress.org/boogah/\">Jason Cosper</a> · <a href=\"https://profiles.wordpress.org/pbking/\">Jason Crist</a> · <a href=\"https://profiles.wordpress.org/jastos/\">jastos</a> · <a href=\"https://profiles.wordpress.org/audrasjb/\">Jean-Baptiste Audras</a> · <a href=\"https://profiles.wordpress.org/jblz/\">Jeff Bowen</a> · <a href=\"https://profiles.wordpress.org/krokodok/\">Jeff Chi</a> · <a href=\"https://profiles.wordpress.org/jeffeverhart383/\">Jeff Everhart</a> · <a href=\"https://profiles.wordpress.org/jffng/\">Jeff Ong</a> · <a href=\"https://profiles.wordpress.org/jeffikus/\">jeffikus</a> · <a href=\"https://profiles.wordpress.org/jeffpaul/\">Jeffrey Paul</a> · <a href=\"https://profiles.wordpress.org/jeflopodev/\">jeflopo</a> · <a href=\"https://profiles.wordpress.org/jeremyfelt/\">Jeremy Felt</a> · <a href=\"https://profiles.wordpress.org/jeherve/\">Jeremy Herve</a> · <a href=\"https://profiles.wordpress.org/jeremyyip/\">Jeremy Yip</a> · <a href=\"https://profiles.wordpress.org/jeryj/\">jeryj</a> · <a href=\"https://profiles.wordpress.org/jesin/\">Jesin A</a> · <a href=\"https://profiles.wordpress.org/jessplease/\">Jessica Duarte</a> · <a href=\"https://profiles.wordpress.org/jessicagoddard/\">Jessica Goddard</a> · <a href=\"https://profiles.wordpress.org/luminuu/\">Jessica Lyschik</a> · <a href=\"https://profiles.wordpress.org/jick/\">Jick</a> · <a href=\"https://profiles.wordpress.org/jipmoors/\">Jip Moors</a> · <a href=\"https://profiles.wordpress.org/jivygraphics/\">jivygraphics</a> · <a href=\"https://profiles.wordpress.org/joedolson/\">Joe Dolson</a> · <a href=\"https://profiles.wordpress.org/joehoyle/\">Joe Hoyle</a> · <a href=\"https://profiles.wordpress.org/joemcgill/\">Joe McGill</a> · <a href=\"https://profiles.wordpress.org/joen/\">Joen A.</a> · <a href=\"https://profiles.wordpress.org/johnbillion/\">John Blackbourn</a> · <a href=\"https://profiles.wordpress.org/bitmachina/\">John Hooks</a> · <a href=\"https://profiles.wordpress.org/johnjamesjacoby/\">John James Jacoby</a> · <a href=\"https://profiles.wordpress.org/johnregan3/\">John Regan</a> · <a href=\"https://profiles.wordpress.org/jb510/\">Jon Brown</a> · <a href=\"https://profiles.wordpress.org/duck_/\">Jon Cave</a> · <a href=\"https://profiles.wordpress.org/desrosj/\">Jonathan Desrosiers</a> · <a href=\"https://profiles.wordpress.org/spacedmonkey/\">Jonny Harris</a> · <a href=\"https://profiles.wordpress.org/jonoaldersonwp/\">Jono Alderson</a> · <a href=\"https://profiles.wordpress.org/varjodesigns/\">Joona</a> · <a href=\"https://profiles.wordpress.org/joostdevalk/\">Joost de Valk</a> · <a href=\"https://profiles.wordpress.org/jordanpak/\">JordanPak</a> · <a href=\"https://profiles.wordpress.org/jordesign/\">jordesign</a> · <a href=\"https://profiles.wordpress.org/jorgefilipecosta/\">Jorge Costa</a> · <a href=\"https://profiles.wordpress.org/dunhakdis/\">Joseph G.</a> · <a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden</a> · <a href=\"https://profiles.wordpress.org/joshcanhelp/\">joshcanhelp</a> · <a href=\"https://profiles.wordpress.org/joshuatf/\">joshuatf</a> · <a href=\"https://profiles.wordpress.org/jrtashjian/\">JR Tashjian</a> · <a href=\"https://profiles.wordpress.org/juanfra/\">Juan Aldasoro</a> · <a href=\"https://profiles.wordpress.org/juanmaguitar/\">JuanMa Garrido</a> · <a href=\"https://profiles.wordpress.org/jrf/\">Juliette Reinders Folmer</a> · <a href=\"https://profiles.wordpress.org/greenshady/\">Justin Tadlock</a> · <a href=\"https://profiles.wordpress.org/jyolsna/\">Jyolsna J E</a> · <a href=\"https://profiles.wordpress.org/ashikur698/\">K M Ashikur Rahman</a> · <a href=\"https://profiles.wordpress.org/kadamwhite/\">K. Adam White</a> · <a href=\"https://profiles.wordpress.org/kafleg/\">KafleG</a> · <a href=\"https://profiles.wordpress.org/kevin940726/\">Kai Hao</a> · <a href=\"https://profiles.wordpress.org/kalmang/\">Kalmang</a> · <a href=\"https://profiles.wordpress.org/kalpeshh/\">Kalpesh</a> · <a href=\"https://profiles.wordpress.org/bosskhj/\">Kamrul Hasan</a> · <a href=\"https://profiles.wordpress.org/karlijnbk/\">Karlijn Bok</a> · <a href=\"https://profiles.wordpress.org/karolmanijak/\">Karol Manijak</a> · <a href=\"https://profiles.wordpress.org/thekt12/\">Karthik Thayyil</a> · <a href=\"https://profiles.wordpress.org/1happyplace/\">Katie Ayres</a> · <a href=\"https://profiles.wordpress.org/kawsaralameven/\">kawsaralameven</a> · <a href=\"https://profiles.wordpress.org/kkoppenhaver/\">Keanan Koppenhaver</a> · <a href=\"https://profiles.wordpress.org/ryelle/\">Kelly Choyce-Dwan</a> · <a href=\"https://profiles.wordpress.org/kevinfodness/\">Kevin Fodness</a> · <a href=\"https://profiles.wordpress.org/p51labs/\">Kevin Miller</a> · <a href=\"https://profiles.wordpress.org/ktaron/\">Kevin Taron</a> · <a href=\"https://profiles.wordpress.org/khleomix/\">khleomix</a> · <a href=\"https://profiles.wordpress.org/khokansardar/\">Khokan Sardar</a> · <a href=\"https://profiles.wordpress.org/kimannwall/\">Kim Coleman</a> · <a href=\"https://profiles.wordpress.org/kishanjasani/\">Kishan Jasani</a> · <a href=\"https://profiles.wordpress.org/kkmuffme/\">kkmuffme</a> · <a href=\"https://profiles.wordpress.org/olein/\">Koji Kuno</a> · <a href=\"https://profiles.wordpress.org/kovshenin/\">Konstantin Kovshenin</a> · <a href=\"https://profiles.wordpress.org/obenland/\">Konstantin Obenland</a> · <a href=\"https://profiles.wordpress.org/kopila47/\">Kopila Shrestha</a> · <a href=\"https://profiles.wordpress.org/krupalpanchal/\">Krupal Panchal</a> · <a href=\"https://profiles.wordpress.org/labunchemjong/\">Labun Chemjong</a> · <a href=\"https://profiles.wordpress.org/lancewillett/\">Lance Willett</a> · <a href=\"https://profiles.wordpress.org/lhe2012/\">LarryWEB</a> · <a href=\"https://profiles.wordpress.org/lastsplash/\">lastsplash (a11n)</a> · <a href=\"https://profiles.wordpress.org/laumindproductscomau/\">lau@mindproducts.com.au</a> · <a href=\"https://profiles.wordpress.org/launchinteractive/\">launchinteractive</a> · <a href=\"https://profiles.wordpress.org/lada7042/\">Laura Adamonis</a> · <a href=\"https://profiles.wordpress.org/newyorkerlaura/\">Laura Byrne</a> · <a href=\"https://profiles.wordpress.org/laurelfulford/\">laurelfulford</a> · <a href=\"https://profiles.wordpress.org/oncecoupled/\">Lauren</a> · <a href=\"https://profiles.wordpress.org/luckybhumkar/\">Laxmikant Bhumkar</a> · <a href=\"https://profiles.wordpress.org/leewillis77/\">Lee Willis</a> · <a href=\"https://profiles.wordpress.org/0mirka00/\">Lena Morita</a> · <a href=\"https://profiles.wordpress.org/lgladdy/\">Liam Gladdy</a> · <a href=\"https://profiles.wordpress.org/rudlinkon/\">Linkon Miyan</a> · <a href=\"https://profiles.wordpress.org/linsoftware/\">Linnea Huxford</a> · <a href=\"https://profiles.wordpress.org/lloydbudd/\">Lloyd Budd</a> · <a href=\"https://profiles.wordpress.org/thelovekesh/\">Lovekesh Kumar</a> · <a href=\"https://profiles.wordpress.org/gigitux/\">Luigi</a> · <a href=\"https://profiles.wordpress.org/zaguiini/\">Luis Felipe Zaguini</a> · <a href=\"https://profiles.wordpress.org/luisherranz/\">Luis Herranz</a> · <a href=\"https://profiles.wordpress.org/lukecavanagh/\">Luke Cavanagh</a> · <a href=\"https://profiles.wordpress.org/lunaluna/\">lunaluna</a> · <a href=\"https://profiles.wordpress.org/lyndauwp/\">lyndauwp</a> · <a href=\"https://profiles.wordpress.org/pagelab/\">M&#225;rcio Duarte</a> · <a href=\"https://profiles.wordpress.org/maciejmackowiak/\">maciejmackowiak</a> · <a href=\"https://profiles.wordpress.org/madejackson/\">madejackson</a> · <a href=\"https://profiles.wordpress.org/madhudollu/\">Madhu Dollu</a> · <a href=\"https://profiles.wordpress.org/mrdollu/\">Madhu Dollu</a> · <a href=\"https://profiles.wordpress.org/onemaggie/\">Maggie Cabrera</a> · <a href=\"https://profiles.wordpress.org/mhimon/\">Mahbub Hasan Imon</a> · <a href=\"https://profiles.wordpress.org/maahrokh/\">Mahrokh</a> · <a href=\"https://profiles.wordpress.org/mai21/\">Mai</a> · <a href=\"https://profiles.wordpress.org/travel_girl/\">Maja Benke</a> · <a href=\"https://profiles.wordpress.org/maltfield/\">maltfield</a> · <a href=\"https://profiles.wordpress.org/maneshtimilsina/\">Manesh Timilsina</a> · <a href=\"https://profiles.wordpress.org/manfcarlo/\">manfcarlo</a> · <a href=\"https://profiles.wordpress.org/manzoorwanijk/\">Manzoor Wani</a> · <a href=\"https://profiles.wordpress.org/marcelle42/\">marcelle42</a> · <a href=\"https://profiles.wordpress.org/fullofcaffeine/\">Marcelo de Moraes Serpa</a> · <a href=\"https://profiles.wordpress.org/mciampini/\">Marco Ciampini</a> · <a href=\"https://profiles.wordpress.org/pereirinha/\">Marco Pereirinha</a> · <a href=\"https://profiles.wordpress.org/marcoevich/\">Marcoevich</a> · <a href=\"https://profiles.wordpress.org/margolisj/\">margolisj</a> · <a href=\"https://profiles.wordpress.org/tyxla/\">Marin Atanasov</a> · <a href=\"https://profiles.wordpress.org/santosguillamot/\">Mario Santos</a> · <a href=\"https://profiles.wordpress.org/clorith/\">Marius L. J.</a> · <a href=\"https://profiles.wordpress.org/markjaquith/\">Mark Jaquith</a> · <a href=\"https://profiles.wordpress.org/markoserb/\">Marko Ivanovic</a> · <a href=\"https://profiles.wordpress.org/martatorre/\">Marta Torre</a> · <a href=\"https://profiles.wordpress.org/mhkuu/\">Martijn van der Klis</a> · <a href=\"https://profiles.wordpress.org/martinkrcho/\">martin.krcho</a> · <a href=\"https://profiles.wordpress.org/marybaum/\">Mary Baum</a> · <a href=\"https://profiles.wordpress.org/masoudnkh/\">Masoud NKH</a> · <a href=\"https://profiles.wordpress.org/mathsgrinds/\">mathsgrinds</a> · <a href=\"https://profiles.wordpress.org/mmaattiiaass/\">Matias Benedetto</a> · <a href=\"https://profiles.wordpress.org/matveb/\">Matias Ventura</a> · <a href=\"https://profiles.wordpress.org/mattkeys/\">Matt Keys</a> · <a href=\"https://profiles.wordpress.org/mwtsn/\">Matt Watson</a> · <a href=\"https://profiles.wordpress.org/mklute101/\">Matthaus Klute</a> · <a href=\"https://profiles.wordpress.org/mattheweppelsheimer/\">Matthew Eppelsheimer</a> · <a href=\"https://profiles.wordpress.org/matthewfarlymn/\">Matthew Farlymn</a> · <a href=\"https://profiles.wordpress.org/mattheu/\">Matthew Haines-Young</a> · <a href=\"https://profiles.wordpress.org/matthewjho/\">matthewjho</a> · <a href=\"https://profiles.wordpress.org/maurodf/\">maurodf</a> · <a href=\"https://profiles.wordpress.org/maxinacube/\">Maxwell Morgan</a> · <a href=\"https://profiles.wordpress.org/maysi/\">maysi</a> · <a href=\"https://profiles.wordpress.org/hrshahin/\">Md HR Shahin</a> · <a href=\"https://profiles.wordpress.org/meaganhanes/\">meagan hanes</a> · <a href=\"https://profiles.wordpress.org/iammehedi1/\">Mehedi Hassan</a> · <a href=\"https://profiles.wordpress.org/meher/\">Meher Bala</a> · <a href=\"https://profiles.wordpress.org/melchoyce/\">Mel Choyce-Dwan</a> · <a href=\"https://profiles.wordpress.org/mer00x/\">mer00x</a> · <a href=\"https://profiles.wordpress.org/merel1988/\">merel1988</a> · <a href=\"https://profiles.wordpress.org/michael-arestad/\">Michael Arestad</a> · <a href=\"https://profiles.wordpress.org/mburridge/\">Michael Burridge</a> · <a href=\"https://profiles.wordpress.org/mshowes/\">Michael Showes</a> · <a href=\"https://profiles.wordpress.org/czapla/\">Michal Czaplinski</a> · <a href=\"https://profiles.wordpress.org/michalooki/\">Michalooki</a> · <a href=\"https://profiles.wordpress.org/michelleblanchette/\">Michelle Blanchette</a> · <a href=\"https://profiles.wordpress.org/michelleames/\">Michelle Frechette</a> · <a href=\"https://profiles.wordpress.org/michi91/\">Michi91</a> · <a href=\"https://profiles.wordpress.org/mcsf/\">Miguel Fonseca</a> · <a href=\"https://profiles.wordpress.org/simison/\">Mikael Korpela</a> · <a href=\"https://profiles.wordpress.org/mikejolley/\">Mike Jolley (a11n)</a> · <a href=\"https://profiles.wordpress.org/mmcalister/\">Mike McAlister</a> · <a href=\"https://profiles.wordpress.org/mikeschinkel/\">Mike Schinkel</a> · <a href=\"https://profiles.wordpress.org/mikeschroder/\">Mike Schroder</a> · <a href=\"https://profiles.wordpress.org/mikestraw/\">Mike Straw</a> · <a href=\"https://profiles.wordpress.org/mikinc860/\">Mikin Chauhan</a> · <a href=\"https://profiles.wordpress.org/gonzomir/\">Milen Petrinski - Gonzo</a> · <a href=\"https://profiles.wordpress.org/mimitips/\">mimi</a> · <a href=\"https://profiles.wordpress.org/mitchellaustin/\">mitchellaustin</a> · <a href=\"https://profiles.wordpress.org/mhshujon/\">Monir</a> · <a href=\"https://profiles.wordpress.org/mrinal013/\">Mrinal Haque</a> · <a href=\"https://profiles.wordpress.org/mrwweb/\">mrwweb</a> · <a href=\"https://profiles.wordpress.org/wparslan/\">Muhammad Arslan</a> · <a href=\"https://profiles.wordpress.org/devmuhib/\">Muhibul Haque</a> · <a href=\"https://profiles.wordpress.org/mujuonly/\">mujuonly</a> · <a href=\"https://profiles.wordpress.org/mukesh27/\">Mukesh Panchal</a> · <a href=\"https://profiles.wordpress.org/faguni22/\">Mumtahina Faguni</a> · <a href=\"https://profiles.wordpress.org/611shabnam/\">Mushrit Shabnam</a> · <a href=\"https://profiles.wordpress.org/webdev8800/\">Myles Taylor</a> · <a href=\"https://profiles.wordpress.org/nalininonstopnewsuk/\">Nalini Thakor</a> · <a href=\"https://profiles.wordpress.org/nandhuraj/\">nandhuraj</a> · <a href=\"https://profiles.wordpress.org/nazgul/\">Nazgul</a> · <a href=\"https://profiles.wordpress.org/nazsabuz/\">Nazmul Sabuz</a> · <a href=\"https://profiles.wordpress.org/neilorangepeel/\">Neil Hainsworth</a> · <a href=\"https://profiles.wordpress.org/nendeb55/\">nendeb</a> · <a href=\"https://profiles.wordpress.org/ndiego/\">Nick Diego</a> · <a href=\"https://profiles.wordpress.org/rahe/\">Nicolas Juen</a> · <a href=\"https://profiles.wordpress.org/nicolefurlan/\">Nicole Furlan</a> · <a href=\"https://profiles.wordpress.org/nicomollet/\">nicomollet</a> · <a href=\"https://profiles.wordpress.org/nidhidhandhukiya/\">nidhidhandhukiya</a> · <a href=\"https://profiles.wordpress.org/nielslange/\">Niels Lange</a> · <a href=\"https://profiles.wordpress.org/nihar007/\">Nihar Ranjan Das</a> · <a href=\"https://profiles.wordpress.org/ntsekouras/\">Nik Tsekouras</a> · <a href=\"https://profiles.wordpress.org/rabmalin/\">Nilambar Sharma</a> · <a href=\"https://profiles.wordpress.org/nilovelez/\">Nilo Velez</a> · <a href=\"https://profiles.wordpress.org/niravsherasiya7707/\">niravsherasiya7707</a> · <a href=\"https://profiles.wordpress.org/dasnitesh780/\">Nitesh Das</a> · <a href=\"https://profiles.wordpress.org/nithi22/\">Nithin John</a> · <a href=\"https://profiles.wordpress.org/nithins53/\">Nithin SreeRaj</a> · <a href=\"https://profiles.wordpress.org/noahtallen/\">Noah Allen</a> · <a href=\"https://profiles.wordpress.org/ngreennc/\">Nyasha</a> · <a href=\"https://profiles.wordpress.org/ockham/\">ockham</a> · <a href=\"https://profiles.wordpress.org/ohia/\">Ohia</a> · <a href=\"https://profiles.wordpress.org/okat/\">okat</a> · <a href=\"https://profiles.wordpress.org/oglekler/\">Olga Gleckler</a> · <a href=\"https://profiles.wordpress.org/domainsupport/\">Oliver Campion</a> · <a href=\"https://profiles.wordpress.org/olliejones/\">OllieJones</a> · <a href=\"https://profiles.wordpress.org/paaljoachim/\">Paal Joachim Romdahl</a> · <a href=\"https://profiles.wordpress.org/pannelars/\">pannelars</a> · <a href=\"https://profiles.wordpress.org/swissspidy/\">Pascal Birchler</a> · <a href=\"https://profiles.wordpress.org/pbiron/\">Paul Biron</a> · <a href=\"https://profiles.wordpress.org/paulkevan/\">Paul Kevan</a> · <a href=\"https://profiles.wordpress.org/pavelevap/\">pavelevap</a> · <a href=\"https://profiles.wordpress.org/pedromendonca/\">Pedro Mendon&#231;a</a> · <a href=\"https://profiles.wordpress.org/pentatonicfunk/\">pentatonicfunk</a> · <a href=\"https://profiles.wordpress.org/gungeekatx/\">Pete Nelson</a> · <a href=\"https://profiles.wordpress.org/peterwilsoncc/\">Peter Wilson</a> · <a href=\"https://profiles.wordpress.org/petitphp/\">petitphp</a> · <a href=\"https://profiles.wordpress.org/petrosparaskevopoulos/\">petrosparaskevopoulos</a> · <a href=\"https://profiles.wordpress.org/walbo/\">Petter Walb&#248; Johnsg&#229;rd</a> · <a href=\"https://profiles.wordpress.org/phillsav/\">Phill</a> · <a href=\"https://profiles.wordpress.org/nekojonez/\">Pieterjan Deneys</a> · <a href=\"https://profiles.wordpress.org/piyushdeshmukh/\">piyushdeshmukh</a> · <a href=\"https://profiles.wordpress.org/plugindevs/\">Plugin Devs</a> · <a href=\"https://profiles.wordpress.org/poojabhimani/\">Pooja Bhimani</a> · <a href=\"https://profiles.wordpress.org/webtechpooja/\">Pooja Derashri</a> · <a href=\"https://profiles.wordpress.org/pooja1210/\">Pooja N Muchandikar</a> · <a href=\"https://profiles.wordpress.org/pranavjoshi/\">pranavjoshi</a> · <a href=\"https://profiles.wordpress.org/prashantbhivsane/\">Prashant</a> · <a href=\"https://profiles.wordpress.org/presskopp/\">Presskopp</a> · <a href=\"https://profiles.wordpress.org/rlmc/\">r-c</a> · <a href=\"https://profiles.wordpress.org/rajinsharwar/\">Rajin Sharwar</a> · <a href=\"https://profiles.wordpress.org/rahmohn/\">Ramon Ahnert</a> · <a href=\"https://profiles.wordpress.org/rcorrales/\">Ramon Corrales</a> · <a href=\"https://profiles.wordpress.org/ramonopoly/\">Ramon James</a> · <a href=\"https://profiles.wordpress.org/rebekowitz/\">Rebekah Markowitz</a> · <a href=\"https://profiles.wordpress.org/tabrisrp/\">Remy Perona</a> · <a href=\"https://profiles.wordpress.org/renyot/\">ren</a> · <a href=\"https://profiles.wordpress.org/renathoc/\">Renatho (a11n)</a> · <a href=\"https://profiles.wordpress.org/renehermi/\">Rene Hermenau</a> · <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a> · <a href=\"https://profiles.wordpress.org/youknowriad/\">Riad Benguella</a> · <a href=\"https://profiles.wordpress.org/rianrietveld/\">Rian Rietveld</a> · <a href=\"https://profiles.wordpress.org/richtabor/\">Rich Tabor</a> · <a href=\"https://profiles.wordpress.org/noisysocks/\">Robert Anderson</a> · <a href=\"https://profiles.wordpress.org/sanchothefat/\">Robert O\'Rourke</a> · <a href=\"https://profiles.wordpress.org/robinwpdeveloper/\">Robin</a> · <a href=\"https://profiles.wordpress.org/robpetrin/\">robpetrin</a> · <a href=\"https://profiles.wordpress.org/ravanh/\">Rolf Allard van Hagen</a> · <a href=\"https://profiles.wordpress.org/ryanduff/\">Ryan Duff</a> · <a href=\"https://profiles.wordpress.org/rmccue/\">Ryan McCue</a> · <a href=\"https://profiles.wordpress.org/ohryan/\">Ryan Neudorf</a> · <a href=\"https://profiles.wordpress.org/welcher/\">Ryan Welcher</a> · <a href=\"https://profiles.wordpress.org/sergiomdgomes/\">S&#233;rgio Gomes</a> · <a href=\"https://profiles.wordpress.org/mi5t4n/\">Sagar Tamang</a> · <a href=\"https://profiles.wordpress.org/sajjad67/\">Sajjad Hossain Sagor</a> · <a href=\"https://profiles.wordpress.org/sakibmd/\">Sakib Mohammed</a> · <a href=\"https://profiles.wordpress.org/salcode/\">Sal Ferrarello</a> · <a href=\"https://profiles.wordpress.org/samba45/\">samba45</a> · <a href=\"https://profiles.wordpress.org/karmacharya50/\">Samir Karmacharya</a> · <a href=\"https://profiles.wordpress.org/viralsampat/\">Sampat Viral</a> · <a href=\"https://profiles.wordpress.org/otto42/\">Samuel Wood (Otto)</a> · <a href=\"https://profiles.wordpress.org/mikachan/\">Sarah Norris</a> · <a href=\"https://profiles.wordpress.org/sarahwilliams889/\">Sarah Williams</a> · <a href=\"https://profiles.wordpress.org/sarathar/\">Sarath AR</a> · <a href=\"https://profiles.wordpress.org/satishprajapati/\">Satish Prajapati</a> · <a href=\"https://profiles.wordpress.org/saulirajala/\">saulirajala</a> · <a href=\"https://profiles.wordpress.org/saxonfletcher/\">saxonfletcher</a> · <a href=\"https://profiles.wordpress.org/sc0ttkclark/\">Scott Kingsley Clark</a> · <a href=\"https://profiles.wordpress.org/coffee2code/\">Scott Reilly</a> · <a href=\"https://profiles.wordpress.org/wonderboymusic/\">Scott Taylor</a> · <a href=\"https://profiles.wordpress.org/hiyascout/\">Scout James</a> · <a href=\"https://profiles.wordpress.org/scribu/\">scribu</a> · <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">Sergey Biryukov</a> · <a href=\"https://profiles.wordpress.org/seedsca/\">Sergio Scabuzzo</a> · <a href=\"https://profiles.wordpress.org/smrubenstein/\">Seth Rubenstein</a> · <a href=\"https://profiles.wordpress.org/shailu25/\">Shail Mehta</a> · <a href=\"https://profiles.wordpress.org/shawfactor/\">shawfactor</a> · <a href=\"https://profiles.wordpress.org/shooper/\">Shawn Hooper</a> · <a href=\"https://profiles.wordpress.org/shiloey/\">shilo-ey</a> · <a href=\"https://profiles.wordpress.org/shivashankerbhatta/\">Shiva Shanker Bhatta</a> · <a href=\"https://profiles.wordpress.org/shresthaaman/\">shresthaaman</a> · <a href=\"https://profiles.wordpress.org/shubhamsedani/\">Shubham Sedani</a> · <a href=\"https://profiles.wordpress.org/10upsimon/\">Simon Dowdles</a> · <a href=\"https://profiles.wordpress.org/siobhan/\">Siobhan</a> · <a href=\"https://profiles.wordpress.org/siobhyb/\">Siobhan Bamber</a> · <a href=\"https://profiles.wordpress.org/smit08/\">Smit Rathod</a> · <a href=\"https://profiles.wordpress.org/sofiashendi/\">sofiashendi</a> · <a href=\"https://profiles.wordpress.org/nudge/\">Sonia Gaballa</a> · <a href=\"https://profiles.wordpress.org/soean/\">Soren Wrede</a> · <a href=\"https://profiles.wordpress.org/virtality-marketing-solutions/\">SourceView</a> · <a href=\"https://profiles.wordpress.org/spenserhale/\">Spenser Hale</a> · <a href=\"https://profiles.wordpress.org/pypwalters/\">Stephanie Walters</a> · <a href=\"https://profiles.wordpress.org/sabernhardt/\">Stephen Bernhardt</a> · <a href=\"https://profiles.wordpress.org/netweb/\">Stephen Edgar</a> · <a href=\"https://profiles.wordpress.org/stephenerdelyi/\">Steve Erdelyi</a> · <a href=\"https://profiles.wordpress.org/stevejonesdev/\">Steve Jones</a> · <a href=\"https://profiles.wordpress.org/subodhsun/\">Subodh Sunuwar</a> · <a href=\"https://profiles.wordpress.org/subrataemfluence/\">Subrata Sarkar</a> · <a href=\"https://profiles.wordpress.org/sujichandran14/\">Suji K Chandran</a> · <a href=\"https://profiles.wordpress.org/sumisubedi/\">Sumi Subedi</a> · <a href=\"https://profiles.wordpress.org/sumitbagthariya16/\">Sumit Bagthariya</a> · <a href=\"https://profiles.wordpress.org/sumitsingh/\">Sumit Singh</a> · <a href=\"https://profiles.wordpress.org/sunitarai/\">Sunita Rai</a> · <a href=\"https://profiles.wordpress.org/suprsam/\">suprsam</a> · <a href=\"https://profiles.wordpress.org/syamraj24/\">syamraj24</a> · <a href=\"https://profiles.wordpress.org/cybr/\">Sybre Waaijer</a> · <a href=\"https://profiles.wordpress.org/synchro/\">Synchro</a> · <a href=\"https://profiles.wordpress.org/sereedmedia/\">Sé Reed</a> · <a href=\"https://profiles.wordpress.org/tacoverdo/\">Taco Verdonschot</a> · <a href=\"https://profiles.wordpress.org/tahmidulkarim/\">Tahmid ul Karim</a> · <a href=\"https://profiles.wordpress.org/tahmina1du/\">Tahmina Jahan</a> · <a href=\"https://profiles.wordpress.org/takayukister/\">Takayuki Miyoshi</a> · <a href=\"https://profiles.wordpress.org/karmatosed/\">Tammie Lister</a> · <a href=\"https://profiles.wordpress.org/tanvirul/\">Tanvirul Haque</a> · <a href=\"https://profiles.wordpress.org/tykoted/\">Teddy Patriarca</a> · <a href=\"https://profiles.wordpress.org/tejadev/\">tejadev</a> · <a href=\"https://profiles.wordpress.org/thinkluke/\">thinkluke</a> · <a href=\"https://profiles.wordpress.org/thomasplevy/\">Thomas Patrick Levy</a> · <a href=\"https://profiles.wordpress.org/tibbsa/\">tibbsa</a> · <a href=\"https://profiles.wordpress.org/baxbridge/\">Tiffany Bridge</a> · <a href=\"https://profiles.wordpress.org/tnolte/\">Tim Nolte</a> · <a href=\"https://profiles.wordpress.org/timdix/\">timdix</a> · <a href=\"https://profiles.wordpress.org/timothyblynjacobs/\">Timothy Jacobs</a> · <a href=\"https://profiles.wordpress.org/tmatsuur/\">tmatsuur</a> · <a href=\"https://profiles.wordpress.org/tobiasbg/\">TobiasBg</a> · <a href=\"https://profiles.wordpress.org/tobifjellner/\">tobifjellner (Tor-Bjorn Fjellner)</a> · <a href=\"https://profiles.wordpress.org/tomybyte/\">Tom</a> · <a href=\"https://profiles.wordpress.org/tomjcafferkey/\">Tom Cafferkey</a> · <a href=\"https://profiles.wordpress.org/thomashorta/\">Tom H</a> · <a href=\"https://profiles.wordpress.org/tjnowell/\">Tom J Nowell</a> · <a href=\"https://profiles.wordpress.org/tomluckies/\">tomluckies</a> · <a href=\"https://profiles.wordpress.org/shimotomoki/\">Tomoki Shimomura</a> · <a href=\"https://profiles.wordpress.org/tomsommer/\">tomsommer</a> · <a href=\"https://profiles.wordpress.org/starbuck/\">Tony G</a> · <a href=\"https://profiles.wordpress.org/hellofromtonya/\">Tonya Mork</a> · <a href=\"https://profiles.wordpress.org/toro_unit/\">Toro_Unit (Hiroshi Urabe)</a> · <a href=\"https://profiles.wordpress.org/zodiac1978/\">Torsten Landsiedel</a> · <a href=\"https://profiles.wordpress.org/toscho/\">toscho</a> · <a href=\"https://profiles.wordpress.org/rilwis/\">Tran Ngoc Tuan Anh</a> · <a href=\"https://profiles.wordpress.org/trinisha/\">Trinisha</a> · <a href=\"https://profiles.wordpress.org/trishasalas/\">Trisha Salas</a> · <a href=\"https://profiles.wordpress.org/tristanleboss/\">tristanleboss</a> · <a href=\"https://profiles.wordpress.org/tv-productions/\">TV productions</a> · <a href=\"https://profiles.wordpress.org/ugyensupport/\">Ugyen Dorji</a> · <a href=\"https://profiles.wordpress.org/grapplerulrich/\">Ulrich</a> · <a href=\"https://profiles.wordpress.org/benimub/\">Umesh Balayar</a> · <a href=\"https://profiles.wordpress.org/upadalavipul/\">Upadala Vipul</a> · <a href=\"https://profiles.wordpress.org/utsav72640/\">Utsav tilava</a> · <a href=\"https://profiles.wordpress.org/valentindu62/\">valentindu62</a> · <a href=\"https://profiles.wordpress.org/valmedia2023/\">Valerie Blackburn</a> · <a href=\"https://profiles.wordpress.org/vcanales/\">Vicente Canales</a> · <a href=\"https://profiles.wordpress.org/szepeviktor/\">Viktor Sz&#233;pe</a> · <a href=\"https://profiles.wordpress.org/vipuljnext/\">Vipul Ghori</a> · <a href=\"https://profiles.wordpress.org/vivekawsm/\">vivekawsm</a> · <a href=\"https://profiles.wordpress.org/vortfu/\">vortfu</a> · <a href=\"https://profiles.wordpress.org/vrajadas/\">Vraja Das</a> · <a href=\"https://profiles.wordpress.org/webashrafians/\">webashrafians</a> · <a href=\"https://profiles.wordpress.org/webmandesign/\">WebMan Design &#124; Oliver Juhas</a> · <a href=\"https://profiles.wordpress.org/westonruter/\">Weston Ruter</a> · <a href=\"https://profiles.wordpress.org/whsajid/\">WHSajid</a> · <a href=\"https://profiles.wordpress.org/skorasaurus/\">Will Skora</a> · <a href=\"https://profiles.wordpress.org/earnjam/\">William Earnhardt</a> · <a href=\"https://profiles.wordpress.org/wvega/\">Willington Vega</a> · <a href=\"https://profiles.wordpress.org/planningwrite/\">Winstina</a> · <a href=\"https://profiles.wordpress.org/winterstreet/\">winterstreet</a> · <a href=\"https://profiles.wordpress.org/wraithkenny/\">WraithKenny</a> · <a href=\"https://profiles.wordpress.org/wyrfel/\">wyrfel</a> · <a href=\"https://profiles.wordpress.org/yosephtamang/\">Yoseph Tamang</a> · <a href=\"https://profiles.wordpress.org/fierevere/\">Yui</a> · <a href=\"https://profiles.wordpress.org/zieladam/\">zieladam</a> · <a href=\"https://profiles.wordpress.org/zunaid321/\">Zunaid Amin</a> · <a href=\"https://profiles.wordpress.org/letraceursnork/\">Илья</a></p>\n\n\n\n<p>Over <a href=\"https://translate.wordpress.org/stats/\">60 locales have translated 90 percent</a> or more of WordPress 6.4 into their language. Community translators are working hard to ensure more translations are on their way. Thank you to everyone who helps make WordPress available in 200 languages.</p>\n\n\n\n<p>Last but not least, thanks to the volunteers who contribute to the <a href=\"https://wordpress.org/support/\">support forums</a> by answering questions from WordPress users worldwide.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Get involved</h3>\n\n\n\n<p>Participation in WordPress is not limited to coding. If contributing appeals to you, learning more and getting involved is easy. Discover the teams that come together to <a href=\"https://make.wordpress.org/\">Make WordPress</a>, and use <a href=\"https://make.wordpress.org/contribute/\">this interactive tool</a> to help you decide which is right for you.</p>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Looking ahead</h2>\n\n\n\n<p>Over the past <a href=\"https://wp20.wordpress.net/\">two decades</a>, WordPress has transformed the digital publishing landscape and empowered anyone to create and share, from <a href=\"https://wordpress.org/showcase/\">handcrafted personal stories to world-changing movements</a>.</p>\n\n\n\n<p>The present and future of WordPress hold exciting opportunities for everyone, builders and enterprises alike. The foundational work for <a href=\"https://make.wordpress.org/core/tag/phase-3/\">Phase 3</a> of the <a href=\"https://wordpress.org/about/roadmap/\">roadmap</a> continues, with efforts focused on fostering real-time collaboration and streamlining publishing flows to improve how creators and teams work together in WordPress.</p>\n\n\n\n<p>Stay on top of the latest news and contributing opportunities by subscribing to <a href=\"https://wordpress.org/news/\">WordPress News</a> and the <a href=\"https://wordpress.org/news/podcast/\">WP Briefing podcast</a>.</p>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">A release haiku</h2>\n\n\n\n<p>The smooth feel of jazz<br>The cutting-edge of the web<br>Install 6.4</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16299\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:66:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 6.4 Release Candidate 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2023/11/wordpress-6-4-release-candidate-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 01 Nov 2023 19:21:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:11:\"development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16247\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:163:\"WordPress 6.4 RC3 is ready for download and testing. Reaching this phase of the release cycle is an important milestone. Check out what\'s new and how you can help.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Reyes Martínez\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8230:\"\n<p>The third release candidate (RC3) for WordPress 6.4 is ready to download!</p>\n\n\n\n<p><strong>This version of the WordPress software is under development</strong>. Please do not install, run, or test this version of WordPress on production or mission-critical websites. Instead, it’s recommended that you evaluate RC3 on a test server and site.</p>\n\n\n\n<p>WordPress 6.4 is <a href=\"https://make.wordpress.org/core/6-4/\">slated for release</a> on <strong>November 7, 2023</strong>—less than a week away. If you haven’t tried it, now is the time.</p>\n\n\n\n<p>You can test WordPress 6.4 RC3 in three ways:</p>\n\n\n\n<ol>\n<li><strong>Plugin</strong>: Install and activate the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin on a WordPress install (select the “Bleeding edge” channel and “Beta/RC Only” stream).</li>\n\n\n\n<li><strong>Direct download</strong>: Download the <a href=\"https://wordpress.org/wordpress-6.4-RC3.zip\">RC3 version (zip)</a> and install it on a WordPress site.</li>\n\n\n\n<li><strong>Command line</strong>: Use the following <a href=\"https://make.wordpress.org/cli/\">WP-CLI</a> command:<br><code>wp core update --version=6.4-RC3</code></li>\n</ol>\n\n\n\n<p><a href=\"https://wordpress.org/news/2023/10/wordpress-6-4-release-candidate-1/\">Read the RC1 announcement</a> for featured highlights, and check the <a href=\"https://make.wordpress.org/core/\">Make WordPress Core blog</a> for <a href=\"https://make.wordpress.org/core/tag/6-4/\">6.4-related posts</a>. If you are looking for detailed technical notes on new features and improvements, the <a href=\"https://make.wordpress.org/core/2023/10/23/wordpress-6-4-field-guide/\"><strong>WordPress 6.4 Field Guide</strong></a> is for you.</p>\n\n\n\n<p>The WordPress 6.4 release is brought to you by an <a href=\"https://make.wordpress.org/core/2023/06/05/wordpress-6-4-development-cycle/\">underrepresented gender release squad</a> to welcome the participation and partnership of those who identify as gender-underrepresented in the WordPress open source project.</p>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">What’s in WordPress 6.4 RC3?</h2>\n\n\n\n<p>Thanks to everyone who has tested the beta and RC releases. Since RC2 was released on October 24, there have been more than 25 issues resolved. You can browse the technical details for all recent updates using these links:</p>\n\n\n\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/commits/wp/6.4\">GitHub commits for 6.4</a></li>\n\n\n\n<li><a href=\"https://core.trac.wordpress.org/query?status=closed&amp;changetime=10%2F25%2F2023..11%2F01%2F2023&amp;milestone=6.4&amp;col=id&amp;col=milestone&amp;col=owner&amp;col=type&amp;col=priority&amp;order=id\">Closed Trac tickets since RC2</a></li>\n\n\n\n<li><a href=\"https://github.com/WordPress/twentytwentyfour/commits/\">GitHub commits for Twenty Twenty-Four</a></li>\n</ul>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">PHP compatibility update</h2>\n\n\n\n<p>It’s recommended to use PHP 8.1 or 8.2 with the upcoming 6.4 release. Refer to <a href=\"https://wordpress.org/news/2023/10/wordpress-6-4s-php-compatibility/\">WordPress 6.4&#8217;s PHP compatibility post</a> for more details.</p>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Contributing to 6.4</h2>\n\n\n\n<p>WordPress is open source software made possible by a community of people collaborating on and contributing to its development. The resources below outline various ways you can help, regardless of your technical expertise.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Get involved in testing</h3>\n\n\n\n<p>Your feedback and help in testing are vital to developing the WordPress software and ensuring its quality. It’s also a meaningful way for anyone to contribute. <a href=\"https://make.wordpress.org/test/2023/09/26/help-test-wordpress-6-4/\">Check out this guide</a> for instructions on testing WordPress 6.4 features.</p>\n\n\n\n<p>The core Query block requires more <a href=\"https://make.wordpress.org/test/2023/09/26/help-test-wordpress-6-4/#query-loop-block-pagination-enhancements\">testing and feedback</a> to ensure the latest changes to prevent full page reloads work smoothly. Please note that this setting was called &#8220;Enhanced pagination&#8221; but has recently been renamed, and it&#8217;s now referred to as &#8220;Force page reload&#8221; instead.</p>\n\n\n\n<p>If you encounter an issue, please report it to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta area</a> of the support forums or directly to <a href=\"https://core.trac.wordpress.org/newticket\">WordPress Trac</a> if you are comfortable writing a reproducible bug report. You can also check your issue against a list of <a href=\"https://core.trac.wordpress.org/tickets/major\">known bugs</a>.</p>\n\n\n\n<p>Curious about testing releases in general? Follow along with the <a href=\"https://make.wordpress.org/test/\">testing initiatives in Make Core</a> and join the <a href=\"https://wordpress.slack.com/messages/core-test/\">#core-test channel</a> on <a href=\"https://wordpress.slack.com/\">Making WordPress Slack</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Search for vulnerabilities</h3>\n\n\n\n<p>During the release candidate phase of WordPress 6.4, the <a href=\"https://make.wordpress.org/security/2023/09/26/bug-bounty-for-wordpress-6-4-beta/\">monetary reward for reporting new, unreleased security vulnerabilities</a> is doubled. Please follow responsible disclosure practices as detailed in the project’s security practices and policies outlined on the <a href=\"https://hackerone.com/wordpress\">HackerOne page</a> and in the <a href=\"https://wordpress.org/about/security/\">security white paper</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Update your theme or plugin</h3>\n\n\n\n<p>Do you build themes and plugins? Your products play an integral role in extending the functionality and value of WordPress for users worldwide.</p>\n\n\n\n<p>Hopefully, you have already tested your themes and plugins with WordPress 6.4 betas. With RC3, you will want to continue your testing and update the <em>&#8220;Tested up to&#8221;</em> version in your <a href=\"https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/\">plugin&#8217;s readme file</a> to 6.4.</p>\n\n\n\n<p>Please post detailed information to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">support forums</a> if you find compatibility issues.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Documentation</h3>\n\n\n\n<p>Help the Docs team put the finishing touches on end-user documentation in time for the 6.4 release. Find out what’s needed and how you can help <a href=\"https://make.wordpress.org/docs/2023/10/25/call-for-volunteers-to-help-with-6-4-end-user-documentation/\">in this post</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Help translate WordPress</h3>\n\n\n\n<p>Do you speak a language other than English? ¿Español? Français? Português? Русский? 日本? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help translate WordPress into more than 100 languages</a>.</p>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">A RC3 haiku</h2>\n\n\n\n<p>One more week of prep<br>One more week to test the code<br>One more week til launch</p>\n\n\n\n<p><em>Thank you to the following contributors for collaborating on this post: <a href=\'https://profiles.wordpress.org/meher/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>meher</a>, <a href=\'https://profiles.wordpress.org/rmartinezduque/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>rmartinezduque</a>, <a href=\'https://profiles.wordpress.org/sereedmedia/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>sereedmedia</a>, <a href=\'https://profiles.wordpress.org/jorbin/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>jorbin</a>, <a href=\'https://profiles.wordpress.org/luisherranz/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>luisherranz</a>, <a href=\'https://profiles.wordpress.org/marybaum/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>marybaum</a></em>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16247\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:61:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"WP Briefing: Episode 65: Little Sun Success\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2023/10/episode-65-little-sun-success/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 30 Oct 2023 12:00:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"Podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:11:\"wp-briefing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/news/?post_type=podcast&p=16227\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:340:\"Join WordPress Executive Director, Josepha Haden Chomphosy, as she looks at a recent WordPress success story with Little Sun. To help us, we spoke to two special guests with Little Sun, Romane Guégan, Senior Press and Communications Manager, and Ashley Mrozek, Senior Digital Manager. Don’t miss this opportunity for an insider’s look!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:51:\"https://wordpress.org/news/files/2023/10/WPB065.mp3\";s:6:\"length\";s:1:\"0\";s:4:\"type\";s:0:\"\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brett McSherry\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:21512:\"\n<p>Join WordPress Executive Director Josepha Haden Chomphosy as she looks at a recent WordPress success story, the clean energy solution Little Sun, and learns about their WordPress story.</p>\n\n\n\n<p><em><strong>Have a question you&#8217;d like answered? You can submit them to&nbsp;<a href=\"mailto:wpbriefing@wordpress.org\">wpbriefing@wordpress.org</a>, either written or as a voice recording.</strong></em></p>\n\n\n\n<h2 class=\"wp-block-heading\">Credits</h2>\n\n\n\n<p>Host:&nbsp;<a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden Chomphosy</a><br>Special Guest: Romane Guégan<br>Special Guest: Ashley Mrozek <br>Editor:&nbsp;<a href=\"https://profiles.wordpress.org/dustinhartzler/\">Dustin Hartzler</a><br>Logo:&nbsp;<a href=\"https://profiles.wordpress.org/javiarce/\">Javier Arce</a><br>Production:&nbsp;<a href=\"https://profiles.wordpress.org/bjmcsherry/\">Brett McSherry</a><br>Song: Fearless First by Kevin MacLeod</p>\n\n\n\n<h2 class=\"wp-block-heading\">Show Notes</h2>\n\n\n\n<ul>\n<li>Website: <a href=\"https://littlesun.org/\">Little Sun</a></li>\n\n\n\n<li><strong>Small List of Big Things</strong>\n<ul>\n<li><a href=\"https://wordpress.org/news/2023/10/state-of-the-word-2023/\" target=\"_blank\" rel=\"noreferrer noopener\">State of the Word</a> &#8211; This year&#8217;s annual keynote, State of the Word, will be on December 11. Save the date to hear the WordPress project&#8217;s co-founder, <a href=\"https://ma.tt/\" target=\"_blank\" rel=\"noreferrer noopener\">Matt Mullenweg</a>, share reflections on the project&#8217;s progress and aspirations for the future of open source.</li>\n\n\n\n<li>Celebrating 10,000 Photos in the <a href=\"https://wordpress.org/photos/\">WordPress Photo Directory</a> &#8211; On October 11, the 10,000th photo was approved! <a href=\"https://make.wordpress.org/photos/\" target=\"_blank\" rel=\"noreferrer noopener\">The Photo Team</a> is one of the newest ways to contribute to the WordPress open source project. </li>\n\n\n\n<li><a href=\"https://make.wordpress.org/community/2023/10/18/community-team-training-11-using-the-translate-live-tool/\" target=\"_blank\" rel=\"noreferrer noopener\">Community Team Training #11: Using the Translate Live tool</a>&nbsp;&#8211; Uncover the potential of the &#8220;Translate Live&#8221; tool, which is ideal for presenting at local meetups to engage and onboard new translators for your native language. If you&#8217;re organizing a WordCamp, consider introducing this tool during your Contributor Day.</li>\n\n\n\n<li><a href=\"https://wordpress.org/news/2023/10/a-new-wordpress-showcase/\" target=\"_blank\" rel=\"noreferrer noopener\">A New WordPress Showcase</a>&nbsp;&#8211; The&nbsp;journey to update&nbsp;<a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noreferrer noopener\">WordPress.org</a>&nbsp;continues with the launch of a new&nbsp;<a href=\"https://wordpress.org/showcase/\" target=\"_blank\" rel=\"noreferrer noopener\">Showcase</a>&nbsp;design. The Showcase is a natural starting point for visitors arriving on&nbsp;WordPress.org, and it both inspires creativity and demonstrates what&#8217;s possible with WordPress.</li>\n</ul>\n</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Transcript</h2>\n\n\n\n<span id=\"more-16227\"></span>\n\n\n\n<p>[00:00:00] <strong>Josepha:</strong> Hello everyone, and welcome to the WordPress Briefing. The podcast where you can catch quick explanations of the ideas behind the WordPress open source project, some insight into the community that supports it, and get a small list of big things coming up in the next two weeks. I&#8217;m your host, Josepha Haden Chomphosy. Here we go.</p>\n\n\n\n<p>[00:00:28] (Intro music)&nbsp;</p>\n\n\n\n<p>[00:00:40] <strong>Josepha:</strong> Today, I&#8217;ve got a special guest with me. I have here a couple of folks from Little Sun, a nonprofit organization that recently moved its entire online presence to WordPress. And we&#8217;re talking everything from their mission statement and donations all the way to their blog and shop.</p>\n\n\n\n<p>Welcome both to the WordPress Briefing.&nbsp;</p>\n\n\n\n<p>[00:00:59] <strong>Ashley:</strong> Thank you.</p>\n\n\n\n<p>[00:01:00] <strong>Romane:</strong> Thank you.&nbsp;</p>\n\n\n\n<p>[00:01:01] <strong>Josepha:</strong> We have with us Little Sun today. Can you start by introducing yourselves and your organization? Just tell us a little bit about what you all do.&nbsp;</p>\n\n\n\n<p>[00:01:08] <strong>Romane:</strong> Hi, my name is Romane Guégan. I&#8217;m a Senior Press and Communications Manager at Little Sun.&nbsp;</p>\n\n\n\n<p>[00:01:14] <strong>Ashley:</strong> And I am Ashley Mrozek. I&#8217;m the Senior Digital Manager.&nbsp;</p>\n\n\n\n<p>[00:01:17] <strong>Josepha:</strong> So what does Little Sun do for the folks who are listening and maybe don&#8217;t know about it yet?&nbsp;</p>\n\n\n\n<p>[00:01:22] <strong>Romane:</strong> Little Sun brings full power and light to communities that live off the grid, with the focus on sub-Saharan Africa because most of the people who lack access to electricity and need them. And we also inspire people to take climate action globally.&nbsp;</p>\n\n\n\n<p>[00:01:39] <strong>Ashley:</strong> So access to solar energy helps kids who don&#8217;t have electricity and study at night. They can complete their homework at night. If their schools are in a more rural area, they will have a light to kind of guide them back home.</p>\n\n\n\n<p>We also work on a lot of electric vocation projects and hospitals. So we&#8217;re, we&#8217;re kind of supporting labors that are, are taking place in the evening, after the sun goes down, among other things.&nbsp;</p>\n\n\n\n<p>[00:02:07] <strong>Josepha:</strong> Yeah. It&#8217;s, I, I think that that is one of the things that folks, probably most of my listeners, probably take for granted, like the easy access to light. And as we all know, the sun is around a lot. And so that is one of our most readily available resources other than potentially wind power. But I think that that is a great mission. And I really think that that&#8217;s wonderful work that y&#8217;all are doing.</p>\n\n\n\n<p>So, is there a particular reason that you focus on sub-Saharan Africa? Is that where you find a majority of people who don&#8217;t have access to that kind of resource are?&nbsp;</p>\n\n\n\n<p>[00:02:43] <strong>Romane:</strong> Yeah. 70% of those people actually need in sub-Saharan Africa, where solar is actually a viable source of energy. Actually, it&#8217;s only 1% of solar, of the solar capital of the generation when we actually deliver solar energy there because there is so much potential.</p>\n\n\n\n<p>[00:03:04] <strong>Josepha:</strong> That&#8217;s amazing. So you said that you all were funded in 2012. I imagine that your business has evolved over time. So, obviously, you all are WordPress users. That&#8217;s why we have you here with us today. But before we get into the questions about WordPress itself. Why don&#8217;t you tell us a bit about how your business needs evolved over time and how you wound up needing a solution that did use WordPress?</p>\n\n\n\n<p>[00:03:31] <strong>Ashley:</strong> So I would say our focus and kind of the different initiatives that we&#8217;ve taken on since 2012 have shifted a lot based on various reasons, where our donors are, where we&#8217;ve kind of found the most need, and where we can be the most impactful.</p>\n\n\n\n<p>And I think as we go into those new geographies, our online presence has become more and more important.&nbsp;</p>\n\n\n\n<p>[00:03:55] <strong>Josepha:</strong> So, before you all switched to WordPress, I understand that you had several sites that you had to merge into one. And so I assume that as you evolved the business and your focus has changed, you realized you needed something a bit more streamlined. So, how was that transition, that migration from a lot of different sites to one big site?&nbsp;</p>\n\n\n\n<p>[00:04:17] <strong>Romane:</strong> Yeah, because we started as a global project. And then, with the time, we evolved, actually also getting new donations. And in the past, we used to have one website where we have our webshop and our mission, our vision, all of our project descriptions.</p>\n\n\n\n<p>But then we had another website only for the foundation. And then you had another foundation in the U.S. So it was the question, okay, how do we put everything together? So we actually switched from littlesun.com to littlesun.org with WordPress, and it was amazing to see how we managed with the team to create an ecosystem approach, including impact, but also sales, and fundraising.&nbsp;</p>\n\n\n\n<p>[00:05:02] <strong>Josepha:</strong> That was a big footprint that you all had, and you kind of consolidated it into one. And for all of our folks listening on the podcast, I&#8217;m going to include some links, not only to their site but then also to a few other things that we&#8217;ve mentioned in here today. So, since you made that change, how has it, how has that impacted the way that you all work with your site or with your online presence?</p>\n\n\n\n<p>[00:05:27] <strong>Ashley:</strong> Yeah, I think using WordPress and having access to WordPress has been hugely valuable for us. We&#8217;re a small team, we&#8217;re a nonprofit, so it is pretty scrappy. Everyone is kind of doing a lot of different things. We don&#8217;t have a dedicated development team. And so being able to easily customize our pages and create new landing pages or make adjustments on the site without that development help has been valuable.</p>\n\n\n\n<p>[00:05:55] <strong>Josepha:</strong> Yeah, so you don&#8217;t have a developer team now. Did you have a developer team when you had all the sites?&nbsp;</p>\n\n\n\n<p>[00:06:01] <strong>Romane:</strong> We just still work with freelancers. </p>\n\n\n\n<p>[00:06:03] <strong>Josepha:</strong> Okay, yeah. I am also not a developer, for what it&#8217;s worth, and have been working with nonprofits for a while. And I understand that problem where you have all these things you need to do and want to do, but there are also things you absolutely have to focus on in order to make your mission possible and your vision come true.</p>\n\n\n\n<p>[00:06:23] <strong>Ashley:</strong> Yeah, and I think, I think WordPress has given us a lot more, like a lot more flexibility to kind of produce new content quickly. And because of that, it&#8217;s just been a lot more efficient, too, for us, you know.&nbsp;</p>\n\n\n\n<p>[00:06:38] <strong>Josepha:</strong> And you all are using Blocks? Are you, like, the best Block builders?</p>\n\n\n\n<p>[00:06:42] <strong>Romane:</strong> Yeah, I love Blocks.&nbsp;</p>\n\n\n\n<p>[00:06:43] <strong>Josepha:</strong> Blocks are a fairly new innovation for the history of WordPress. WordPress has been around for 20 years, so we&#8217;re a nice, mature project. And we&#8217;ve really only had blocks as a functional part of the CMS for probably the last five or so. We&#8217;ve been working on the project a little bit longer. And it has been fascinating to me, like, in my own work that I have done with WordPress, kind of outside of my work with the project, to see, like, how much autonomy you get to have back as somebody who is not a developer, maybe isn&#8217;t a designer, but you do know exactly what you need to have on your site today, right?</p>\n\n\n\n<p>And having to stop and find a freelancer or stop and find some set of developers who can make those changes. For me, when I was specifically working on nonprofit stuff. That was always kind of a moment where I was like, well, I guess I&#8217;ll just go to Facebook and put that on there or something because I was faster than trying to find someone to come help you. And so, I&#8217;m so glad you love the block.</p>\n\n\n\n<p>[00:07:48] <strong>Ashley:</strong> We&#8217;ve created many a landing page.&nbsp;</p>\n\n\n\n<p>[00:07:50] <strong>Josepha:</strong> Also, your site is adorable, and your brand is adorable, in case no one&#8217;s mentioned that lately. Super cute. Super cute.</p>\n\n\n\n<p>[00:07:58] <strong>Josepha:</strong> So, we&#8217;ve talked about how you kind of took a bunch of stuff and made it into one big thing and how that&#8217;s been easier for you all to manage it. But from the standpoint of just, like, somebody who&#8217;s running a nonprofit, someone who&#8217;s running an organization, how has that transition been for your team? I know you said you don&#8217;t have a huge team, but was the move toward WordPress a net benefit over time, or was it immediately beneficial? Like, how has that been for your team? </p>\n\n\n\n<p>[00:08:27] <strong>Romane:</strong> So what&#8217;s interesting actually is that we have a team that is spread also all over the world. And so we have teams in Berlin and in U.S., and New York. In Zambia, too. What was really interesting was how people identify to the new website because now we have to really think, okay, what is the content we want people to see, but also we want our critics to see. And so it kind of unified all of our content at Little Sun. And it was much more like much easier to understand afterwards. </p>\n\n\n\n<p>[00:09:03] <strong>Josepha:</strong> Yeah.&nbsp;</p>\n\n\n\n<p>[00:09:04] <strong>Romane:</strong> And it was because we also work at the intersection of creative communications, impacts, fundraising, technology, and to be able to put everything and have it on the front. And then have the stories to tell the stories from sub-Saharan Africa, from universities who got either a Little Sun lamps or solar systems, and then we have the donation page, so basically everything could be integrated in a super easy way, and it could target different audiences easily, either it&#8217;s someone who wants to partner with us, or a donor, or just someone who wants to be part of our solar training.</p>\n\n\n\n<p>[00:09:46] <strong>Josepha:</strong> Yeah, and I mean, I think that no one will be surprised to hear that if you have multiple things that you have to get everybody to, it really increases the amount of marketing that you have to accomplish, rather than having one place for everyone to go too, and they can see everything that they might want once they arrive. So, that&#8217;s wonderful.</p>\n\n\n\n<p>[00:10:06] <strong>Ashley:</strong> I think I was just going to say, or kind of echo what Romane said about the fact that we have so many different audiences, we have partners, we have donors, we have people who are just coming to learn about solar energy, or who are interested in purchasing a lamp. I think prior to this, it was a little bit confusing for those different audiences to kind of navigate to where they were intended to go to on the site, and now it&#8217;s much more cohesive. And we often hear that from people where it&#8217;s like, it&#8217;s quite easy to, to kind to find what they need to find on the site.&nbsp;</p>\n\n\n\n<p>[00:10:39] <strong>Josepha:</strong> I define the WordPress community as anyone who is using WordPress, regardless of whether they know it or not. And so you all, in my mind, are part of the WordPress Community. And I just wondered if being part of that community has changed your approach to the way that you manage your content online or the way that you have chosen work with your business as like an online entity that also does on-the-ground, in-person thing?</p>\n\n\n\n<p>[00:11:06] <strong>Ashley:</strong> I think definitely. I think we&#8217;re kind of going back to what I said before. I think we&#8217;re much more efficient now. I think in the past, it&#8217;s the idea of, like, well, getting this web page live or publishing this is going to be, you know, we have to think about a huge timeline, that&#8217;s, is going to require a lot of resourcing, a lot of different types of expertise and people, and everything now feels like something that we can, we can launch pretty immediately, which is really wonderful too.</p>\n\n\n\n<p>I would also say just like being a part of the WordPress community too. It&#8217;s the sort of support that we&#8217;ve gotten from your team. It&#8217;s always really tailored. And I think as a nonprofit working with a, like, a much bigger business, you can be apprehensive sometimes, feeling like you won&#8217;t really get that personalized support.&nbsp;</p>\n\n\n\n<p>And I think that&#8217;s something that&#8217;s been so nice with WordPress. Is really feeling like the people we&#8217;re working with are understanding our business and taking the time to understand our needs. And I think that makes us think differently about our online presence as well because then we feel like we have that additional support, which is great.</p>\n\n\n\n<p>[00:12:12] <strong>Josepha:</strong> I&#8217;m always a fan of hearing that people who are passionate about WordPress are also passionate about helping others with WordPress. That&#8217;s one of my favorite things about us. That&#8217;s not true. I have like 25 favorite things about us. And so I need to stop saying that I have one favorite, but I never will.</p>\n\n\n\n<p>Okay, well, do you all have any last thoughts that you just want to share with me or podcast listeners that we have?&nbsp;</p>\n\n\n\n<p>[00:12:36] <strong>Ashley:</strong> Yeah, I think the, the plugins and integrations have been really useful for us. I think it can be really intimidating to bring on, like, a new tech solution or tool and feel like everything that you are already working with or have is going to become outdated or obsolete in some way. And I think it&#8217;s just been really nice to work with WordPress and have all of those transitions be really seamless for everything to connect really well. Yeah, I think that&#8217;s been. That&#8217;s hugely helpful too.&nbsp;</p>\n\n\n\n<p>[00:13:07] <strong>Josepha:</strong> So, was that part of the decision-making process? Like, do I know that this software will be around in the future so that you&#8217;re making an investment in the site now and know that it&#8217;s going to hang around now you can find people help? Like, was that part of the decision-making process?</p>\n\n\n\n<p>[00:13:21] <strong>Ashley:</strong> I think so. I mean, I guess I wasn&#8217;t completely around during the time, but I would say, like, that&#8217;s definitely something that we&#8217;re considering in any kind of tech that we&#8217;re thinking about is it can require so much work to, to kind of bring something on with such a small team. So we want to ensure that, yeah, it&#8217;s going to last, it has longevity, and it&#8217;s going to work with the tools that we already have. So I think all of that is really important for sure.&nbsp;</p>\n\n\n\n<p>[00:13:48] <strong>Josepha:</strong> Well, thank you both so much for joining me. Like I said, we&#8217;ll have a link to littlesun.org in the notes so that you all can learn more about their project and see their beautiful site with their beautiful little solar sunflowers.</p>\n\n\n\n<p>Thank you both for being with me today.&nbsp;</p>\n\n\n\n<p>[00:14:04] <strong>Romane:</strong> Thank you so much.&nbsp;</p>\n\n\n\n<p>[00:14:05] <strong>Ashley:</strong> Thank you so much for having us.</p>\n\n\n\n<p>[00:14:07] (Music interlude)</p>\n\n\n\n<p>[00:14:11] <strong>Josepha:</strong> What a wonderful organization. I&#8217;m so glad that they found WordPress and that it works for them. Let&#8217;s continue our tour today with the small list of big things.</p>\n\n\n\n<p>Item number one, it&#8217;s time to save the date: December 11th, 2023, for this year&#8217;s State of the Word. State of the Word is the annual keynote address delivered by the WordPress Project co-founder Matt Mullenweg. Every year, the event shares reflections on the project&#8217;s progress and aspirations for the future of open source. And so, if that is something that you like to tune into, December 11th is your day.&nbsp;</p>\n\n\n\n<p>Second thing on our list is that we are celebrating our 10,000th photo submission. So, on October 11th, the 10,000th photo was approved. The Photo Team is one of the newest ways to contribute to the WordPress open source project, and it feeds all of those photos into Openverse as well.</p>\n\n\n\n<p>The third thing on our list today is that I want to tell you about a community team training module that just came out. It&#8217;s specifically about the Translate Live tool, and it is ideal for presenting at your local meetups to engage and onboard new translators for your native language. If you&#8217;re organizing a WordCamp, consider introducing this tool during your Contributor Day. I will leave a link for this in the show notes so that it is easy to find.&nbsp;</p>\n\n\n\n<p>And item number four, the journey to update WordPress.org, continues with the launch of a new Showcase design. The Showcase is a natural starting point for a lot of visitors who are on WordPress.org. It inspires creativity and also demonstrates what&#8217;s possible with WordPress. So, stop on by there, it&#8217;s WordPress.org/showcase, and give it a bit of a look.</p>\n\n\n\n<p>[00:15:58] <strong>Josepha:</strong> And that, my friends, is your small list of big things. Thank you for tuning in today for the WordPress Briefing. And don&#8217;t forget to follow us on your favorite podcast app or subscribe directly on WordPress.org/news. You&#8217;ll get a friendly reminder whenever a new episode drops. And if you like what you heard today, share it with a fellow WordPresser. Or, if you had questions about what you heard today, you can share those with me at wprebriefing@WordPress.org. </p>\n\n\n\n<p>I&#8217;m your host, Josepha Haden Chomphosy, and I&#8217;ll see you again in a couple of weeks. </p>\n\n\n\n<p>[00:16:24] (Music outro)</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16227\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress 6.4’s PHP Compatibility\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/news/2023/10/wordpress-6-4s-php-compatibility/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Oct 2023 08:40:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:3:\"PHP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16235\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:340:\"In an effort to keep the WordPress community up to date, this post provides an update on the PHP compatibility of the upcoming WordPress 6.4 release scheduled for November 7, 2023.&#160; Recommended PHP version for WordPress 6.4 It’s recommended to use PHP 8.1 or 8.2 with this upcoming release. Please refer to the Hosting page [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Chloe Bringmann\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3117:\"\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"2400\" height=\"1350\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=2400%2C1350&#038;ssl=1\" alt=\"\" class=\"wp-image-16236\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?w=2400&amp;ssl=1 2400w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=2048%2C1152&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In an effort to keep the WordPress community up to date, this post provides an update on the PHP compatibility of the upcoming WordPress 6.4 release scheduled for November 7, 2023.&nbsp;</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Recommended PHP version for WordPress 6.4</strong></h3>\n\n\n\n<p>It’s recommended to use PHP 8.1 or 8.2 with this upcoming release. Please refer to the Hosting page for more detailed information, including <a href=\"https://make.wordpress.org/core/handbook/references/php-compatibility-and-wordpress-versions/\">a few known issues</a>.&nbsp;</p>\n\n\n\n<p>Reach out to your hosting company to explore PHP upgrade options.</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Why does compatibility matter?</strong></h3>\n\n\n\n<p>PHP is a programming language on which the WordPress code is based. This language runs on the server, and it is critical to keep it updated for security and functionality. Various teams within the WordPress open source project work to both test and fix any issues with new PHP versions so you can update with confidence that the WordPress core software is compatible.&nbsp;</p>\n\n\n\n<p>Happy WordPress-ing!&nbsp;</p>\n\n\n\n<p><em>Thank you to <a href=\'https://profiles.wordpress.org/annezazu/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>annezazu</a> <a href=\'https://profiles.wordpress.org/barry/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>barry</a> <a href=\'https://profiles.wordpress.org/ironprogrammer/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>ironprogrammer</a> <a href=\'https://profiles.wordpress.org/hellofromtonya/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>hellofromtonya</a> <a href=\'https://profiles.wordpress.org/chanthaboune/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>chanthaboune</a> <a href=\'https://profiles.wordpress.org/costdev/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>costdev</a> <a href=\'https://profiles.wordpress.org/javiercasares/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>javiercasares</a> for reviewing and contributing to the effort of this post.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16235\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:69:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 6.4 Release Candidate 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2023/10/wordpress-6-4-release-candidate-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Oct 2023 16:45:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:5:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:11:\"development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:8:\"releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16219\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:163:\"WordPress 6.4 RC2 is ready for download and testing. Reaching this phase of the release cycle is an important milestone. Check out what\'s new and how you can help.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Meher Bala\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6586:\"\n<p>The second release candidate (RC2) for WordPress 6.4 is now available!</p>\n\n\n\n<p><strong>This version of the WordPress software is under development</strong>. Please do not install, run, or test this version of WordPress on production or mission-critical websites. Instead, it’s recommended that you evaluate RC2 on a test server and site.</p>\n\n\n\n<p>WordPress 6.4 is <a href=\"https://make.wordpress.org/core/6-4/\">slated for release</a> on <strong>November 7, 2023</strong>—two weeks from today. If you haven’t tried it, now is the time.</p>\n\n\n\n<p>You can test WordPress 6.4 RC2 in three ways:</p>\n\n\n\n<ol>\n<li><strong>Plugin</strong>: Install and activate the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin on a WordPress install (select the “Bleeding edge” channel and “Beta/RC Only” stream).</li>\n\n\n\n<li><strong>Direct download</strong>: Download the <a href=\"https://wordpress.org/wordpress-6.4-RC2.zip\">RC2 version (zip)</a> and install it on a WordPress site.</li>\n\n\n\n<li><strong>Command line</strong>: Use the following <a href=\"https://make.wordpress.org/cli/\">WP-CLI</a> command:<br><code>wp core update --version=6.4-RC2</code></li>\n</ol>\n\n\n\n<p><a href=\"https://wordpress.org/news/2023/10/wordpress-6-4-release-candidate-1/\">Read the RC1 announcement</a> for featured highlights, and check the <a href=\"https://make.wordpress.org/core/\">Make WordPress Core blog</a> for <a href=\"https://make.wordpress.org/core/tag/6-4/\">6.4-related posts</a>. If you are looking for detailed technical notes on new features and improvements, the <a href=\"https://make.wordpress.org/core/2023/10/23/wordpress-6-4-field-guide/\"><strong>WordPress 6.4 Field Guide</strong></a> is for you.</p>\n\n\n\n<p>The WordPress 6.4 release is brought to you by an <a href=\"https://make.wordpress.org/core/2023/06/05/wordpress-6-4-development-cycle/\">underrepresented gender release squad</a> to welcome the participation and partnership of those who identify as gender-underrepresented in the WordPress open source project.</p>\n\n\n\n<h2 class=\"wp-block-heading\">What’s in WordPress 6.4 RC2?</h2>\n\n\n\n<p>Thanks to everyone who has tested the beta and RC releases. Since RC1 was released on October 17, there have been more than 25 issues resolved. You can browse the technical details for all recent updates using these links:</p>\n\n\n\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/commits/wp/6.4\">GitHub commits for 6.4</a></li>\n\n\n\n<li><a href=\"https://core.trac.wordpress.org/query?status=closed&amp;changetime=10%2F18%2F2023..10%2F24%2F2023&amp;milestone=6.4&amp;col=id&amp;col=milestone&amp;col=owner&amp;col=type&amp;col=priority&amp;order=id\">Closed Trac tickets since RC1</a></li>\n\n\n\n<li><a href=\"https://github.com/WordPress/twentytwentyfour/commits/\">GitHub commits for Twenty Twenty-Four</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Contributing to 6.4</h2>\n\n\n\n<p>WordPress is open source software made possible by a community of people collaborating on and contributing to its development. The resources below outline various ways you can help, regardless of your technical expertise.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Get involved in testing</h3>\n\n\n\n<p>Your feedback and help in testing are vital to developing the WordPress software and ensuring its quality. It’s also a meaningful way for anyone to contribute. <a href=\"https://make.wordpress.org/test/2023/09/26/help-test-wordpress-6-4/\">Check out this guide</a> for instructions on testing WordPress 6.4 features.</p>\n\n\n\n<p>If you encounter an issue, please report it to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta area</a> of the support forums or directly to <a href=\"https://core.trac.wordpress.org/newticket\">WordPress Trac</a> if you are comfortable writing a reproducible bug report. You can also check your issue against a list of <a href=\"https://core.trac.wordpress.org/tickets/major\">known bugs</a>.</p>\n\n\n\n<p>Curious about testing releases in general? Follow along with the <a href=\"https://make.wordpress.org/test/\">testing initiatives in Make Core</a> and join the <a href=\"https://wordpress.slack.com/messages/core-test/\">#core-test channel</a> on <a href=\"https://wordpress.slack.com/\">Making WordPress Slack</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Search for vulnerabilities</h3>\n\n\n\n<p>During the release candidate phase of WordPress 6.4, the <a href=\"https://make.wordpress.org/security/2023/09/26/bug-bounty-for-wordpress-6-4-beta/\">monetary reward for reporting new, unreleased security vulnerabilities</a> is doubled. Please follow responsible disclosure practices as detailed in the project’s security practices and policies outlined on the <a href=\"https://hackerone.com/wordpress\">HackerOne page</a> and in the <a href=\"https://wordpress.org/about/security/\">security white paper</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Update your theme or plugin</h3>\n\n\n\n<p>Do you build themes and plugins? Your products play an integral role in extending the functionality and value of WordPress for users worldwide.</p>\n\n\n\n<p>Hopefully, you have already tested your themes and plugins with WordPress 6.4 betas. With RC2, you will want to continue your testing and update the <em>&#8220;Tested up to&#8221;</em> version in your <a href=\"https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/\">plugin&#8217;s readme file</a> to 6.4.</p>\n\n\n\n<p>Please post detailed information to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">support forums</a> if you find compatibility issues.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Help translate WordPress</h3>\n\n\n\n<p>Do you speak a language other than English? ¿Español? Français? Português? Русский? 日本? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help translate WordPress into more than 100 languages</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">A RC2 haiku</h2>\n\n\n\n<p>You have been waiting<br>Download and give it a test<br>RC2 is here</p>\n\n\n\n<p><em>Thank you to the following contributors for collaborating on this post: <a href=\'https://profiles.wordpress.org/meher/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>meher</a>, <a href=\'https://profiles.wordpress.org/rmartinezduque/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>rmartinezduque</a>, <a href=\'https://profiles.wordpress.org/michelleames/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>michelleames</a>, <a href=\'https://profiles.wordpress.org/cbringmann/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>cbringmann</a></em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16219\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:32:\"https://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"\n	hourly	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"\n	1	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:4:\"site\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"14607090\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:48:\"WpOrg\\Requests\\Utility\\CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:12:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sat, 18 Nov 2023 10:08:14 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:25:\"strict-transport-security\";s:12:\"max-age=3600\";s:6:\"x-olaf\";s:3:\"⛄\";s:13:\"last-modified\";s:29:\"Fri, 17 Nov 2023 22:46:11 GMT\";s:4:\"link\";s:63:\"<https://wordpress.org/news/wp-json/>; rel=\"https://api.w.org/\"\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:16:\"content-encoding\";s:4:\"gzip\";s:7:\"alt-svc\";s:19:\"h3=\":443\"; ma=86400\";s:4:\"x-nc\";s:9:\"HIT ord 1\";}}s:5:\"build\";s:14:\"20231115103410\";}','no');
INSERT INTO `wp_options` VALUES (364,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1700345293','no');
INSERT INTO `wp_options` VALUES (365,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1700302093','no');
INSERT INTO `wp_options` VALUES (387,'_transient_timeout_feed_9bbd59226dc36b9b26cd43f15694c5c3','1700343655','no');
INSERT INTO `wp_options` VALUES (388,'_transient_feed_9bbd59226dc36b9b26cd43f15694c5c3','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:52:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n\n \n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:8:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"The latest news about WordPress and the WordPress community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 22:46:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"https://wordpress.org/?v=6.5-alpha-57122\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"image\";a:1:{i:0;a:6:{s:4:\"data\";s:11:\"\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:3:\"url\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"https://s.w.org/favicon.ico?2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"https://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"width\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"32\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:6:\"height\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"32\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:63:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"State of the Word 2023 – Madrid, Spain\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2023/11/state-of-the-word-2023-madrid-spain/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Nov 2023 20:03:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:6:\"Events\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:4:\"sotw\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:17:\"state of the word\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16429\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:328:\"The countdown is on for this year\'s State of the Word! If you missed the initial announcement a few weeks ago, mark your calendars for December 11, 2023.\n\nState of the Word is the annual keynote in which WordPress co-founder Matt Mullenweg celebrates the progress of the open source project and offers a glimpse into its future.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Dan Soschin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4331:\"\n<figure class=\"wp-block-image size-large\"><img fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=1024%2C683&#038;ssl=1\" alt=\"State of the Word\" class=\"wp-image-16438\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/SOTW-Blue.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The countdown is on for this year&#8217;s State of the Word! If you missed the initial announcement a few weeks ago, you&#8217;ll want to mark your calendars for December 11, 2023.</p>\n\n\n\n<p>State of the Word is the annual keynote in which WordPress co-founder <a href=\"https://ma.tt/\">Matt Mullenweg</a> celebrates the progress of the open source project and offers a glimpse into its future.</p>\n\n\n\n<p>For the first time, State of the Word ventures beyond North America, bringing the WordPress community to a new and vibrant city that plays a vital role in the WordPress project &#8212; Madrid, Spain! The event will be live-streamed to WordPress enthusiasts and newcomers around the globe via the <a href=\"https://youtube.com/wordpress\">WordPress YouTube channel</a>.</p>\n\n\n\n<p>Please visit the <a href=\"https://wordpress.org/state-of-the-word\">event website</a> for more event details and live-streaming information.</p>\n\n\n\n<p><strong>What:</strong> State of the Word 2023<br><strong>When: </strong><a href=\"https://calendar.google.com/calendar/u/0/r/eventedit?text=State+of+the+Word+2023&amp;dates=20231211T150000Z/20231211T190000Z&amp;details=State+of+the+Word+is+the+annual+keynote+address+delivered+by+the+WordPress+project%E2%80%99s+co-founder%2C+Matt+Mullenweg.+Every+year%2C+Matt+shares+reflections+on+the+project%E2%80%99s+progress+and+the+future+of+open+source.+Expect+this+and+more+in+this+year%E2%80%99s+edition.%0A%0AState+of+the+Word+will+be+live+streamed+from+Madrid,+Spain,+and+is+free+for+all+to+watch+or+attend+in+person+with+a+ticket.%0A%0Ahttps://wordpress.org/state-of-the-word/\">December 11, 2023, 15:00 UTC</a> (Start of live stream)<br><strong>Where: </strong><a href=\"https://www.palacioneptuno.com/\">Palacio Neptuno</a>, Madrid, Spain<br><strong>Streaming: </strong><a href=\"https://youtube.com/wordpress\">Watch the live stream</a> on the WordPress YouTube channel.<br><strong>Tickets: </strong><a href=\"https://wordcampcentral.survey.fm/request-a-seat-sotw-2023-spain\">Request a ticket to attend in person</a>.<strong><br></strong><em>Please note that the venue’s capacity is limited; therefore, not all ticket requests will be granted.&nbsp;</em><br><strong>Meetups: </strong>The community will sponsor several local watch parties globally, both in<br>person and online. <a href=\"https://wordpress.org/state-of-the-word\">Find one near you or organize one</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Have a question for Matt?</h2>\n\n\n\n<p>State of the Word will include a Q&amp;A session. If you want to participate, you can send your question to ask-matt@wordcamp.org or ask during the event via the Q&amp;A app Slido. A QR code for your submission will be provided during the event live stream.</p>\n\n\n\n<p>Given the volume of questions usually submitted, only some will be answered live, while others will be covered in a follow-up post published after the event on <a href=\"https://make.wordpress.org/project\">make.wordpress.org/project</a>.</p>\n\n\n\n<p>Is this your first State of the Word? Check out <a href=\"https://wordpress.tv/tag/state-of-the-word/\">prior events on WordPress.tv</a> for an introduction to the format.</p>\n\n\n\n<p>See you in person and online on December 11!</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" />\n\n\n\n<p><em>Thank you to <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a> and <a href=\"https://profiles.wordpress.org/cbringmann/\">Chloé Bringmann</a> for reviewing this post.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16429\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:68:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n\n\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Introducing Twenty Twenty-Four\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wordpress.org/news/2023/11/introducing-twenty-twenty-four/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Nov 2023 18:29:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:6:\"Design\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:18:\"Twenty Twenty-Four\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16394\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:127:\"Meet Twenty Twenty-Four, the most versatile default theme yet—bundled with WordPress 6.4 and ready to make it uniquely yours.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:2:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:59:\"https://wordpress.org/news/files/2023/11/tt4-i9-small-1.mp4\";s:6:\"length\";s:7:\"6747134\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:82:\"https://wordpress.org/news/files/2023/11/tt4-howto-replace-template_compressed.mp4\";s:6:\"length\";s:8:\"12815358\";s:4:\"type\";s:9:\"video/mp4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Maggie Cabrera\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:7209:\"\n<p>When it comes to designing a website, one size doesn&#8217;t fit all. We understand that every WordPress user has unique needs and goals, whether you&#8217;re an aspiring entrepreneur, a passionate photographer, a prolific writer, or a bit of them all. That&#8217;s why we are thrilled to introduce <a href=\"https://wordpress.org/themes/twentytwentyfour/\"><strong>Twenty Twenty-Four</strong></a>, the most versatile default theme yet—bundled with <a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4</a> and ready to make it uniquely yours.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls poster=\"https://wordpress.org/news/files/2023/11/TT4-square.jpg\" src=\"https://wordpress.org/news/files/2023/11/tt4-i9-small-1.mp4\"></video></figure>\n\n\n\n<h2 class=\"wp-block-heading\">A theme for every style</h2>\n\n\n\n<p>Unlike past default themes, Twenty Twenty-Four breaks away from the tradition of focusing on a specific topic or style. Instead, this theme has been thoughtfully crafted to cater to any type of website, regardless of its focus. The theme explores <strong>three different use cases</strong>: one designed for entrepreneurs and small businesses, another for photographers and artists, and a third tailored for writers and bloggers. Thanks to its multi-faceted nature and adaptability, Twenty Twenty-Four emerges as the perfect fit for any of your projects.</p>\n\n\n\n<p>As you dive into its templates and patterns, you will notice how the new Site Editor functionality opens up different pathways for building your site seamlessly.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Patterns at every step</h2>\n\n\n\n<p>Whether you&#8217;re looking to craft an About page, showcase your work, handle RSVPs, or design captivating landing pages, Twenty Twenty-Four has got you covered.<strong> </strong>Choose from an extensive collection of <a href=\"https://2024.wordpress.net/index.php/patterns/\"><strong>over 35 beautiful patterns</strong></a> to customize and suit your needs.</p>\n\n\n\n<p>For the first time, this theme features full-page patterns for templates like homepage, archive, search, single pages, and posts. Some are exclusively available during the template-switching and creation process, ensuring you have the right options when you need them.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://wordpress.org/news/files/2023/11/tt4-howto-replace-template_compressed.mp4\"></video></figure>\n\n\n\n<p>Moreover, you can take advantage of a variety of patterns for page sections, such as FAQs, testimonials, or pricing, to meet your site&#8217;s most specific requirements.</p>\n\n\n\n<p>With this diverse pattern library, Twenty Twenty-Four offers a flexible canvas to quickly assemble pages without having to start from scratch—saving you time and energy in the creation process. Just let your creativity flow and explore the possibilities!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" width=\"1024\" height=\"682\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=1024%2C682&#038;ssl=1\" alt=\"Screenshots of Twenty Twenty-Four patterns.\" class=\"wp-image-16397\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=1024%2C682&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?resize=1536%2C1023&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/TT4-Post-Image-1.jpg?w=1600&amp;ssl=1 1600w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Site editing in its finest form</h2>\n\n\n\n<p>Twenty Twenty-Four ushers in a new era of block themes by bringing together the latest WordPress site editing capabilities. Discover newer design tools such as background image support in Group blocks and vertical text, providing an intuitive and efficient way to create compelling, interactive content.</p>\n\n\n\n<p>Find image placeholders with predefined aspect ratio settings within patterns, allowing you to drop images that perfectly fill the space. To go one step further, make your visuals interactive by enabling lightboxes. Ideal for showcasing galleries or portfolio images, this feature allows your visitors to expand and engage with them in full-screen mode. Activate it globally for all images throughout your site or for specific ones.</p>\n\n\n\n<p>For a smoother browsing experience on your site, you can disable the &#8220;Force page reload&#8221; setting in the Query Loop block. This allows the necessary content to be loaded dynamically when switching between different pages without needing a full-page refresh.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Elegance with purpose</h2>\n\n\n\n<p>Twenty Twenty-Four goes beyond versatility with a beautiful aesthetic inspired by contemporary design trends, giving your website a sleek and modern look. Key design elements include:</p>\n\n\n\n<ul>\n<li><strong>Cardo font for headlines</strong>: The Cardo font adds a touch of elegance to your site, creating a sophisticated visual experience.</li>\n\n\n\n<li><strong>Sans-serif system font for paragraphs</strong>: The sans-serif font ensures that your texts are cleaner and easier to read, enhancing overall readability.</li>\n\n\n\n<li><strong>Eight style variations</strong>: Twenty Twenty-Four presents a light color palette for a fresh and inviting appearance out-of-the-box, but you can customize it with seven additional style variations. Each includes fonts and colors carefully curated to work beautifully alongside the patterns and templates.</li>\n\n\n\n<li><strong>Sans-serif variations</strong>: Besides the default styles, the theme offers two additional sans-serif variations, providing more choices for your site&#8217;s typography.</li>\n</ul>\n\n\n\n<p>Along with its design, Twenty Twenty-Four has been meticulously optimized for performance. This ensures that your website not only looks great but also delivers a fast and efficient user experience.</p>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\" href=\"https://playground.wordpress.net/?theme=twentytwentyfour\">Explore Twenty Twenty-Four now</a></div>\n</div>\n\n\n\n<p>More information can be found in the following links:</p>\n\n\n\n<ul>\n<li><a href=\"https://wordpress.org/themes/twentytwentyfour/\">Download Twenty Twenty-Four</a></li>\n\n\n\n<li><a href=\"https://wordpress.org/documentation/article/twenty-twenty-four/\">Twenty Twenty-Four Documentation</a></li>\n\n\n\n<li><a href=\"https://make.wordpress.org/core/2023/08/24/introducing-twenty-twenty-four/\">Twenty Twenty-Four Kick Off</a></li>\n</ul>\n\n\n\n<p><em>The Twenty Twenty-Four theme was designed by </em><a href=\"https://profiles.wordpress.org/beafialho/\"><em>Beatriz Fialho</em></a><em> and made possible thanks to the passion and tireless work of <a href=\"https://github.com/WordPress/twentytwentyfour/blob/trunk/CONTRIBUTORS.md\">more than 120 contributors</a>.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16394\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:61:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"WP Briefing: Episode 66: Advocating Open Source Solutions\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://wordpress.org/news/2023/11/episode-66-advocating-open-source-solutions/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Nov 2023 12:00:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"Podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:11:\"wp-briefing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/news/?post_type=podcast&p=16357\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:296:\"WordPress Executive Director, Josepha Haden Chomphosy, speaks to the strategic approach to integrating open source solutions within your company and offers insight into initiating open source advocacy conversations. Tune in for a session that could redefine your company\'s technological approach.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:51:\"https://wordpress.org/news/files/2023/11/WPB066.mp3\";s:6:\"length\";s:1:\"0\";s:4:\"type\";s:0:\"\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brett McSherry\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:11349:\"\n<p>WordPress Executive Director, Josepha Haden Chomphosy, speaks to the strategic approach to integrating open source solutions within your company and offers insight into initiating open source advocacy conversations. Tune in for a session that could redefine your company&#8217;s technological approach.</p>\n\n\n\n<p><em><strong>Have a question you&#8217;d like answered? You can submit them to&nbsp;<a href=\"mailto:wpbriefing@wordpress.org\">wpbriefing@WordPress.org</a>, either written or as a voice recording.</strong></em></p>\n\n\n\n<h2 class=\"wp-block-heading\">Credits</h2>\n\n\n\n<p>Host:&nbsp;<a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden Chomphosy</a><br>Editor:&nbsp;<a href=\"https://profiles.wordpress.org/dustinhartzler/\">Dustin Hartzler</a><br>Logo:&nbsp;<a href=\"https://profiles.wordpress.org/javiarce/\">Javier Arce</a><br>Production:&nbsp;<a href=\"https://profiles.wordpress.org/bjmcsherry/\">Brett McSherry</a><br>Song: Fearless First by Kevin MacLeod</p>\n\n\n\n<h2 class=\"wp-block-heading\">Show Notes</h2>\n\n\n\n<ul>\n<li><strong>Small List of Big Things</strong>\n<ul>\n<li><a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4 &#8220;Shirley&#8221;</a>  &#8211; The final major release of 2023 launched on November 7 &#8211; WordPress 6.4 &#8220;Shirley.&#8221; Download and check out this empowering release. </li>\n\n\n\n<li><a href=\"https://make.wordpress.org/updates/2023/10/31/whats-new-on-learn-wordpress-in-october-2023/\" target=\"_blank\" rel=\"noreferrer noopener\">The Training Team recently published</a> several new Learn resources for training guides to support Meetup Organizers. From lesson plans to online workshops, there are several ways to help you in your goals as a contributor to WordPress.</li>\n\n\n\n<li>The Diversity Team <a href=\"https://make.wordpress.org/community/handbook/meetup-organizer/event-formats/diversity-speaker-training-workshop/\" target=\"_blank\" rel=\"noreferrer noopener\">recently published</a> a new Diverse Speaker Training page, providing resources for new and experienced contributors to bring more diverse speaker lineups and inclusive, diverse WP events for official WordPress Meetups and WordCamps.</li>\n\n\n\n<li>If you have a story showing how WordPress has impacted what you are doing or what people you know have done, record something and send it to <a href=\"mailto:wpbriefing@WordPress.org\">wpbriefing@WordPress.org</a>. We&#8217;d love to hear from you.</li>\n</ul>\n</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Transcripts</h2>\n\n\n\n<span id=\"more-16357\"></span>\n\n\n\n<p>[00:00:00] <strong>Josepha:</strong> Hello everyone. And welcome to the WordPress Briefing. The podcast where you can catch quick explanations of the ideas behind the WordPress open source project, some insight into the community that supports it and get a small list of big things coming up in the next two weeks. I&#8217;m your host, Josepha Haden Chomphosy. Here we go.</p>\n\n\n\n<p>[00:00:28] (Intro music)&nbsp;</p>\n\n\n\n<p>[00:00:40] <strong>Josepha:</strong> Today, we&#8217;re talking about something I used to have a lot of experience with in my career before WordPress. I worked at a marketing agency. I wasn&#8217;t a developer. I was in data and strategy sorts of things. But part of the work heading into every project was an evaluation of what software was best. There were always a variety being considered, but WordPress was frequently one of them.</p>\n\n\n\n<p>Now, I don&#8217;t know if any of you have had that moment where you&#8217;re having to talk open source with a CTO or a CEO, but it can be nerve-wracking, to say the least. And it makes sense, right? Open source has a PR problem, especially when you&#8217;re speaking to leadership inside a business. And it doesn&#8217;t really matter the size, right?</p>\n\n\n\n<p>You&#8217;re advocating for something that requires a completely different mental model. It doesn&#8217;t fit into accepted concepts of what makes a business thrive or what makes a bet a sure thing. There were three, maybe four, concerns that came up every time I had this conversation. So, I&#8217;m going to share those concerns with you and a few possible counterpoints to get you started.</p>\n\n\n\n<p>[00:01:48] <strong>Josepha:</strong> First and always is the concern around security. I believe that this particular mismatch is rooted in an idea that controlled equals secure, which isn&#8217;t always the case. So the talking point is this. Since open source has a transparent development process, it is often more secure than proprietary software, contrary to what you might hear.</p>\n\n\n\n<p>That transparency allows vulnerabilities to be identified by independent researchers and community members and then patched quickly because you aren&#8217;t limited by who or what you know personally. </p>\n\n\n\n<p>And if you&#8217;re not having a conversation where you&#8217;re having to defend the security in open source and you just want to bring it up yourself, here is a conversation opener for that. Security is a top concern for all of us. Surprisingly, open source solutions often have stronger security measures due to the collaborative nature of their development. It&#8217;s a proactive approach to minimizing risks.&nbsp;</p>\n\n\n\n<p>[00:02:43] <strong>Josepha:</strong> A second thing that frequently came up was questions around innovation and future proofing of open source products. I think this mismatch is fully rooted in the Cathedral and the Bazaar methods of advancement. So the talking point for that one is this. Embracing open source fosters innovation. We can tap into the latest technologies and stay ahead of industry trends that way. It is specifically because we have a diverse set of viewpoints that we can make sure to quickly account for future risks, along with taking advantage of future opportunities. And by our organization being more active, we can potentially get exactly the solutions we need for our clients long term.</p>\n\n\n\n<p>And the conversation opener for this, if you are the one bringing up the topic, is I&#8217;ve been thinking about our long-term goals and how to keep our technology stack relevant. Open source not only keeps us current but also positions us as innovators in our field.</p>\n\n\n\n<p>[00:03:40] <strong>Josepha:</strong> And finally, the thing that seems to make or break the decision is the concept of independence. Part of any good business decision, especially around software, is determining upfront costs to getting started, long-term effectiveness of the chosen solution, and long-term mobility should circumstances change. Open source can address these from multiple vantage points.</p>\n\n\n\n<p>So here&#8217;s a good talking point for that one. Open source liberates us from vendor lock-in. We&#8217;re not tied to a single vendor&#8217;s roadmap or pricing changes, providing us with more options that suit our needs our clients&#8217; needs. Also, given how ubiquitous WordPress is in particular, there will always be a disaster recovery option should a senior developer leave.</p>\n\n\n\n<p>And beyond all of that, clients can own all of the content, audience attention, and clientele that we have all worked so hard to help them earn. And again, if you&#8217;re not defending things and instead choosing to bring them up as somebody who is trying to affect change in your own organization, here is a good place to start for that.</p>\n\n\n\n<p>Considering the dynamic nature of our industry, having the freedom to choose solutions independent of a specific vendor makes sure that we are always in control of our destiny.</p>\n\n\n\n<p>[00:04:59] <strong>Josepha:</strong> So, those are the three most frequent things I encountered when I was having conversations about which software to choose and what software was the best choice long term for both our organization and our client&#8217;s organizations.</p>\n\n\n\n<p>If you have been in the midst of this type of conversation and have been longing for some counterpoints, I hope this helps. But if you have been feeling in your heart of hearts that your company or organization would be better off using open source software, and of course, in my context, particularly WordPress as that software, but you&#8217;ve been worried about bringing it up, I hope this gives you the courage to get out there and be an agent of change in your organization. You can do it, and I know you can.</p>\n\n\n\n<p>[00:05:44] (Music interlude)&nbsp;</p>\n\n\n\n<p>[00:05:51] <strong>Josepha:</strong> All right, my friends, that brings us now to our small list of big things. </p>\n\n\n\n<p>[00:05:57] <strong>Josepha:</strong> First on the list, big, big thing. We launched WordPress 6.4 on November 7th, about a week ago. Be sure to download and check out the latest update on this monumental release. And while you&#8217;re doing it. Be sure to check out the new default theme that came out with it. It has a lot of patterns in it. I know I&#8217;ve talked about it quite a bit over the course of the year, but it&#8217;s really beautiful, and I think that it&#8217;s worth a good, strong highlight. So WordPress 6.4, you can get it on WordPress.org/download or inside your own host, probably. </p>\n\n\n\n<p>[00:06:29] <strong>Josepha:</strong> The second thing that we have is that the training team recently published several new Learn resources to support meetup organizers. So we&#8217;ve got over there some lesson plans, tutorials, online workshops. And there are also new materials that help you figure out how to accomplish your goals as a contributor to the WordPress project.</p>\n\n\n\n<p>[00:06:49] <strong>Josepha:</strong> And we also have a recently published new diverse speaker training page. It provides incredible resources for new and experienced contributors to bring more diverse speaker lineups and inclusive, diverse WordPress events for official WordPress meetups and WordCamps. </p>\n\n\n\n<p>[00:07:06] <strong>Josepha:</strong> And the fourth thing on our small list of big things today is that I would love to get a few voice recordings from you all, from folks who are listening to the WordPress Briefing, or folks that you know, to learn more about how WordPress has impacted you. </p>\n\n\n\n<p>One of the things that I miss the most from my days as a WordCamp organizer is that annually, I got to see people who had shown up, once at a meetup, you know, to learn what WordPress was, and then came back year after year to our WordCamp with these new goals and new successes and I got to watch their businesses change over time. And so if you have a story like that where WordPress impacted what you are doing or what people that you know have done, record something and send it to wpbriefing@WordPress.org. </p>\n\n\n\n<p>So that, my friends, is your small list of big things.</p>\n\n\n\n<p>[00:08:04] <strong>Josepha:</strong> Don&#8217;t forget to follow us on your favorite podcasting app or subscribe directly on WordPress.org/news. You&#8217;ll get a friendly reminder whenever there is a new episode. If you liked what you heard today, share it with a fellow WordPresser. Or, if you had questions about what you heard, you can share those with me at wpbriefing@WordPress.org. I&#8217;m your host, Josepha Haden Chomphosy. Thanks for tuning in today for the WordPress Briefing, and I&#8217;ll see you again in a couple of weeks. </p>\n\n\n\n<p>[00:08:31] (Music outro)</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16357\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"The Month in WordPress – October 2023\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2023/11/the-month-in-wordpress-october-2023/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 10 Nov 2023 23:06:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:18:\"Month in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:18:\"month in wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16365\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:391:\"September-October 2023 was yet another fun and eventful chapter in WordPress, with more WordCamps hosting exciting discussions, knowledge sharing, and learning. This month also welcomed the release of WordPress 6.4 and the Twenty Twenty-Four theme. Let’s check it out. Meet WordPress 6.4 “Shirley” WordPress 6.4 “Shirley” was released on November 7, 2023, and named after [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Nicholas Garofalo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:11694:\"\n<p>September-October 2023 was yet another fun and eventful chapter in WordPress, with more WordCamps hosting exciting discussions, knowledge sharing, and learning. This month also welcomed the release of WordPress 6.4 and the Twenty Twenty-Four theme. Let’s check it out.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Meet WordPress 6.4 “Shirley”</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&#038;ssl=1\" alt=\"Shirley WordPress 6.4\" class=\"wp-image-16319\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://wordpress.org/news/2023/11/shirley/\">WordPress 6.4 “Shirley”</a> was released on November 7, 2023, and named after the iconic jazz artist Shirley Horn. With the release of WordPress 6.4 comes the new <a href=\"https://wordpress.org/themes/twentytwentyfour/\">Twenty Twenty-Four theme</a>, a multi-faceted, highly flexible default theme pre-loaded with more than 35 templates and patterns.&nbsp;</p>\n\n\n\n<p>This release includes more than 100 performance-related updates for a faster and more efficient experience. There’s also a host of new features and enhancements that help improve the content creation process and streamline site editing.&nbsp;</p>\n\n\n\n<p>WordPress 6.4 was made possible by more than 600 contributors in at least 56 countries.&nbsp;Leading this release has been an underrepresented gender team, emphasizing WordPress’ commitment to fostering diverse voices in the open source project.</p>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-layout-flex wp-container-2 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-white-color has-dark-strokes-grey-background-color has-text-color has-background has-link-color wp-element-button\" href=\"https://wordpress.org/download/releases/6-4/\">Learn more about WordPress 6.4</a></div>\n</div>\n\n\n\n<div style=\"height:3px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">State of the Word 2023</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=1024%2C683&#038;ssl=1\" alt=\"State of the Word 2023 in Madrid Spain on December 11, 2023 at 15:00 UTC\" class=\"wp-image-16208\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/10/Web-SOTW-Image-1200x800-2.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Mark your calendars for State of the Word! The annual keynote address delivered by the WordPress project’s co-founder, Matt Mullenweg, will be held on December 11, 2023. For the first time, the event will take place outside North America—this time with the Spanish community in <strong>Madrid, Spain</strong>.</p>\n\n\n\n<p>A live stream will be available for WordPress enthusiasts who will not be able to attend in person. Stay tuned for more information, including how to reserve a ticket, soon!</p>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-layout-flex wp-container-3 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-white-color has-dark-strokes-grey-background-color has-text-color has-background has-link-color wp-element-button\" href=\"https://wordpress.org/news/2023/10/state-of-the-word-2023/\">Learn more about this year’s State of the Word</a></div>\n</div>\n\n\n\n<div style=\"height:3px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">New in the Gutenberg plugin</h2>\n\n\n\n<p>Two new versions of Gutenberg shipped in October:</p>\n\n\n\n<ul>\n<li><a href=\"https://make.wordpress.org/core/2023/10/11/whats-new-in-gutenberg-16-8-11-october/\"><strong>Gutenberg 16.8</strong></a> was released on October 11, 2023. It introduced enhancements to the Cover block and Font Library, and added the option to view the active template when editing pages.</li>\n\n\n\n<li><a href=\"https://make.wordpress.org/core/2023/10/25/whats-new-in-gutenberg-16-9-25-october-2/\"><strong>Gutenberg 16.9</strong></a> was released on October 25, 2023. This update lets you rename nearly every block from within the editor, as well as duplicate or rename individual patterns.&nbsp;</li>\n</ul>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2023/10/05/core-editor-improvement-ensuring-excellence-in-the-writing-experience/\">October’s Core Editor Improvement</a> post dives into all the writing enhancements expected in the latest WordPress 6.4 release.</p>\n\n\n\n<a class=\"wp-block-jetpack-podcast-player jetpack-podcast-player__direct-link\" href=\"https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/\">https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/</a>\n\n\n\n<h2 class=\"wp-block-heading\">Team updates</h2>\n\n\n\n<ul>\n<li>The journey to update WordPress.org continues with the launch of a <a href=\"https://wordpress.org/news/2023/10/a-new-wordpress-showcase/\">new Showcase design</a>. The redesigned Showcase inspires creativity, highlights the platform’s flexibility, and demonstrates what’s possible with WordPress.</li>\n\n\n\n<li>The Performance Team held a <a href=\"https://make.wordpress.org/core/2023/09/18/hallway-hangout-performance-improvements-for-wordpress-6-4/\">Hallway Hangout</a> to discuss WordPress 6.3 performance impact in the field, diving into WordPress 6.4 performance improvements and looking ahead at what can be learned for WordPress 6.5.</li>\n\n\n\n<li>The Documentation Team created a new <a href=\"https://github.com/WordPress/documentation-end-user\">GitHub repo</a> for end-user documentation and its translations to all locales. You can find out more about this <a href=\"https://make.wordpress.org/project/2023/09/06/documentation-translation-localization/\">here</a>.</li>\n\n\n\n<li>Openverse has been awarded the <a href=\"https://wordpress.org/news/2023/09/openverse-wins-the-2023-oeg-open-infrastructure-award/\">2023 Open Education Award for Excellence in the Open Infrastructure category</a>. Congratulations!</li>\n\n\n\n<li><a href=\"https://make.wordpress.org/core/2023/09/07/evolving-the-fse-outreach-program/\">Learn more about the next chapter for the FSE (Full Site Editing) Outreach Program</a>, which looks to transition into a focused space for solving issues, creating resources, and facilitating conversations around adopting Phase 2 of Gutenberg.</li>\n\n\n\n<li>The Accessibility team is <a href=\"https://make.wordpress.org/accessibility/2023/09/13/accessibility-office-hours/\">holding weekly office hours</a> to discuss accessibility principles and best practices for the project.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Requests for feedback &amp; testing</h2>\n\n\n\n<ul>\n<li><a href=\"https://make.wordpress.org/updates/2023/11/03/mobile-team-update-november-3rd-2/\">Version 23.6</a> of the WordPress mobile app for iOS and Android is ready for testing.</li>\n</ul>\n\n\n\n<a class=\"wp-block-jetpack-podcast-player jetpack-podcast-player__direct-link\" href=\"https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/\">https://wordpress.org/news/2023/10/episode-64-patterns-in-wordpress/</a>\n\n\n\n<h2 class=\"wp-block-heading\">WordPress events updates</h2>\n\n\n\n<ul>\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1f9-1f1fc.png\" alt=\"🇹🇼\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> WordCamp Asia has <a href=\"https://asia.wordcamp.org/2024/call-for-sponsors-extended-to-november-30th/\">extended their call for sponsors</a> for their conference slated to take place in Taipei, Taiwan, March 7-9, 2024.&nbsp;</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1e8-1f1f7.png\" alt=\"🇨🇷\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> There will be a <a href=\"https://www.eventbrite.com/e/wordpress-wpdiversity-speaker-workshop-for-women-voices-in-latin-america-tickets-621207738067?aff=oddtdtcreator\">WordPress #WPDiversity Speaker Workshop for Women Voices in Latin America</a> in San Jose, Costa Rica on November 11, 2023.</li>\n\n\n\n<li>Don’t miss these upcoming WordCamps:\n<ul>\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1ea-1f1f8.png\" alt=\"🇪🇸\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://valencia.wordcamp.org/2023/\">WordCamp Valencia 2023</a>, Spain on November 10-11, 2023.</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1ee-1f1f9.png\" alt=\"🇮🇹\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://verona.wordcamp.org/2023/\">WordCamp Verona 2023</a>, Italy on November 17-18, 2023.</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1ed-1f1f0.png\" alt=\"🇭🇰\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://hongkong.wordcamp.org/2023/\">WordCamp Hong Kong 2023</a>, China on November 18, 2023.</li>\n\n\n\n<li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f1f5-1f1f0.png\" alt=\"🇵🇰\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <a href=\"https://islamabad.wordcamp.org/2023/\">WordCamp Islamabad 2023</a>, Pakistan on November 25-26, 2023.</li>\n</ul>\n</li>\n</ul>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" />\n\n\n\n<p><em>Have a story we should include in the next issue of The Month in WordPress? Fill out </em><a href=\"https://make.wordpress.org/community/month-in-wordpress-submissions/\"><em>this quick form</em></a><em> to let us know.</em></p>\n\n\n\n<p><em>Thank you to </em><a href=\"https://profiles.wordpress.org/bernard0omnisend/\"><em>Bernard Meyer</em></a><em> and <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a> for their contributions to this edition of The Month in WordPress.</em></p>\n\n\n\n<div class=\"wp-block-group is-layout-constrained wp-block-group-is-layout-constrained\">\n<h2 class=\"wp-block-heading\">Subscribe to WordPress News</h2>\n\n\n\n<p>Join other subscribers and receive WordPress news directly in your inbox.</p>\n\n\n<div class=\"wp-block-jetpack-subscriptions__supports-newline is-style-split wp-block-jetpack-subscriptions\">\n		<div>\n			<div>\n				<div>\n					<p >\n						<a href=\"https://wordpress.org/news/?post_type=post&#038;p=16365\" style=\"text-decoration: none; font-size: 16px;padding: 15px 23px 15px 23px;margin: 0px; margin-left: 10px;border-radius: 0px;border-width: 1px; background-color: #113AF5; color: #FFFFFF;\">Subscribe</a>\n					</p>\n				</div>\n			</div>\n		</div>\n	</div></div>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16365\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress 6.4.1 Maintenance Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/news/2023/11/wordpress-6-4-1-maintenance-release/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 09 Nov 2023 01:45:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16332\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:375:\"WordPress 6.4.1 is now available! This minor release features&#160;four bug fixes. You can review a summary of the maintenance updates in this release by reading the&#160;Release Candidate announcement or view the list of tickets on Trac. WordPress 6.4.1 is a short-cycle release. If you have sites that support automatic background updates, the update process will [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Josepha\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5986:\"\n<h2 class=\"wp-block-heading\">WordPress 6.4.1 is now available!</h2>\n\n\n\n<p>This minor release features&nbsp;<a href=\"https://core.trac.wordpress.org/query?status=accepted&amp;status=assigned&amp;status=closed&amp;status=new&amp;status=reopened&amp;status=reviewing&amp;id=!59852&amp;milestone=6.4.1&amp;col=id&amp;col=summary&amp;col=status&amp;col=milestone&amp;col=owner&amp;col=type&amp;col=priority&amp;order=priority\">four bug fixes</a>. You can review a summary of the maintenance updates in this release by reading the&nbsp;<a href=\"https://make.wordpress.org/core/2023/11/08/wordpress-6-4-1-rc1-is-now-available/\">Release Candidate announcement</a> or <a href=\"https://core.trac.wordpress.org/query?status=accepted&amp;status=assigned&amp;status=closed&amp;status=new&amp;status=reopened&amp;status=reviewing&amp;milestone=6.4.1&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=priority&amp;col=milestone&amp;order=priority\">view the list of tickets on Trac</a>.</p>\n\n\n\n<p>WordPress 6.4.1 is a short-cycle release. If you have sites that support automatic background updates, the update process will begin automatically. If your site does not update automatically, you can also update from your Dashboard.</p>\n\n\n\n<p>You can&nbsp;download <a href=\"https://wordpress.org/wordpress-6.4.1.zip\">WordPress 6.4.1 from WordPress.org</a>, or visit your WordPress Dashboard, click “Updates”, and then click “Update Now”.</p>\n\n\n\n<p>For more information on this release, <a href=\"https://wordpress.org/documentation/wordpress-version/version-6-4-1/\">please&nbsp;visit the HelpHub site</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Thank you to these WordPress contributors</h2>\n\n\n\n<p>This release was led by&nbsp;<a href=\"https://profiles.wordpress.org/jorbin/\">Aaron Jorbin</a> and <a href=\"https://profiles.wordpress.org/hellofromtonya/\">Tonya Mork</a>. Thank you to everyone who tested the RC and 6.4.1, and raised reports.</p>\n\n\n\n<p>WordPress 6.4.1 would not have been possible without the contributions of the following people. Their quick and concerted coordination to deliver maintenance fixes into a stable release is a testament to the power and capability of the WordPress community.</p>\n\n\n\n<p class=\"has-text-align-left\"><a href=\"https://profiles.wordpress.org/afragen/\">@afragen</a> <a href=\"https://profiles.wordpress.org/clorith/\">@clorith</a> <a href=\"https://profiles.wordpress.org/desrosj/\">@desrosj</a> <a href=\"https://profiles.wordpress.org/pbiron/\">@pbiron</a> <a href=\"https://profiles.wordpress.org/schlessera/\">@schlessera</a> <a href=\"https://profiles.wordpress.org/azaozz/\">@azaozz</a> <a href=\"https://profiles.wordpress.org/davidbaumwald/\">@davidbaumwald</a> <a href=\"https://profiles.wordpress.org/tomsommer/\">@tomsommer</a> <a href=\"https://profiles.wordpress.org/nexflaszlo/\">@nexflaszlo</a> <a href=\"https://profiles.wordpress.org/howdy_mcgee/\">@howdy_mcgee</a> <a href=\"https://profiles.wordpress.org/baxbridge/\">@baxbridge</a> <a href=\"https://profiles.wordpress.org/earnjam/\">@earnjam</a> <a href=\"https://profiles.wordpress.org/timothyblynjacobs/\">@timothyblynjacobs</a> <a href=\"https://profiles.wordpress.org/johnbillion/\">@johnbillion</a> <a href=\"https://profiles.wordpress.org/flixos90/\">@flixos90</a> <a href=\"https://profiles.wordpress.org/joedolson/\">@joedolson</a> <a href=\"https://profiles.wordpress.org/jeffpaul/\">@jeffpaul</a> <a href=\"https://profiles.wordpress.org/zunaid321/\">@zunaid321</a> <a href=\"https://profiles.wordpress.org/courane01/\">@courane01</a> <a href=\"https://profiles.wordpress.org/audrasjb/\">@audrasjb</a> <a href=\"https://profiles.wordpress.org/tacoverdo/\">@tacoverdo</a> <a href=\"https://profiles.wordpress.org/ironprogrammer/\">@ironprogrammer</a> <a href=\"https://profiles.wordpress.org/webcommsat/\">@webcommsat</a> <a href=\"https://profiles.wordpress.org/otto42/\">@otto42</a> <a href=\"https://profiles.wordpress.org/barry/\">@barry</a> <a href=\"https://profiles.wordpress.org/chanthaboune/\">@chanthaboune</a> <a href=\"https://profiles.wordpress.org/rajinsharwar/\">@rajinsharwar</a> <a href=\"https://profiles.wordpress.org/aaroncampbell/\">@aaroncampbell</a> <a href=\"https://profiles.wordpress.org/peterwilsoncc/\">@peterwilsoncc</a> <a href=\"https://profiles.wordpress.org/anandau14/\">@anandau14</a> <a href=\"https://profiles.wordpress.org/iandunn/\">@iandunn</a> <a href=\"https://profiles.wordpress.org/matthewjho/\">@matthewjho</a> <a href=\"https://profiles.wordpress.org/coffee2code/\">@coffee2code</a> <a href=\"https://profiles.wordpress.org/boogah/\">@boogah</a> <a href=\"https://profiles.wordpress.org/jason_the_adams/\">@jason_the_adams</a> <a href=\"https://profiles.wordpress.org/joemcgill/\">@joemcgill</a> <a href=\"https://profiles.wordpress.org/johnjamesjacoby/\">@johnjamesjacoby</a> <a href=\"https://profiles.wordpress.org/jrf/\">@jrf</a> <a href=\"https://profiles.wordpress.org/renehermi/\">@renehermi</a> <a href=\"https://profiles.wordpress.org/dlh/\">@dlh</a> <a href=\"https://profiles.wordpress.org/mukesh27/\">@mukesh27</a> <a href=\"https://profiles.wordpress.org/sumitbagthariya16/\">@sumitbagthariya16</a> <a href=\"https://profiles.wordpress.org/starbuck/\">@starbuck</a> <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">@sergeybiryukov</a> <a href=\"https://profiles.wordpress.org/ravipatel/\">@ravipatel</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">How to contribute</h2>\n\n\n\n<p>To get involved in WordPress core development, head over to Trac,&nbsp;<a href=\"https://core.trac.wordpress.org/report/6\">pick a ticket</a>, and join the conversation in the&nbsp;<a href=\"https://wordpress.slack.com/archives/C02RQBWTW\">#core</a>&nbsp;channel. Need help? Check out the&nbsp;<a href=\"https://make.wordpress.org/core/handbook/\">Core Contributor Handbook</a>.</p>\n\n\n\n<p class=\"has-text-align-right\"><em>Thanks to&nbsp;<a href=\"https://profiles.wordpress.org/jeffpaul/\">@jeffpaul</a>&nbsp;and <a href=\"https://profiles.wordpress.org/webcommsat/\">@webcommsat</a> for proofreading.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16332\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:66:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"WordPress 6.4 “Shirley”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"https://wordpress.org/news/2023/11/shirley/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 07 Nov 2023 19:59:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:8:\"releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16299\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:194:\"WordPress 6.4 \"Shirley\" is here! Named in honor of the iconic jazz singer and pianist Shirley Horn, this release was made possible by over 600 contributors. Download WordPress 6.4 Shirley today.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Josepha\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:74789:\"\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"683\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&#038;ssl=1\" alt=\"Record cover with an image of Shirley Horn, a record sliding down the right side, and the words Shirley WordPress 6.4.\" class=\"wp-image-16319\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/11/Release_featured_image2-1.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Say hello to <a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4</a> “Shirley,” named after the iconic jazz artist <a href=\"https://wikipedia.org/wiki/Shirley_Horn\">Shirley Horn</a>. Her distinctive voice and extraordinary connection to the piano established her as one of the leading jazz musicians of her generation. Horn’s journey from the Washington D.C. jazz scene to the international stage is a testament to her dedication and perseverance. Her influence reached far beyond the confines of traditional jazz, breaking boundaries and inspiring audiences worldwide.</p>\n\n\n\n<p>Enjoy the easy pace of <a href=\"https://www.youtube.com/channel/UCS3pUiY9OmzB6bPta3-4ArQ/playlists\">Shirley Horn’s music</a> as you take in all that 6.4 offers.</p>\n\n\n\n<p>This latest version of WordPress introduces a new, versatile default theme and a suite of upgrades to empower every step of your creative journey. Craft your content seamlessly with further writing improvements. Explore more ways to bring your vision to life and streamline site editing with enhanced tools. Whether you&#8217;re new to WordPress or an experienced creator, “Shirley” has something for you. Discover the unmatched flexibility of building with blocks and let your ideas take flight.</p>\n\n\n\n<blockquote class=\"wp-block-quote has-extra-large-font-size\">\n<p>Many of the features and enhancements in WordPress 6.4 fall in the “small but mighty” category. Along with the adaptable beauty of the Twenty Twenty-Four theme, these updates help content creators and site developers alike save time and effort while delivering the high value, low hassle WordPress experience the world has grown to expect.</p>\n<cite>Josepha Haden Chomphosy, Executive Director of WordPress</cite></blockquote>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\" href=\"https://wordpress.org/download/\">Download WordPress 6.4 today</a></div>\n</div>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">What’s inside 6.4</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Meet Twenty Twenty-Four</h3>\n\n\n\n<p>Experience site editing at its finest with <a href=\"https://make.wordpress.org/core/2023/08/24/introducing-twenty-twenty-four/\">Twenty Twenty-Four</a>. This new multi-faceted default theme has been thoughtfully crafted with three distinct use cases in mind, from writers and artists to entrepreneurs. Save time and effort with its extensive collection of <a href=\"https://2024.wordpress.net/index.php/patterns/\">over 35 templates and patterns</a>—and unlock a world of creative possibilities with a few tweaks. Twenty Twenty-Four’s remarkable flexibility ensures an ideal fit for almost any type of site. <a href=\"https://2024.wordpress.net/\">Check it out in this demo</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=1024%2C666&#038;ssl=1\" alt=\"Cropped screenshots of the Twenty Twenty-Four theme, showing its diverse use cases for photographers, bloggers, and small businesses.\" class=\"wp-image-16274\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/tt4.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Let your writing flow</h3>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2023/10/05/core-editor-improvement-ensuring-excellence-in-the-writing-experience/\">New enhancements</a> ensure your content creation journey is smooth. Find new keyboard shortcuts in List View, smarter list merging, and enhanced control over link settings. A cohesive toolbar experience for the Navigation, List, and Quote blocks lets you work efficiently with the tooling options you need.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of a Quote block showing its improved toolbar and the text &quot;Études has saved us thousands of hours of work and has unlock insights we never thought possible.&quot;\" class=\"wp-image-16275\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/writing.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">The Command Palette just got better</h3>\n\n\n\n<p>First introduced in WordPress 6.3, the Command Palette is a powerful tool to quickly find what you need, perform tasks efficiently, and speed up your building workflow. Enjoy a <a href=\"https://make.wordpress.org/core/2023/09/12/core-editor-improvement-commanding-the-command-palette/\">refreshed design and new commands</a> to perform block-specific actions in this release.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the refreshed UI of the Command Palette. It displays a search bar with the words &quot;Search for commands&quot; and a variety of shortcuts listed below, including &quot;Add new page,&quot; &quot;Preview in a new tab,&quot; and &quot;Patterns.&quot;\" class=\"wp-image-16276\" style=\"width:680px;height:auto\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/commands.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Categorize and filter patterns</h3>\n\n\n\n<p><a href=\"https://wordpress.org/patterns/\">Patterns</a> are an excellent way to leverage the potential of blocks and simplify your site-building process. WordPress 6.4 allows you to organize them with custom categories. Plus, new advanced filtering in the Patterns section of the inserter makes finding all your patterns more intuitive.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the Site Editor\'s patterns view which shows a list of patterns with custom categories, such as &quot;About,&quot; &quot;Banners,&quot; and &quot;Call to Action,&quot; patterns.\" class=\"wp-image-16278\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/categorize-patterns-1.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Get creative with more design tools</h3>\n\n\n\n<p>Build beautiful and functional layouts with an expanded set of design tools. Play with background images in Group blocks for unique designs and maintain image dimensions consistent with placeholder aspect ratios. Do you want to add buttons to your Navigation block? Now you can do it conveniently without a line of code.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=1024%2C666&#038;ssl=1\" alt=\"Decorative image with text &quot;Background images in Group blocks.&quot;\" class=\"wp-image-16279\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/design-tools.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Make your images stand out</h3>\n\n\n\n<p>Enable lightbox functionality to let your site visitors enjoy full-screen, interactive images on click. Apply it globally or to specific images to customize the viewing experience.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=1024%2C666&#038;ssl=1\" alt=\"Decorative photo of a triangular building structure with a &quot;click to expand&quot; icon on the right top corner.\" class=\"wp-image-16280\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/lightbox.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Rename Group blocks</h3>\n\n\n\n<p>Set custom names for Group blocks to organize and distinguish areas of your content easily. These names will be visible in List View.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the List View tool. It shows a Group block renamed as &quot;Hero Area&quot; with inner Group blocks also with custom names, such as &quot;Content,&quot; &quot;Images,&quot; and &quot;Call to action.&quot;\" class=\"wp-image-16281\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/rename.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Preview images in List View</h3>\n\n\n\n<p>New previews for Gallery and Image blocks in List View let you visualize and locate where images on your content are at a glance.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot of the List View tool, showing the new image previews for the Image and Gallery blocks.\" class=\"wp-image-16282\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/list-view-images.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Share patterns across sites</h3>\n\n\n\n<p>Need to use your custom patterns on another site? Import and export them as JSON files from the Site Editor&#8217;s patterns view.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=1024%2C666&#038;ssl=1\" alt=\"Screenshot showing the &quot;Import pattern from JSON files&quot; option from the Site Editor\'s patterns view.\" class=\"wp-image-16303\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/exporting-patterns-1.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Introducing Block Hooks</h3>\n\n\n\n<p><a href=\"https://make.wordpress.org/core/2023/10/15/introducing-block-hooks-for-dynamic-blocks/\">Block Hooks</a> enables developers to automatically insert dynamic blocks at specific content locations, enriching the extensibility of block themes through plugins. While considered a developer tool, this feature is geared to respect your preferences and gives you complete control to add, dismiss, and customize auto-inserted blocks to your needs.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=1024%2C666&#038;ssl=1\" alt=\"Cropped screenshot showing a mini shopping cart (in a red dotted circle) inserted into a navigation menu by Block Hooks.\" class=\"wp-image-16284\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=1024%2C666&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?resize=768%2C499&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/11/block-hooks.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Performance wins</h3>\n\n\n\n<p>This release includes more than 100 performance-related updates for a faster and more efficient experience. Notable enhancements focus on <a href=\"https://make.wordpress.org/core/2023/10/17/improvements-to-template-loading-in-wordpress-6-4/\">template loading performance</a> for themes (including Twenty Twenty-Four), <a href=\"https://make.wordpress.org/core/2023/10/17/script-loading-changes-in-wordpress-6-4/\">usage of the script loading strategies</a> “defer” and “async” in core, blocks, and themes, and <a href=\"https://make.wordpress.org/core/2023/10/17/new-option-functions-in-6-4/\">optimization of autoloaded options</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Accessibility highlights</h3>\n\n\n\n<p>Every release is committed to making WordPress accessible to everyone. WordPress 6.4 brings several List View improvements and aria-label support for the Navigation block, among other highlights. The admin user interface includes enhancements to button placements, &#8220;Add New&#8221; menu items context, and Site Health spoken messages. <a href=\"https://make.wordpress.org/core/2023/11/03/wordpress-6-4-accessibility-improvements/\">Learn more about all the updates</a> aimed at improving accessibility.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Other notes of interest</h3>\n\n\n\n<ul>\n<li>PHP 8.1 or 8.2 are recommended for use with WordPress 6.4. Find in-depth details on PHP support <a href=\"https://wordpress.org/news/2023/10/wordpress-6-4s-php-compatibility/\">in this post</a>.</li>\n\n\n\n<li>WordPress 6.4 <a href=\"https://make.wordpress.org/core/2023/10/16/changes-to-attachment-pages/\">disables attachment pages</a> for new installations.</li>\n</ul>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Learn more about WordPress 6.4</h2>\n\n\n\n<p>Check out the new <a href=\"https://wordpress.org/download/releases/6-4/\">WordPress 6.4 page</a> to learn more about the numerous enhancements and features of this release.</p>\n\n\n\n<p>Explore <a href=\"https://learn.wordpress.org/\">Learn WordPress</a> for quick how-to videos, <a href=\"https://learn.wordpress.org/social-learning/\">online workshops</a>, and other free resources to level up your WordPress knowledge and skills.</p>\n\n\n\n<p>If you are looking for detailed technical notes on new changes, the <a href=\"https://make.wordpress.org/core/2023/10/23/wordpress-6-4-field-guide/\">WordPress 6.4 Field Guide</a> is for you. Don&#8217;t forget to subscribe to the <a href=\"https://developer.wordpress.org/news/\">Developer Blog</a> to stay on top of the latest development updates, tutorials, and more.</p>\n\n\n\n<p>For more information on installation, fixes, and file changes, visit the <a href=\"https://wordpress.org/documentation/wordpress-version/version-6-4/\">6.4 release notes</a>.</p>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">The 6.4 release squad</h2>\n\n\n\n<p>​​The WordPress 6.4 release comes to you from an <strong>underrepresented gender release squad</strong> to welcome and empower diverse voices in the WordPress open source project.</p>\n\n\n\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<blockquote class=\"wp-block-quote\">\n<p class=\"has-extra-large-font-size\">Being part of the 6.4 release coordination team has allowed me to closely observe the intricate release process, where every detail, no matter how minor, is meticulously addressed—taking into account various factors like performance and backward compatibility. There’s still much to learn, but I feel fortunate to have had the chance to contribute to WordPress 6.4.</p>\n<cite>Akshaya Rane, 6.4 release coordinator team member</cite></blockquote>\n\n\n\n<div style=\"height:1px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p>Over several weeks, the 6.4 release squad kept the release on track and moving forward by leading collective work, connecting ideas, and removing roadblocks.</p>\n\n\n\n<ul>\n<li>Release Lead: <a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden Chomphosy</a></li>\n\n\n\n<li>Release Coordinators: <a href=\"https://profiles.wordpress.org/cbringmann/\">Chloé Bringmann</a>, <a href=\"https://profiles.wordpress.org/metalandcoffee/\">Ebonie Butler</a>, <a href=\"https://profiles.wordpress.org/akshayar/\">Akshaya Rane</a>, <a href=\"https://profiles.wordpress.org/francina/\">Francesca Marano</a>. Cohort: <a href=\"https://profiles.wordpress.org/thewebprincess/\">Dee Teal</a>, <a href=\"https://profiles.wordpress.org/jaimieolmstead/\">Jaimie Olmstead</a>, <a href=\"https://profiles.wordpress.org/jyolsna/\">Jyolsna J E</a>, <a href=\"https://profiles.wordpress.org/marybaum/\">Mary Baum</a></li>\n\n\n\n<li>Core Tech Leads: <a href=\"https://profiles.wordpress.org/mikeschroder/\">Mike Schroder</a>, <a href=\"https://profiles.wordpress.org/hellofromtonya/\">Tonya Mork</a>. Cohort: <a href=\"https://profiles.wordpress.org/pypwalters/\">Stephanie Walters</a></li>\n\n\n\n<li>Editor Tech Leads:&nbsp; <a href=\"https://profiles.wordpress.org/mikachan/\">Sarah Norris</a>, <a href=\"https://profiles.wordpress.org/siobhyb/\">Siobhan Bamber</a>, <a href=\"https://profiles.wordpress.org/karmatosed/\">Tammie Lister</a>. Cohort: <a href=\"https://profiles.wordpress.org/68kheart/\">Devan Ferguson</a>, <a href=\"https://profiles.wordpress.org/battelfred/\">Frédérique Battel</a>, <a href=\"https://profiles.wordpress.org/jessicagoddard/\">Jessica Goddard</a>, <a href=\"https://profiles.wordpress.org/1happyplace/\">Katie Ayres</a>, <a href=\"https://profiles.wordpress.org/martatorre/\">Marta Torre</a>, <a href=\"https://profiles.wordpress.org/ngreennc/\">Nyasha Green</a>, <a href=\"https://profiles.wordpress.org/poojabhimani/\">Pooja Bhimani</a></li>\n\n\n\n<li>Core Triage Leads: <a href=\"https://profiles.wordpress.org/nicolefurlan/\">Nicole Furlan</a>, <a href=\"https://profiles.wordpress.org/oglekler/\">Olga Gleckler</a></li>\n\n\n\n<li>Editor Triage Leads: <a href=\"https://profiles.wordpress.org/annezazu/\">Anne McCarthy</a>, <a href=\"https://profiles.wordpress.org/bph/\">Birgit Pauli-Haack</a>. Cohort: <a href=\"https://profiles.wordpress.org/emilyatmobtown/\">Emily Leffler Schulman</a></li>\n\n\n\n<li>Documentation Leads: <a href=\"https://profiles.wordpress.org/webcommsat/\">Abha Thakor</a>, <a href=\"https://profiles.wordpress.org/femkreations/\">Femy Praseeth</a>, <a href=\"https://profiles.wordpress.org/611shabnam/\">Mushrit Shabnam</a>. Cohort: <a href=\"https://profiles.wordpress.org/itsjustdj/\">D.J. Billings</a>, <a href=\"https://wordpress.org/support/users/codente/\">Jamie VanRaalte</a>, <a href=\"https://profiles.wordpress.org/newyorkerlaura/\">Laura Byrne</a>, <a href=\"https://profiles.wordpress.org/baxbridge/\">Tiffany Bridge</a>, <a href=\"https://profiles.wordpress.org/planningwrite/\">Winstina Hughes</a></li>\n\n\n\n<li>Marketing and Communications Leads: <a href=\"https://profiles.wordpress.org/meher/\">Meher Bala</a>, <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a>, <a href=\"https://profiles.wordpress.org/sereedmedia/\">Sé Reed</a>. Cohort: <a href=\"https://profiles.wordpress.org/meaganhanes/\">Meagan Hanes</a>, <a href=\"https://profiles.wordpress.org/michelleames/\">Michelle Frechette</a></li>\n\n\n\n<li>Test Lead: <a href=\"https://profiles.wordpress.org/webtechpooja/\">Pooja Derashri</a>. Cohort: <a href=\"https://profiles.wordpress.org/annebovelett/\">Anne Bovelett</a>, <a href=\"https://profiles.wordpress.org/coachbirgit/\">Birgit Olzem</a></li>\n\n\n\n<li>Design Leads: <a href=\"https://profiles.wordpress.org/elmastudio/\">Ellen Bauer</a>, <a href=\"https://profiles.wordpress.org/estelaris/\">Estela Rueda</a>. Cohort: <a href=\"https://profiles.wordpress.org/allisonplus/\">Allison Tarr</a>, <a href=\"https://profiles.wordpress.org/acirujano/\">Ana Cirujano</a>, <a href=\"https://profiles.wordpress.org/cathibosco1/\">Cathi Bosco</a>, <a href=\"https://profiles.wordpress.org/nudge/\">Sonia Gaballa</a>, <a href=\"https://profiles.wordpress.org/ohia/\">Ohia</a></li>\n\n\n\n<li>Performance Lead: <a href=\"https://profiles.wordpress.org/clarkeemily/\">Emily Clarke</a>. Cohort: <a href=\"https://profiles.wordpress.org/linsoftware/\">Linnea Huxford</a></li>\n\n\n\n<li>Training Leads: <a href=\"https://profiles.wordpress.org/courtneypk/\">Courtney P.K.</a>, <a href=\"https://profiles.wordpress.org/courane01/\">Courtney Roberston</a></li>\n\n\n\n<li>Default Theme Leads: <a href=\"https://profiles.wordpress.org/luminuu/\">Jessica Lyschik</a>, <a href=\"https://profiles.wordpress.org/onemaggie/\">Maggie Cabrera</a></li>\n</ul>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Thank you, contributors</h2>\n\n\n\n<p>WordPress believes in democratizing publishing and the freedoms that come with open source. Supporting this idea is a global and diverse community of people working together to strengthen the software.</p>\n\n\n\n<p>WordPress 6.4 reflects the countless efforts and passion of <strong>more than 600 contributors in at least 56 countries</strong>. This release also welcomed over 170 first-time contributors!</p>\n\n\n\n<p>Their collaboration delivered more than 1150 enhancements and fixes, ensuring a stable release for all—a testament to the power and capability of the WordPress open source community.</p>\n\n\n\n<p class=\"is-style-wporg-props-long alignfull\"><a href=\"https://profiles.wordpress.org/6adminit/\">6adminit</a> · <a href=\"https://profiles.wordpress.org/aaroncampbell/\">Aaron D. Campbell</a> · <a href=\"https://profiles.wordpress.org/jorbin/\">Aaron Jorbin</a> · <a href=\"https://profiles.wordpress.org/aaronrobertshaw/\">Aaron Robertshaw</a> · <a href=\"https://profiles.wordpress.org/aayusha/\">aayusha</a> · <a href=\"https://profiles.wordpress.org/webcommsat/\">Abha Thakor</a> · <a href=\"https://profiles.wordpress.org/omarabid/\">Abid Omar</a> · <a href=\"https://profiles.wordpress.org/adamsilverstein/\">Adam Silverstein</a> · <a href=\"https://profiles.wordpress.org/adhun/\">Adhun Anand</a> · <a href=\"https://profiles.wordpress.org/ajmcfadyen/\">admcfajn</a> · <a href=\"https://profiles.wordpress.org/adrianduffell/\">adrianduffell</a> · <a href=\"https://profiles.wordpress.org/aegkr/\">aegkr</a> · <a href=\"https://profiles.wordpress.org/ahardyjpl/\">ahardyjpl</a> · <a href=\"https://profiles.wordpress.org/ahmedgeek/\">Ahmed Hussein</a> · <a href=\"https://profiles.wordpress.org/chaion07/\">Ahmed Kabir Chaion</a> · <a href=\"https://profiles.wordpress.org/ajakaroth/\">ajakaroth</a> · <a href=\"https://profiles.wordpress.org/wildworks/\">Aki Hamano</a> · <a href=\"https://profiles.wordpress.org/akihiroharai/\">Akihiro Harai</a> · <a href=\"https://profiles.wordpress.org/atachibana/\">Akira Tachibana</a> · <a href=\"https://profiles.wordpress.org/akshayar/\">Akshaya Rane</a> · <a href=\"https://profiles.wordpress.org/alaminfirdows/\">Al-Amin Firdows</a> · <a href=\"https://profiles.wordpress.org/schlessera/\">Alain Schlesser</a> · <a href=\"https://profiles.wordpress.org/aljullu/\">Albert Juh&#233; Lluveras</a> · <a href=\"https://profiles.wordpress.org/xknown/\">Alex Concha</a> · <a href=\"https://profiles.wordpress.org/alexkingorg/\">Alex King</a> · <a href=\"https://profiles.wordpress.org/ajlende/\">Alex Lende</a> · <a href=\"https://profiles.wordpress.org/alexstine/\">Alex Stine</a> · <a href=\"https://profiles.wordpress.org/alexandrebuffet/\">Alexandre Buffet</a> · <a href=\"https://profiles.wordpress.org/alishabajracharya27/\">Alisha Bajracharya</a> · <a href=\"https://profiles.wordpress.org/allisonplus/\">Allison Tarr</a> · <a href=\"https://profiles.wordpress.org/alvitazwar052/\">Alvi Tazwar</a> · <a href=\"https://profiles.wordpress.org/amedv/\">amedv</a> · <a href=\"https://profiles.wordpress.org/acirujano/\">Ana Cirujano</a> · <a href=\"https://profiles.wordpress.org/anandau14/\">Anand Upadhyay</a> · <a href=\"https://profiles.wordpress.org/anlino/\">Anders Nor&#233;n</a> · <a href=\"https://profiles.wordpress.org/oandregal/\">Andr&#233;</a> · <a href=\"https://profiles.wordpress.org/afercia/\">Andrea Fercia</a> · <a href=\"https://profiles.wordpress.org/andraganescu/\">Andrei Draganescu</a> · <a href=\"https://profiles.wordpress.org/andrewhayward/\">Andrew Hayward</a> · <a href=\"https://profiles.wordpress.org/l1nuxjedi/\">Andrew Hutchings</a> · <a href=\"https://profiles.wordpress.org/nacin/\">Andrew Nacin</a> · <a href=\"https://profiles.wordpress.org/azaozz/\">Andrew Ozz</a> · <a href=\"https://profiles.wordpress.org/andrewserong/\">Andrew Serong</a> · <a href=\"https://profiles.wordpress.org/eatingrules/\">Andrew Wilder</a> · <a href=\"https://profiles.wordpress.org/afragen/\">Andy Fragen</a> · <a href=\"https://profiles.wordpress.org/apeatling/\">Andy Peatling</a> · <a href=\"https://profiles.wordpress.org/wpgurudev/\">Ankit Gade</a> · <a href=\"https://profiles.wordpress.org/ankit-k-gupta/\">Ankit K Gupta</a> · <a href=\"https://profiles.wordpress.org/ankitmaru/\">Ankit Panchal</a> · <a href=\"https://profiles.wordpress.org/annashopina/\">Anna</a> · <a href=\"https://profiles.wordpress.org/askdesign/\">Anne Katzeff</a> · <a href=\"https://profiles.wordpress.org/annezazu/\">Anne McCarthy</a> · <a href=\"https://profiles.wordpress.org/annebovelett/\">Anne-Mieke Bovelett</a> · <a href=\"https://profiles.wordpress.org/anphira/\">anphira</a> · <a href=\"https://profiles.wordpress.org/antpb/\">Anthony Burchell</a> · <a href=\"https://profiles.wordpress.org/aplauche/\">Anton Plauche</a> · <a href=\"https://profiles.wordpress.org/atimmer/\">Anton Timmermans</a> · <a href=\"https://profiles.wordpress.org/antonvlasenko/\">Anton Vlasenko</a> · <a href=\"https://profiles.wordpress.org/anveshika/\">Anveshika Srivastava</a> · <a href=\"https://profiles.wordpress.org/archon810/\">archon810</a> · <a href=\"https://profiles.wordpress.org/arena/\">arena</a> · <a href=\"https://profiles.wordpress.org/aristath/\">Ari Stathopoulos</a> · <a href=\"https://profiles.wordpress.org/armondal/\">Arnab Mondal</a> · <a href=\"https://profiles.wordpress.org/artemiosans/\">Artemio Morales</a> · <a href=\"https://profiles.wordpress.org/arthur791004/\">Arthur Chu</a> · <a href=\"https://profiles.wordpress.org/asafm7/\">asafm7</a> · <a href=\"https://profiles.wordpress.org/aslamdoctor/\">Aslam Doctor</a> · <a href=\"https://profiles.wordpress.org/aurooba/\">Aurooba Ahmed</a> · <a href=\"https://profiles.wordpress.org/austinginder/\">Austin Ginder</a> · <a href=\"https://profiles.wordpress.org/ayeshrajans/\">Ayesh Karunaratne</a> · <a href=\"https://profiles.wordpress.org/azharckra/\">azharckra</a> · <a href=\"https://profiles.wordpress.org/balub/\">Balu B</a> · <a href=\"https://profiles.wordpress.org/bangank36/\">bangank36</a> · <a href=\"https://profiles.wordpress.org/barbmiller/\">barbmiller</a> · <a href=\"https://profiles.wordpress.org/barry/\">Barry</a> · <a href=\"https://profiles.wordpress.org/bartkalisz/\">Bart</a> · <a href=\"https://profiles.wordpress.org/basiliskan/\">Basilis Kanonidis</a> · <a href=\"https://profiles.wordpress.org/beafialho/\">Beatriz Fialho</a> · <a href=\"https://profiles.wordpress.org/behoney/\">behoney</a> · <a href=\"https://profiles.wordpress.org/benharri/\">ben</a> · <a href=\"https://profiles.wordpress.org/scruffian/\">Ben Dwyer</a> · <a href=\"https://profiles.wordpress.org/bengreeley/\">Ben Greeley</a> · <a href=\"https://profiles.wordpress.org/ubernaut/\">Ben Hansen</a> · <a href=\"https://profiles.wordpress.org/bfintal/\">Benjamin Intal</a> · <a href=\"https://profiles.wordpress.org/benjamin_zekavica/\">Benjamin Zekavica</a> · <a href=\"https://profiles.wordpress.org/benjaminknox/\">benjaminknox</a> · <a href=\"https://profiles.wordpress.org/benoitchantre/\">Benoit Chantre</a> · <a href=\"https://profiles.wordpress.org/bernhard reiter/\">Bernhard Reiter</a> · <a href=\"https://profiles.wordpress.org/bernhard-reiter/\">Bernie Reiter</a> · <a href=\"https://profiles.wordpress.org/bhrugesh12/\">Bhrugesh Bavishi</a> · <a href=\"https://profiles.wordpress.org/bijayyadav/\">Bijay Yadav</a> · <a href=\"https://profiles.wordpress.org/binsaifullah/\">Binsaifullah</a> · <a href=\"https://profiles.wordpress.org/bplv/\">Biplav</a> · <a href=\"https://profiles.wordpress.org/dhamibirendra/\">Birendra Dhami</a> · <a href=\"https://profiles.wordpress.org/coachbirgit/\">Birgit Olzem</a> · <a href=\"https://profiles.wordpress.org/bph/\">Birgit Pauli-Haack</a> · <a href=\"https://profiles.wordpress.org/bradley2083/\">Block Themes Pro</a> · <a href=\"https://profiles.wordpress.org/bmalsht/\">bmalsht</a> · <a href=\"https://profiles.wordpress.org/gitlost/\">bonger</a> · <a href=\"https://profiles.wordpress.org/bookwyrm/\">bookwyrm</a> · <a href=\"https://profiles.wordpress.org/boonebgorges/\">Boone Gorges</a> · <a href=\"https://profiles.wordpress.org/bor0/\">Boro Sitnikovski</a> · <a href=\"https://profiles.wordpress.org/bjorsch/\">Brad Jorsch</a> · <a href=\"https://profiles.wordpress.org/crazyjaco/\">Bradley Jacobs</a> · <a href=\"https://profiles.wordpress.org/kraftbj/\">Brandon Kraft</a> · <a href=\"https://profiles.wordpress.org/bvreeman22/\">Brandon Vreeman</a> · <a href=\"https://profiles.wordpress.org/bgardner/\">Brian Gardner</a> · <a href=\"https://profiles.wordpress.org/masteradhoc/\">Brian Haas</a> · <a href=\"https://profiles.wordpress.org/brookemk/\">Brooke</a> · <a href=\"https://profiles.wordpress.org/brookedot/\">Brooke.</a> · <a href=\"https://profiles.wordpress.org/trynet/\">Bud Kraus</a> · <a href=\"https://profiles.wordpress.org/icaleb/\">Caleb Burks</a> · <a href=\"https://profiles.wordpress.org/snicco/\">Calvin Alkan</a> · <a href=\"https://profiles.wordpress.org/karl94/\">Carlo Cannas</a> · <a href=\"https://profiles.wordpress.org/cbravobernal/\">Carlos Bravo</a> · <a href=\"https://profiles.wordpress.org/carlosgprim/\">Carlos G. P.</a> · <a href=\"https://profiles.wordpress.org/poena/\">Carolina Nymark</a> · <a href=\"https://profiles.wordpress.org/cathibosco1/\">Cathi Bosco</a> · <a href=\"https://profiles.wordpress.org/ceer/\">ceer</a> · <a href=\"https://profiles.wordpress.org/cenkdemir/\">cenkdemir</a> · <a href=\"https://profiles.wordpress.org/shireling/\">Chad Chadbourne</a> · <a href=\"https://profiles.wordpress.org/chasedsiedu/\">chased@si.edu</a> · <a href=\"https://profiles.wordpress.org/chintan1896/\">Chintan hingrajiya</a> · <a href=\"https://profiles.wordpress.org/chipbennett/\">Chip Bennett</a> · <a href=\"https://profiles.wordpress.org/cbringmann/\">Chloé Bringmann</a> · <a href=\"https://profiles.wordpress.org/crunnells/\">Chris Runnells</a> · <a href=\"https://profiles.wordpress.org/chriscct7/\">chriscct7</a> · <a href=\"https://profiles.wordpress.org/chrisdesrochers/\">chrisdesrochers</a> · <a href=\"https://profiles.wordpress.org/codersantosh/\">codersantosh</a> · <a href=\"https://profiles.wordpress.org/costdev/\">Colin Stewart</a> · <a href=\"https://profiles.wordpress.org/coreyw/\">Corey Worrell</a> · <a href=\"https://profiles.wordpress.org/courtneypk/\">Courtney Patubo Kranzke</a> · <a href=\"https://profiles.wordpress.org/courane01/\">Courtney Robertson</a> · <a href=\"https://profiles.wordpress.org/mitogh/\">Crisoforo Gaspar</a> · <a href=\"https://profiles.wordpress.org/crstauf/\">crstauf</a> · <a href=\"https://profiles.wordpress.org/littlebigthing/\">Csaba (LittleBigThings)</a> · <a href=\"https://profiles.wordpress.org/cu121/\">Cupid Chakma</a> · <a href=\"https://profiles.wordpress.org/didierjm/\">cybeardjm</a> · <a href=\"https://profiles.wordpress.org/cyberchicken/\">Cyberchicken</a> · <a href=\"https://profiles.wordpress.org/extendwings/\">Daisuke Takahashi</a> · <a href=\"https://profiles.wordpress.org/dajeema/\">Dajeema Rai</a> · <a href=\"https://profiles.wordpress.org/colorful-tones/\">Damon Cook</a> · <a href=\"https://profiles.wordpress.org/damonsharp/\">Damon Sharp</a> · <a href=\"https://profiles.wordpress.org/dantovbein/\">Dan Tovbein</a> · <a href=\"https://profiles.wordpress.org/danielbachhuber/\">Daniel Bachhuber</a> · <a href=\"https://profiles.wordpress.org/talldanwp/\">Daniel Richards</a> · <a href=\"https://profiles.wordpress.org/danieldudzic/\">danieldudzic</a> · <a href=\"https://profiles.wordpress.org/mte90/\">Daniele Scasciafratte</a> · <a href=\"https://profiles.wordpress.org/queerdevperson/\">Danielle Zarcaro</a> · <a href=\"https://profiles.wordpress.org/danieltj/\">danieltj</a> · <a href=\"https://profiles.wordpress.org/darerodz/\">darerodz</a> · <a href=\"https://profiles.wordpress.org/dkotter/\">Darin Kotter</a> · <a href=\"https://profiles.wordpress.org/darkfate/\">darkfate</a> · <a href=\"https://profiles.wordpress.org/nerrad/\">Darren Ethier (nerrad)</a> · <a href=\"https://profiles.wordpress.org/darshitrajyaguru97/\">Darshit Rajyaguru</a> · <a href=\"https://profiles.wordpress.org/davelo/\">Dave Loodts</a> · <a href=\"https://profiles.wordpress.org/dave03/\">dave03</a> · <a href=\"https://profiles.wordpress.org/davidbaumwald/\">David Baumwald</a> · <a href=\"https://profiles.wordpress.org/davidbinda/\">David Biňovec</a> · <a href=\"https://profiles.wordpress.org/dpcalhoun/\">David Calhoun</a> · <a href=\"https://profiles.wordpress.org/desmith/\">David E. Smith</a> · <a href=\"https://profiles.wordpress.org/dfavor/\">David Favor</a> · <a href=\"https://profiles.wordpress.org/dlh/\">David Herrera</a> · <a href=\"https://profiles.wordpress.org/dryanpress/\">David Ryan</a> · <a href=\"https://profiles.wordpress.org/get_dave/\">David Smith</a> · <a href=\"https://profiles.wordpress.org/dawidurbanski/\">Dawid Urbanski</a> · <a href=\"https://profiles.wordpress.org/daxelrod/\">daxelrod</a> · <a href=\"https://profiles.wordpress.org/arnedb/\">De Belser Arne</a> · <a href=\"https://profiles.wordpress.org/dsas/\">Dean Sas</a> · <a href=\"https://profiles.wordpress.org/thewebprincess/\">Dee Teal</a> · <a href=\"https://profiles.wordpress.org/deepakvijayan/\">Deepak Vijayan</a> · <a href=\"https://profiles.wordpress.org/dingo_d/\">Denis Žoljom</a> · <a href=\"https://profiles.wordpress.org/dmsnell/\">Dennis Snell</a> · <a href=\"https://profiles.wordpress.org/derekblank/\">Derek Blank</a> · <a href=\"https://profiles.wordpress.org/emrikol/\">Derrick Tennant</a> · <a href=\"https://profiles.wordpress.org/68kheart/\">Devan Ferguson</a> · <a href=\"https://profiles.wordpress.org/dharm1025/\">Dharmesh Patel</a> · <a href=\"https://profiles.wordpress.org/dhrumilk/\">Dhrumil Kumbhani</a> · <a href=\"https://profiles.wordpress.org/dhruvishah2203/\">Dhruvi Shah</a> · <a href=\"https://profiles.wordpress.org/dianeco/\">Diane Co</a> · <a href=\"https://profiles.wordpress.org/dilipbheda/\">Dilip Bheda</a> · <a href=\"https://profiles.wordpress.org/dimitrism/\">Dimitris Mitsis</a> · <a href=\"https://profiles.wordpress.org/dd32/\">Dion Hulse</a> · <a href=\"https://profiles.wordpress.org/itsjustdj/\">DJ</a> · <a href=\"https://profiles.wordpress.org/djcowan/\">dj.cowan</a> · <a href=\"https://profiles.wordpress.org/ocean90/\">Dominik Schilling</a> · <a href=\"https://profiles.wordpress.org/doughamlin/\">doughamlin</a> · <a href=\"https://profiles.wordpress.org/drewapicture/\">Drew Jaynes</a> · <a href=\"https://profiles.wordpress.org/elrae/\">Earle Davies</a> · <a href=\"https://profiles.wordpress.org/metalandcoffee/\">Ebonie Butler</a> · <a href=\"https://profiles.wordpress.org/ediamin/\">Edi Amin</a> · <a href=\"https://profiles.wordpress.org/cais/\">Edward Caissie</a> · <a href=\"https://profiles.wordpress.org/ehtis/\">Ehtisham S.</a> · <a href=\"https://profiles.wordpress.org/ellatrix/\">Ella van Durpe</a> · <a href=\"https://profiles.wordpress.org/elmastudio/\">Ellen Bauer</a> · <a href=\"https://profiles.wordpress.org/emailjoey/\">emailjoey</a> · <a href=\"https://profiles.wordpress.org/codex-m/\">Emerson Maningo</a> · <a href=\"https://profiles.wordpress.org/clarkeemily/\">Emily Clarke</a> · <a href=\"https://profiles.wordpress.org/emilyatmobtown/\">Emily Leffler Schulman</a> · <a href=\"https://profiles.wordpress.org/emirpprime/\">emirpprime</a> · <a href=\"https://profiles.wordpress.org/enodekciw/\">enodekciw</a> · <a href=\"https://profiles.wordpress.org/lopo/\">Enrico Battocchi</a> · <a href=\"https://profiles.wordpress.org/kebbet/\">Erik Betshammar</a> · <a href=\"https://profiles.wordpress.org/esratpopy/\">Esrat Sultana Popy</a> · <a href=\"https://profiles.wordpress.org/estelaris/\">Estela Rueda</a> · <a href=\"https://profiles.wordpress.org/fabiankaegy/\">Fabian K&#228;gy</a> · <a href=\"https://profiles.wordpress.org/gaambo/\">Fabian Todt</a> · <a href=\"https://profiles.wordpress.org/fabiorubioglio/\">Fabio Rubioglio</a> · <a href=\"https://profiles.wordpress.org/faisal03/\">Faisal Alvi</a> · <a href=\"https://profiles.wordpress.org/felipeelia/\">Felipe Elia</a> · <a href=\"https://profiles.wordpress.org/flixos90/\">Felix Arntz</a> · <a href=\"https://profiles.wordpress.org/femkreations/\">Femy Praseeth</a> · <a href=\"https://profiles.wordpress.org/floydwilde/\">floydwilde</a> · <a href=\"https://profiles.wordpress.org/foliovision/\">FolioVision</a> · <a href=\"https://profiles.wordpress.org/francina/\">Francesca Marano</a> · <a href=\"https://profiles.wordpress.org/nexflaszlo/\">Frank Laszlo</a> · <a href=\"https://profiles.wordpress.org/battelfred/\">Fredde Battel</a> · <a href=\"https://profiles.wordpress.org/fzhantw/\">fzhantw</a> · <a href=\"https://profiles.wordpress.org/mintindeed/\">Gabriel Koen</a> · <a href=\"https://profiles.wordpress.org/pauthake015/\">Ganesh Dahal</a> · <a href=\"https://profiles.wordpress.org/garrett-eclipse/\">Garrett Hyder</a> · <a href=\"https://profiles.wordpress.org/garyc40/\">Gary Cao</a> · <a href=\"https://profiles.wordpress.org/pento/\">Gary Pendergast</a> · <a href=\"https://profiles.wordpress.org/soulseekah/\">Gennady Kovshenin</a> · <a href=\"https://profiles.wordpress.org/revgeorge/\">George Hotelling</a> · <a href=\"https://profiles.wordpress.org/mamaduka/\">George Mamadashvili</a> · <a href=\"https://profiles.wordpress.org/geriux/\">Gerardo Pacheco</a> · <a href=\"https://profiles.wordpress.org/mokagio/\">Gio Lodi</a> · <a href=\"https://profiles.wordpress.org/glendaviesnz/\">Glen Davies</a> · <a href=\"https://profiles.wordpress.org/gnanasekaran/\">Gnanasekaran Loganathan</a> · <a href=\"https://profiles.wordpress.org/ingeniumed/\">Gopal Krishnan</a> · <a href=\"https://profiles.wordpress.org/90lines/\">GOZER</a> · <a href=\"https://profiles.wordpress.org/gpotter/\">gpotter</a> · <a href=\"https://profiles.wordpress.org/grantmkin/\">Grant M. Kinney</a> · <a href=\"https://profiles.wordpress.org/gregross/\">Greg Ross</a> · <a href=\"https://profiles.wordpress.org/gziolo/\">Greg Ziółkowski</a> · <a href=\"https://profiles.wordpress.org/gregfuller/\">gregfuller</a> · <a href=\"https://profiles.wordpress.org/guss77/\">Guss77</a> · <a href=\"https://profiles.wordpress.org/bordoni/\">Gustavo Bordoni</a> · <a href=\"https://profiles.wordpress.org/gvgvgvijayan/\">gvgvgvijayan</a> · <a href=\"https://profiles.wordpress.org/priethor/\">H&#233;ctor Prieto</a> · <a href=\"https://profiles.wordpress.org/poran766/\">H.M. Mushfiqur Rahman</a> · <a href=\"https://profiles.wordpress.org/hanneslsm/\">hanneslsm</a> · <a href=\"https://profiles.wordpress.org/hztyfoon/\">Hanzala Taifun</a> · <a href=\"https://profiles.wordpress.org/hareesh-pillai/\">Hareesh S</a> · <a href=\"https://profiles.wordpress.org/harshgajipara/\">Harsh Gajipara</a> · <a href=\"https://profiles.wordpress.org/hasanuzzamanshamim/\">Hasanuzzaman</a> · <a href=\"https://profiles.wordpress.org/hazdiego/\">Haz</a> · <a href=\"https://profiles.wordpress.org/helen/\">Helen Hou-Sandi</a> · <a href=\"https://profiles.wordpress.org/tejwanihemant/\">Hemant Tejwani</a> · <a href=\"https://profiles.wordpress.org/hbhalodia/\">Hit Bhalodia</a> · <a href=\"https://profiles.wordpress.org/hlunter/\">hlunter</a> · <a href=\"https://profiles.wordpress.org/howdy_mcgee/\">Howdy_McGee</a> · <a href=\"https://profiles.wordpress.org/huzaifaalmesbah/\">Huzaifa Al Mesbah</a> · <a href=\"https://profiles.wordpress.org/iandunn/\">Ian Dunn</a> · <a href=\"https://profiles.wordpress.org/incursadesigns/\">Incursa Designs</a> · <a href=\"https://profiles.wordpress.org/ironprogrammer/\">ironprogrammer</a> · <a href=\"https://profiles.wordpress.org/isabel_brison/\">Isabel Brison</a> · <a href=\"https://profiles.wordpress.org/itecrs/\">itecrs</a> · <a href=\"https://profiles.wordpress.org/ivanzhuck/\">Ivan Zhuck</a> · <a href=\"https://profiles.wordpress.org/jaimieolmstead/\">jaimieolmstead</a> · <a href=\"https://profiles.wordpress.org/jakariaistauk/\">Jakaria Istauk</a> · <a href=\"https://profiles.wordpress.org/jakemgold/\">Jake Goldman</a> · <a href=\"https://profiles.wordpress.org/whyisjake/\">Jake Spurlock</a> · <a href=\"https://profiles.wordpress.org/bonkerz/\">James Hunt</a> · <a href=\"https://profiles.wordpress.org/thelovelist/\">James Janco</a> · <a href=\"https://profiles.wordpress.org/jameskoster/\">James Koster</a> · <a href=\"https://profiles.wordpress.org/james roberts/\">James Roberts</a> · <a href=\"https://profiles.wordpress.org/james0r/\">james0r</a> · <a href=\"https://profiles.wordpress.org/jamiemchale/\">Jamie McHale</a> · <a href=\"https://profiles.wordpress.org/perrelet/\">Jamie Perrelet</a> · <a href=\"https://profiles.wordpress.org/codente/\">Jamie VanRaalte</a> · <a href=\"https://profiles.wordpress.org/jane/\">jane</a> · <a href=\"https://profiles.wordpress.org/jsnajdr/\">Jarda Snajdr</a> · <a href=\"https://profiles.wordpress.org/yari2u/\">Jari Vuorenmaa</a> · <a href=\"https://profiles.wordpress.org/ipajen/\">Jarko Piironen</a> · <a href=\"https://profiles.wordpress.org/jason_the_adams/\">Jason Adams</a> · <a href=\"https://profiles.wordpress.org/boogah/\">Jason Cosper</a> · <a href=\"https://profiles.wordpress.org/pbking/\">Jason Crist</a> · <a href=\"https://profiles.wordpress.org/jastos/\">jastos</a> · <a href=\"https://profiles.wordpress.org/audrasjb/\">Jean-Baptiste Audras</a> · <a href=\"https://profiles.wordpress.org/jblz/\">Jeff Bowen</a> · <a href=\"https://profiles.wordpress.org/krokodok/\">Jeff Chi</a> · <a href=\"https://profiles.wordpress.org/jeffeverhart383/\">Jeff Everhart</a> · <a href=\"https://profiles.wordpress.org/jffng/\">Jeff Ong</a> · <a href=\"https://profiles.wordpress.org/jeffikus/\">jeffikus</a> · <a href=\"https://profiles.wordpress.org/jeffpaul/\">Jeffrey Paul</a> · <a href=\"https://profiles.wordpress.org/jeflopodev/\">jeflopo</a> · <a href=\"https://profiles.wordpress.org/jeremyfelt/\">Jeremy Felt</a> · <a href=\"https://profiles.wordpress.org/jeherve/\">Jeremy Herve</a> · <a href=\"https://profiles.wordpress.org/jeremyyip/\">Jeremy Yip</a> · <a href=\"https://profiles.wordpress.org/jeryj/\">jeryj</a> · <a href=\"https://profiles.wordpress.org/jesin/\">Jesin A</a> · <a href=\"https://profiles.wordpress.org/jessplease/\">Jessica Duarte</a> · <a href=\"https://profiles.wordpress.org/jessicagoddard/\">Jessica Goddard</a> · <a href=\"https://profiles.wordpress.org/luminuu/\">Jessica Lyschik</a> · <a href=\"https://profiles.wordpress.org/jick/\">Jick</a> · <a href=\"https://profiles.wordpress.org/jipmoors/\">Jip Moors</a> · <a href=\"https://profiles.wordpress.org/jivygraphics/\">jivygraphics</a> · <a href=\"https://profiles.wordpress.org/joedolson/\">Joe Dolson</a> · <a href=\"https://profiles.wordpress.org/joehoyle/\">Joe Hoyle</a> · <a href=\"https://profiles.wordpress.org/joemcgill/\">Joe McGill</a> · <a href=\"https://profiles.wordpress.org/joen/\">Joen A.</a> · <a href=\"https://profiles.wordpress.org/johnbillion/\">John Blackbourn</a> · <a href=\"https://profiles.wordpress.org/bitmachina/\">John Hooks</a> · <a href=\"https://profiles.wordpress.org/johnjamesjacoby/\">John James Jacoby</a> · <a href=\"https://profiles.wordpress.org/johnregan3/\">John Regan</a> · <a href=\"https://profiles.wordpress.org/jb510/\">Jon Brown</a> · <a href=\"https://profiles.wordpress.org/duck_/\">Jon Cave</a> · <a href=\"https://profiles.wordpress.org/desrosj/\">Jonathan Desrosiers</a> · <a href=\"https://profiles.wordpress.org/spacedmonkey/\">Jonny Harris</a> · <a href=\"https://profiles.wordpress.org/jonoaldersonwp/\">Jono Alderson</a> · <a href=\"https://profiles.wordpress.org/varjodesigns/\">Joona</a> · <a href=\"https://profiles.wordpress.org/joostdevalk/\">Joost de Valk</a> · <a href=\"https://profiles.wordpress.org/jordanpak/\">JordanPak</a> · <a href=\"https://profiles.wordpress.org/jordesign/\">jordesign</a> · <a href=\"https://profiles.wordpress.org/jorgefilipecosta/\">Jorge Costa</a> · <a href=\"https://profiles.wordpress.org/dunhakdis/\">Joseph G.</a> · <a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden</a> · <a href=\"https://profiles.wordpress.org/joshcanhelp/\">joshcanhelp</a> · <a href=\"https://profiles.wordpress.org/joshuatf/\">joshuatf</a> · <a href=\"https://profiles.wordpress.org/jrtashjian/\">JR Tashjian</a> · <a href=\"https://profiles.wordpress.org/juanfra/\">Juan Aldasoro</a> · <a href=\"https://profiles.wordpress.org/juanmaguitar/\">JuanMa Garrido</a> · <a href=\"https://profiles.wordpress.org/jrf/\">Juliette Reinders Folmer</a> · <a href=\"https://profiles.wordpress.org/greenshady/\">Justin Tadlock</a> · <a href=\"https://profiles.wordpress.org/jyolsna/\">Jyolsna J E</a> · <a href=\"https://profiles.wordpress.org/ashikur698/\">K M Ashikur Rahman</a> · <a href=\"https://profiles.wordpress.org/kadamwhite/\">K. Adam White</a> · <a href=\"https://profiles.wordpress.org/kafleg/\">KafleG</a> · <a href=\"https://profiles.wordpress.org/kevin940726/\">Kai Hao</a> · <a href=\"https://profiles.wordpress.org/kalmang/\">Kalmang</a> · <a href=\"https://profiles.wordpress.org/kalpeshh/\">Kalpesh</a> · <a href=\"https://profiles.wordpress.org/bosskhj/\">Kamrul Hasan</a> · <a href=\"https://profiles.wordpress.org/karlijnbk/\">Karlijn Bok</a> · <a href=\"https://profiles.wordpress.org/karolmanijak/\">Karol Manijak</a> · <a href=\"https://profiles.wordpress.org/thekt12/\">Karthik Thayyil</a> · <a href=\"https://profiles.wordpress.org/1happyplace/\">Katie Ayres</a> · <a href=\"https://profiles.wordpress.org/kawsaralameven/\">kawsaralameven</a> · <a href=\"https://profiles.wordpress.org/kkoppenhaver/\">Keanan Koppenhaver</a> · <a href=\"https://profiles.wordpress.org/ryelle/\">Kelly Choyce-Dwan</a> · <a href=\"https://profiles.wordpress.org/kevinfodness/\">Kevin Fodness</a> · <a href=\"https://profiles.wordpress.org/p51labs/\">Kevin Miller</a> · <a href=\"https://profiles.wordpress.org/ktaron/\">Kevin Taron</a> · <a href=\"https://profiles.wordpress.org/khleomix/\">khleomix</a> · <a href=\"https://profiles.wordpress.org/khokansardar/\">Khokan Sardar</a> · <a href=\"https://profiles.wordpress.org/kimannwall/\">Kim Coleman</a> · <a href=\"https://profiles.wordpress.org/kishanjasani/\">Kishan Jasani</a> · <a href=\"https://profiles.wordpress.org/kkmuffme/\">kkmuffme</a> · <a href=\"https://profiles.wordpress.org/olein/\">Koji Kuno</a> · <a href=\"https://profiles.wordpress.org/kovshenin/\">Konstantin Kovshenin</a> · <a href=\"https://profiles.wordpress.org/obenland/\">Konstantin Obenland</a> · <a href=\"https://profiles.wordpress.org/kopila47/\">Kopila Shrestha</a> · <a href=\"https://profiles.wordpress.org/krupalpanchal/\">Krupal Panchal</a> · <a href=\"https://profiles.wordpress.org/labunchemjong/\">Labun Chemjong</a> · <a href=\"https://profiles.wordpress.org/lancewillett/\">Lance Willett</a> · <a href=\"https://profiles.wordpress.org/lhe2012/\">LarryWEB</a> · <a href=\"https://profiles.wordpress.org/lastsplash/\">lastsplash (a11n)</a> · <a href=\"https://profiles.wordpress.org/laumindproductscomau/\">lau@mindproducts.com.au</a> · <a href=\"https://profiles.wordpress.org/launchinteractive/\">launchinteractive</a> · <a href=\"https://profiles.wordpress.org/lada7042/\">Laura Adamonis</a> · <a href=\"https://profiles.wordpress.org/newyorkerlaura/\">Laura Byrne</a> · <a href=\"https://profiles.wordpress.org/laurelfulford/\">laurelfulford</a> · <a href=\"https://profiles.wordpress.org/oncecoupled/\">Lauren</a> · <a href=\"https://profiles.wordpress.org/luckybhumkar/\">Laxmikant Bhumkar</a> · <a href=\"https://profiles.wordpress.org/leewillis77/\">Lee Willis</a> · <a href=\"https://profiles.wordpress.org/0mirka00/\">Lena Morita</a> · <a href=\"https://profiles.wordpress.org/lgladdy/\">Liam Gladdy</a> · <a href=\"https://profiles.wordpress.org/rudlinkon/\">Linkon Miyan</a> · <a href=\"https://profiles.wordpress.org/linsoftware/\">Linnea Huxford</a> · <a href=\"https://profiles.wordpress.org/lloydbudd/\">Lloyd Budd</a> · <a href=\"https://profiles.wordpress.org/thelovekesh/\">Lovekesh Kumar</a> · <a href=\"https://profiles.wordpress.org/gigitux/\">Luigi</a> · <a href=\"https://profiles.wordpress.org/zaguiini/\">Luis Felipe Zaguini</a> · <a href=\"https://profiles.wordpress.org/luisherranz/\">Luis Herranz</a> · <a href=\"https://profiles.wordpress.org/lukecavanagh/\">Luke Cavanagh</a> · <a href=\"https://profiles.wordpress.org/lunaluna/\">lunaluna</a> · <a href=\"https://profiles.wordpress.org/lyndauwp/\">lyndauwp</a> · <a href=\"https://profiles.wordpress.org/pagelab/\">M&#225;rcio Duarte</a> · <a href=\"https://profiles.wordpress.org/maciejmackowiak/\">maciejmackowiak</a> · <a href=\"https://profiles.wordpress.org/madejackson/\">madejackson</a> · <a href=\"https://profiles.wordpress.org/madhudollu/\">Madhu Dollu</a> · <a href=\"https://profiles.wordpress.org/mrdollu/\">Madhu Dollu</a> · <a href=\"https://profiles.wordpress.org/onemaggie/\">Maggie Cabrera</a> · <a href=\"https://profiles.wordpress.org/mhimon/\">Mahbub Hasan Imon</a> · <a href=\"https://profiles.wordpress.org/maahrokh/\">Mahrokh</a> · <a href=\"https://profiles.wordpress.org/mai21/\">Mai</a> · <a href=\"https://profiles.wordpress.org/travel_girl/\">Maja Benke</a> · <a href=\"https://profiles.wordpress.org/maltfield/\">maltfield</a> · <a href=\"https://profiles.wordpress.org/maneshtimilsina/\">Manesh Timilsina</a> · <a href=\"https://profiles.wordpress.org/manfcarlo/\">manfcarlo</a> · <a href=\"https://profiles.wordpress.org/manzoorwanijk/\">Manzoor Wani</a> · <a href=\"https://profiles.wordpress.org/marcelle42/\">marcelle42</a> · <a href=\"https://profiles.wordpress.org/fullofcaffeine/\">Marcelo de Moraes Serpa</a> · <a href=\"https://profiles.wordpress.org/mciampini/\">Marco Ciampini</a> · <a href=\"https://profiles.wordpress.org/pereirinha/\">Marco Pereirinha</a> · <a href=\"https://profiles.wordpress.org/marcoevich/\">Marcoevich</a> · <a href=\"https://profiles.wordpress.org/margolisj/\">margolisj</a> · <a href=\"https://profiles.wordpress.org/tyxla/\">Marin Atanasov</a> · <a href=\"https://profiles.wordpress.org/santosguillamot/\">Mario Santos</a> · <a href=\"https://profiles.wordpress.org/clorith/\">Marius L. J.</a> · <a href=\"https://profiles.wordpress.org/markjaquith/\">Mark Jaquith</a> · <a href=\"https://profiles.wordpress.org/markoserb/\">Marko Ivanovic</a> · <a href=\"https://profiles.wordpress.org/martatorre/\">Marta Torre</a> · <a href=\"https://profiles.wordpress.org/mhkuu/\">Martijn van der Klis</a> · <a href=\"https://profiles.wordpress.org/martinkrcho/\">martin.krcho</a> · <a href=\"https://profiles.wordpress.org/marybaum/\">Mary Baum</a> · <a href=\"https://profiles.wordpress.org/masoudnkh/\">Masoud NKH</a> · <a href=\"https://profiles.wordpress.org/mathsgrinds/\">mathsgrinds</a> · <a href=\"https://profiles.wordpress.org/mmaattiiaass/\">Matias Benedetto</a> · <a href=\"https://profiles.wordpress.org/matveb/\">Matias Ventura</a> · <a href=\"https://profiles.wordpress.org/mattkeys/\">Matt Keys</a> · <a href=\"https://profiles.wordpress.org/mwtsn/\">Matt Watson</a> · <a href=\"https://profiles.wordpress.org/mklute101/\">Matthaus Klute</a> · <a href=\"https://profiles.wordpress.org/mattheweppelsheimer/\">Matthew Eppelsheimer</a> · <a href=\"https://profiles.wordpress.org/matthewfarlymn/\">Matthew Farlymn</a> · <a href=\"https://profiles.wordpress.org/mattheu/\">Matthew Haines-Young</a> · <a href=\"https://profiles.wordpress.org/matthewjho/\">matthewjho</a> · <a href=\"https://profiles.wordpress.org/maurodf/\">maurodf</a> · <a href=\"https://profiles.wordpress.org/maxinacube/\">Maxwell Morgan</a> · <a href=\"https://profiles.wordpress.org/maysi/\">maysi</a> · <a href=\"https://profiles.wordpress.org/hrshahin/\">Md HR Shahin</a> · <a href=\"https://profiles.wordpress.org/meaganhanes/\">meagan hanes</a> · <a href=\"https://profiles.wordpress.org/iammehedi1/\">Mehedi Hassan</a> · <a href=\"https://profiles.wordpress.org/meher/\">Meher Bala</a> · <a href=\"https://profiles.wordpress.org/melchoyce/\">Mel Choyce-Dwan</a> · <a href=\"https://profiles.wordpress.org/mer00x/\">mer00x</a> · <a href=\"https://profiles.wordpress.org/merel1988/\">merel1988</a> · <a href=\"https://profiles.wordpress.org/michael-arestad/\">Michael Arestad</a> · <a href=\"https://profiles.wordpress.org/mburridge/\">Michael Burridge</a> · <a href=\"https://profiles.wordpress.org/mshowes/\">Michael Showes</a> · <a href=\"https://profiles.wordpress.org/czapla/\">Michal Czaplinski</a> · <a href=\"https://profiles.wordpress.org/michalooki/\">Michalooki</a> · <a href=\"https://profiles.wordpress.org/michelleblanchette/\">Michelle Blanchette</a> · <a href=\"https://profiles.wordpress.org/michelleames/\">Michelle Frechette</a> · <a href=\"https://profiles.wordpress.org/michi91/\">Michi91</a> · <a href=\"https://profiles.wordpress.org/mcsf/\">Miguel Fonseca</a> · <a href=\"https://profiles.wordpress.org/simison/\">Mikael Korpela</a> · <a href=\"https://profiles.wordpress.org/mikejolley/\">Mike Jolley (a11n)</a> · <a href=\"https://profiles.wordpress.org/mmcalister/\">Mike McAlister</a> · <a href=\"https://profiles.wordpress.org/mikeschinkel/\">Mike Schinkel</a> · <a href=\"https://profiles.wordpress.org/mikeschroder/\">Mike Schroder</a> · <a href=\"https://profiles.wordpress.org/mikestraw/\">Mike Straw</a> · <a href=\"https://profiles.wordpress.org/mikinc860/\">Mikin Chauhan</a> · <a href=\"https://profiles.wordpress.org/gonzomir/\">Milen Petrinski - Gonzo</a> · <a href=\"https://profiles.wordpress.org/mimitips/\">mimi</a> · <a href=\"https://profiles.wordpress.org/mitchellaustin/\">mitchellaustin</a> · <a href=\"https://profiles.wordpress.org/mhshujon/\">Monir</a> · <a href=\"https://profiles.wordpress.org/mrinal013/\">Mrinal Haque</a> · <a href=\"https://profiles.wordpress.org/mrwweb/\">mrwweb</a> · <a href=\"https://profiles.wordpress.org/wparslan/\">Muhammad Arslan</a> · <a href=\"https://profiles.wordpress.org/devmuhib/\">Muhibul Haque</a> · <a href=\"https://profiles.wordpress.org/mujuonly/\">mujuonly</a> · <a href=\"https://profiles.wordpress.org/mukesh27/\">Mukesh Panchal</a> · <a href=\"https://profiles.wordpress.org/faguni22/\">Mumtahina Faguni</a> · <a href=\"https://profiles.wordpress.org/611shabnam/\">Mushrit Shabnam</a> · <a href=\"https://profiles.wordpress.org/webdev8800/\">Myles Taylor</a> · <a href=\"https://profiles.wordpress.org/nalininonstopnewsuk/\">Nalini Thakor</a> · <a href=\"https://profiles.wordpress.org/nandhuraj/\">nandhuraj</a> · <a href=\"https://profiles.wordpress.org/nazgul/\">Nazgul</a> · <a href=\"https://profiles.wordpress.org/nazsabuz/\">Nazmul Sabuz</a> · <a href=\"https://profiles.wordpress.org/neilorangepeel/\">Neil Hainsworth</a> · <a href=\"https://profiles.wordpress.org/nendeb55/\">nendeb</a> · <a href=\"https://profiles.wordpress.org/ndiego/\">Nick Diego</a> · <a href=\"https://profiles.wordpress.org/rahe/\">Nicolas Juen</a> · <a href=\"https://profiles.wordpress.org/nicolefurlan/\">Nicole Furlan</a> · <a href=\"https://profiles.wordpress.org/nicomollet/\">nicomollet</a> · <a href=\"https://profiles.wordpress.org/nidhidhandhukiya/\">nidhidhandhukiya</a> · <a href=\"https://profiles.wordpress.org/nielslange/\">Niels Lange</a> · <a href=\"https://profiles.wordpress.org/nihar007/\">Nihar Ranjan Das</a> · <a href=\"https://profiles.wordpress.org/ntsekouras/\">Nik Tsekouras</a> · <a href=\"https://profiles.wordpress.org/rabmalin/\">Nilambar Sharma</a> · <a href=\"https://profiles.wordpress.org/nilovelez/\">Nilo Velez</a> · <a href=\"https://profiles.wordpress.org/niravsherasiya7707/\">niravsherasiya7707</a> · <a href=\"https://profiles.wordpress.org/dasnitesh780/\">Nitesh Das</a> · <a href=\"https://profiles.wordpress.org/nithi22/\">Nithin John</a> · <a href=\"https://profiles.wordpress.org/nithins53/\">Nithin SreeRaj</a> · <a href=\"https://profiles.wordpress.org/noahtallen/\">Noah Allen</a> · <a href=\"https://profiles.wordpress.org/ngreennc/\">Nyasha</a> · <a href=\"https://profiles.wordpress.org/ockham/\">ockham</a> · <a href=\"https://profiles.wordpress.org/ohia/\">Ohia</a> · <a href=\"https://profiles.wordpress.org/okat/\">okat</a> · <a href=\"https://profiles.wordpress.org/oglekler/\">Olga Gleckler</a> · <a href=\"https://profiles.wordpress.org/domainsupport/\">Oliver Campion</a> · <a href=\"https://profiles.wordpress.org/olliejones/\">OllieJones</a> · <a href=\"https://profiles.wordpress.org/paaljoachim/\">Paal Joachim Romdahl</a> · <a href=\"https://profiles.wordpress.org/pannelars/\">pannelars</a> · <a href=\"https://profiles.wordpress.org/swissspidy/\">Pascal Birchler</a> · <a href=\"https://profiles.wordpress.org/pbiron/\">Paul Biron</a> · <a href=\"https://profiles.wordpress.org/paulkevan/\">Paul Kevan</a> · <a href=\"https://profiles.wordpress.org/pavelevap/\">pavelevap</a> · <a href=\"https://profiles.wordpress.org/pedromendonca/\">Pedro Mendon&#231;a</a> · <a href=\"https://profiles.wordpress.org/pentatonicfunk/\">pentatonicfunk</a> · <a href=\"https://profiles.wordpress.org/gungeekatx/\">Pete Nelson</a> · <a href=\"https://profiles.wordpress.org/peterwilsoncc/\">Peter Wilson</a> · <a href=\"https://profiles.wordpress.org/petitphp/\">petitphp</a> · <a href=\"https://profiles.wordpress.org/petrosparaskevopoulos/\">petrosparaskevopoulos</a> · <a href=\"https://profiles.wordpress.org/walbo/\">Petter Walb&#248; Johnsg&#229;rd</a> · <a href=\"https://profiles.wordpress.org/phillsav/\">Phill</a> · <a href=\"https://profiles.wordpress.org/nekojonez/\">Pieterjan Deneys</a> · <a href=\"https://profiles.wordpress.org/piyushdeshmukh/\">piyushdeshmukh</a> · <a href=\"https://profiles.wordpress.org/plugindevs/\">Plugin Devs</a> · <a href=\"https://profiles.wordpress.org/poojabhimani/\">Pooja Bhimani</a> · <a href=\"https://profiles.wordpress.org/webtechpooja/\">Pooja Derashri</a> · <a href=\"https://profiles.wordpress.org/pooja1210/\">Pooja N Muchandikar</a> · <a href=\"https://profiles.wordpress.org/pranavjoshi/\">pranavjoshi</a> · <a href=\"https://profiles.wordpress.org/prashantbhivsane/\">Prashant</a> · <a href=\"https://profiles.wordpress.org/presskopp/\">Presskopp</a> · <a href=\"https://profiles.wordpress.org/rlmc/\">r-c</a> · <a href=\"https://profiles.wordpress.org/rajinsharwar/\">Rajin Sharwar</a> · <a href=\"https://profiles.wordpress.org/rahmohn/\">Ramon Ahnert</a> · <a href=\"https://profiles.wordpress.org/rcorrales/\">Ramon Corrales</a> · <a href=\"https://profiles.wordpress.org/ramonopoly/\">Ramon James</a> · <a href=\"https://profiles.wordpress.org/rebekowitz/\">Rebekah Markowitz</a> · <a href=\"https://profiles.wordpress.org/tabrisrp/\">Remy Perona</a> · <a href=\"https://profiles.wordpress.org/renyot/\">ren</a> · <a href=\"https://profiles.wordpress.org/renathoc/\">Renatho (a11n)</a> · <a href=\"https://profiles.wordpress.org/renehermi/\">Rene Hermenau</a> · <a href=\"https://profiles.wordpress.org/rmartinezduque/\">Reyes Martínez</a> · <a href=\"https://profiles.wordpress.org/youknowriad/\">Riad Benguella</a> · <a href=\"https://profiles.wordpress.org/rianrietveld/\">Rian Rietveld</a> · <a href=\"https://profiles.wordpress.org/richtabor/\">Rich Tabor</a> · <a href=\"https://profiles.wordpress.org/noisysocks/\">Robert Anderson</a> · <a href=\"https://profiles.wordpress.org/sanchothefat/\">Robert O\'Rourke</a> · <a href=\"https://profiles.wordpress.org/robinwpdeveloper/\">Robin</a> · <a href=\"https://profiles.wordpress.org/robpetrin/\">robpetrin</a> · <a href=\"https://profiles.wordpress.org/ravanh/\">Rolf Allard van Hagen</a> · <a href=\"https://profiles.wordpress.org/ryanduff/\">Ryan Duff</a> · <a href=\"https://profiles.wordpress.org/rmccue/\">Ryan McCue</a> · <a href=\"https://profiles.wordpress.org/ohryan/\">Ryan Neudorf</a> · <a href=\"https://profiles.wordpress.org/welcher/\">Ryan Welcher</a> · <a href=\"https://profiles.wordpress.org/sergiomdgomes/\">S&#233;rgio Gomes</a> · <a href=\"https://profiles.wordpress.org/mi5t4n/\">Sagar Tamang</a> · <a href=\"https://profiles.wordpress.org/sajjad67/\">Sajjad Hossain Sagor</a> · <a href=\"https://profiles.wordpress.org/sakibmd/\">Sakib Mohammed</a> · <a href=\"https://profiles.wordpress.org/salcode/\">Sal Ferrarello</a> · <a href=\"https://profiles.wordpress.org/samba45/\">samba45</a> · <a href=\"https://profiles.wordpress.org/karmacharya50/\">Samir Karmacharya</a> · <a href=\"https://profiles.wordpress.org/viralsampat/\">Sampat Viral</a> · <a href=\"https://profiles.wordpress.org/otto42/\">Samuel Wood (Otto)</a> · <a href=\"https://profiles.wordpress.org/mikachan/\">Sarah Norris</a> · <a href=\"https://profiles.wordpress.org/sarahwilliams889/\">Sarah Williams</a> · <a href=\"https://profiles.wordpress.org/sarathar/\">Sarath AR</a> · <a href=\"https://profiles.wordpress.org/satishprajapati/\">Satish Prajapati</a> · <a href=\"https://profiles.wordpress.org/saulirajala/\">saulirajala</a> · <a href=\"https://profiles.wordpress.org/saxonfletcher/\">saxonfletcher</a> · <a href=\"https://profiles.wordpress.org/sc0ttkclark/\">Scott Kingsley Clark</a> · <a href=\"https://profiles.wordpress.org/coffee2code/\">Scott Reilly</a> · <a href=\"https://profiles.wordpress.org/wonderboymusic/\">Scott Taylor</a> · <a href=\"https://profiles.wordpress.org/hiyascout/\">Scout James</a> · <a href=\"https://profiles.wordpress.org/scribu/\">scribu</a> · <a href=\"https://profiles.wordpress.org/sergeybiryukov/\">Sergey Biryukov</a> · <a href=\"https://profiles.wordpress.org/seedsca/\">Sergio Scabuzzo</a> · <a href=\"https://profiles.wordpress.org/smrubenstein/\">Seth Rubenstein</a> · <a href=\"https://profiles.wordpress.org/shailu25/\">Shail Mehta</a> · <a href=\"https://profiles.wordpress.org/shawfactor/\">shawfactor</a> · <a href=\"https://profiles.wordpress.org/shooper/\">Shawn Hooper</a> · <a href=\"https://profiles.wordpress.org/shiloey/\">shilo-ey</a> · <a href=\"https://profiles.wordpress.org/shivashankerbhatta/\">Shiva Shanker Bhatta</a> · <a href=\"https://profiles.wordpress.org/shresthaaman/\">shresthaaman</a> · <a href=\"https://profiles.wordpress.org/shubhamsedani/\">Shubham Sedani</a> · <a href=\"https://profiles.wordpress.org/10upsimon/\">Simon Dowdles</a> · <a href=\"https://profiles.wordpress.org/siobhan/\">Siobhan</a> · <a href=\"https://profiles.wordpress.org/siobhyb/\">Siobhan Bamber</a> · <a href=\"https://profiles.wordpress.org/smit08/\">Smit Rathod</a> · <a href=\"https://profiles.wordpress.org/sofiashendi/\">sofiashendi</a> · <a href=\"https://profiles.wordpress.org/nudge/\">Sonia Gaballa</a> · <a href=\"https://profiles.wordpress.org/soean/\">Soren Wrede</a> · <a href=\"https://profiles.wordpress.org/virtality-marketing-solutions/\">SourceView</a> · <a href=\"https://profiles.wordpress.org/spenserhale/\">Spenser Hale</a> · <a href=\"https://profiles.wordpress.org/pypwalters/\">Stephanie Walters</a> · <a href=\"https://profiles.wordpress.org/sabernhardt/\">Stephen Bernhardt</a> · <a href=\"https://profiles.wordpress.org/netweb/\">Stephen Edgar</a> · <a href=\"https://profiles.wordpress.org/stephenerdelyi/\">Steve Erdelyi</a> · <a href=\"https://profiles.wordpress.org/stevejonesdev/\">Steve Jones</a> · <a href=\"https://profiles.wordpress.org/subodhsun/\">Subodh Sunuwar</a> · <a href=\"https://profiles.wordpress.org/subrataemfluence/\">Subrata Sarkar</a> · <a href=\"https://profiles.wordpress.org/sujichandran14/\">Suji K Chandran</a> · <a href=\"https://profiles.wordpress.org/sumisubedi/\">Sumi Subedi</a> · <a href=\"https://profiles.wordpress.org/sumitbagthariya16/\">Sumit Bagthariya</a> · <a href=\"https://profiles.wordpress.org/sumitsingh/\">Sumit Singh</a> · <a href=\"https://profiles.wordpress.org/sunitarai/\">Sunita Rai</a> · <a href=\"https://profiles.wordpress.org/suprsam/\">suprsam</a> · <a href=\"https://profiles.wordpress.org/syamraj24/\">syamraj24</a> · <a href=\"https://profiles.wordpress.org/cybr/\">Sybre Waaijer</a> · <a href=\"https://profiles.wordpress.org/synchro/\">Synchro</a> · <a href=\"https://profiles.wordpress.org/sereedmedia/\">Sé Reed</a> · <a href=\"https://profiles.wordpress.org/tacoverdo/\">Taco Verdonschot</a> · <a href=\"https://profiles.wordpress.org/tahmidulkarim/\">Tahmid ul Karim</a> · <a href=\"https://profiles.wordpress.org/tahmina1du/\">Tahmina Jahan</a> · <a href=\"https://profiles.wordpress.org/takayukister/\">Takayuki Miyoshi</a> · <a href=\"https://profiles.wordpress.org/karmatosed/\">Tammie Lister</a> · <a href=\"https://profiles.wordpress.org/tanvirul/\">Tanvirul Haque</a> · <a href=\"https://profiles.wordpress.org/tykoted/\">Teddy Patriarca</a> · <a href=\"https://profiles.wordpress.org/tejadev/\">tejadev</a> · <a href=\"https://profiles.wordpress.org/thinkluke/\">thinkluke</a> · <a href=\"https://profiles.wordpress.org/thomasplevy/\">Thomas Patrick Levy</a> · <a href=\"https://profiles.wordpress.org/tibbsa/\">tibbsa</a> · <a href=\"https://profiles.wordpress.org/baxbridge/\">Tiffany Bridge</a> · <a href=\"https://profiles.wordpress.org/tnolte/\">Tim Nolte</a> · <a href=\"https://profiles.wordpress.org/timdix/\">timdix</a> · <a href=\"https://profiles.wordpress.org/timothyblynjacobs/\">Timothy Jacobs</a> · <a href=\"https://profiles.wordpress.org/tmatsuur/\">tmatsuur</a> · <a href=\"https://profiles.wordpress.org/tobiasbg/\">TobiasBg</a> · <a href=\"https://profiles.wordpress.org/tobifjellner/\">tobifjellner (Tor-Bjorn Fjellner)</a> · <a href=\"https://profiles.wordpress.org/tomybyte/\">Tom</a> · <a href=\"https://profiles.wordpress.org/tomjcafferkey/\">Tom Cafferkey</a> · <a href=\"https://profiles.wordpress.org/thomashorta/\">Tom H</a> · <a href=\"https://profiles.wordpress.org/tjnowell/\">Tom J Nowell</a> · <a href=\"https://profiles.wordpress.org/tomluckies/\">tomluckies</a> · <a href=\"https://profiles.wordpress.org/shimotomoki/\">Tomoki Shimomura</a> · <a href=\"https://profiles.wordpress.org/tomsommer/\">tomsommer</a> · <a href=\"https://profiles.wordpress.org/starbuck/\">Tony G</a> · <a href=\"https://profiles.wordpress.org/hellofromtonya/\">Tonya Mork</a> · <a href=\"https://profiles.wordpress.org/toro_unit/\">Toro_Unit (Hiroshi Urabe)</a> · <a href=\"https://profiles.wordpress.org/zodiac1978/\">Torsten Landsiedel</a> · <a href=\"https://profiles.wordpress.org/toscho/\">toscho</a> · <a href=\"https://profiles.wordpress.org/rilwis/\">Tran Ngoc Tuan Anh</a> · <a href=\"https://profiles.wordpress.org/trinisha/\">Trinisha</a> · <a href=\"https://profiles.wordpress.org/trishasalas/\">Trisha Salas</a> · <a href=\"https://profiles.wordpress.org/tristanleboss/\">tristanleboss</a> · <a href=\"https://profiles.wordpress.org/tv-productions/\">TV productions</a> · <a href=\"https://profiles.wordpress.org/ugyensupport/\">Ugyen Dorji</a> · <a href=\"https://profiles.wordpress.org/grapplerulrich/\">Ulrich</a> · <a href=\"https://profiles.wordpress.org/benimub/\">Umesh Balayar</a> · <a href=\"https://profiles.wordpress.org/upadalavipul/\">Upadala Vipul</a> · <a href=\"https://profiles.wordpress.org/utsav72640/\">Utsav tilava</a> · <a href=\"https://profiles.wordpress.org/valentindu62/\">valentindu62</a> · <a href=\"https://profiles.wordpress.org/valmedia2023/\">Valerie Blackburn</a> · <a href=\"https://profiles.wordpress.org/vcanales/\">Vicente Canales</a> · <a href=\"https://profiles.wordpress.org/szepeviktor/\">Viktor Sz&#233;pe</a> · <a href=\"https://profiles.wordpress.org/vipuljnext/\">Vipul Ghori</a> · <a href=\"https://profiles.wordpress.org/vivekawsm/\">vivekawsm</a> · <a href=\"https://profiles.wordpress.org/vortfu/\">vortfu</a> · <a href=\"https://profiles.wordpress.org/vrajadas/\">Vraja Das</a> · <a href=\"https://profiles.wordpress.org/webashrafians/\">webashrafians</a> · <a href=\"https://profiles.wordpress.org/webmandesign/\">WebMan Design &#124; Oliver Juhas</a> · <a href=\"https://profiles.wordpress.org/westonruter/\">Weston Ruter</a> · <a href=\"https://profiles.wordpress.org/whsajid/\">WHSajid</a> · <a href=\"https://profiles.wordpress.org/skorasaurus/\">Will Skora</a> · <a href=\"https://profiles.wordpress.org/earnjam/\">William Earnhardt</a> · <a href=\"https://profiles.wordpress.org/wvega/\">Willington Vega</a> · <a href=\"https://profiles.wordpress.org/planningwrite/\">Winstina</a> · <a href=\"https://profiles.wordpress.org/winterstreet/\">winterstreet</a> · <a href=\"https://profiles.wordpress.org/wraithkenny/\">WraithKenny</a> · <a href=\"https://profiles.wordpress.org/wyrfel/\">wyrfel</a> · <a href=\"https://profiles.wordpress.org/yosephtamang/\">Yoseph Tamang</a> · <a href=\"https://profiles.wordpress.org/fierevere/\">Yui</a> · <a href=\"https://profiles.wordpress.org/zieladam/\">zieladam</a> · <a href=\"https://profiles.wordpress.org/zunaid321/\">Zunaid Amin</a> · <a href=\"https://profiles.wordpress.org/letraceursnork/\">Илья</a></p>\n\n\n\n<p>Over <a href=\"https://translate.wordpress.org/stats/\">60 locales have translated 90 percent</a> or more of WordPress 6.4 into their language. Community translators are working hard to ensure more translations are on their way. Thank you to everyone who helps make WordPress available in 200 languages.</p>\n\n\n\n<p>Last but not least, thanks to the volunteers who contribute to the <a href=\"https://wordpress.org/support/\">support forums</a> by answering questions from WordPress users worldwide.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Get involved</h3>\n\n\n\n<p>Participation in WordPress is not limited to coding. If contributing appeals to you, learning more and getting involved is easy. Discover the teams that come together to <a href=\"https://make.wordpress.org/\">Make WordPress</a>, and use <a href=\"https://make.wordpress.org/contribute/\">this interactive tool</a> to help you decide which is right for you.</p>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Looking ahead</h2>\n\n\n\n<p>Over the past <a href=\"https://wp20.wordpress.net/\">two decades</a>, WordPress has transformed the digital publishing landscape and empowered anyone to create and share, from <a href=\"https://wordpress.org/showcase/\">handcrafted personal stories to world-changing movements</a>.</p>\n\n\n\n<p>The present and future of WordPress hold exciting opportunities for everyone, builders and enterprises alike. The foundational work for <a href=\"https://make.wordpress.org/core/tag/phase-3/\">Phase 3</a> of the <a href=\"https://wordpress.org/about/roadmap/\">roadmap</a> continues, with efforts focused on fostering real-time collaboration and streamlining publishing flows to improve how creators and teams work together in WordPress.</p>\n\n\n\n<p>Stay on top of the latest news and contributing opportunities by subscribing to <a href=\"https://wordpress.org/news/\">WordPress News</a> and the <a href=\"https://wordpress.org/news/podcast/\">WP Briefing podcast</a>.</p>\n\n\n\n<div style=\"height:2px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">A release haiku</h2>\n\n\n\n<p>The smooth feel of jazz<br>The cutting-edge of the web<br>Install 6.4</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16299\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:66:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 6.4 Release Candidate 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2023/11/wordpress-6-4-release-candidate-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 01 Nov 2023 19:21:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:11:\"development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16247\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:163:\"WordPress 6.4 RC3 is ready for download and testing. Reaching this phase of the release cycle is an important milestone. Check out what\'s new and how you can help.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Reyes Martínez\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8230:\"\n<p>The third release candidate (RC3) for WordPress 6.4 is ready to download!</p>\n\n\n\n<p><strong>This version of the WordPress software is under development</strong>. Please do not install, run, or test this version of WordPress on production or mission-critical websites. Instead, it’s recommended that you evaluate RC3 on a test server and site.</p>\n\n\n\n<p>WordPress 6.4 is <a href=\"https://make.wordpress.org/core/6-4/\">slated for release</a> on <strong>November 7, 2023</strong>—less than a week away. If you haven’t tried it, now is the time.</p>\n\n\n\n<p>You can test WordPress 6.4 RC3 in three ways:</p>\n\n\n\n<ol>\n<li><strong>Plugin</strong>: Install and activate the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin on a WordPress install (select the “Bleeding edge” channel and “Beta/RC Only” stream).</li>\n\n\n\n<li><strong>Direct download</strong>: Download the <a href=\"https://wordpress.org/wordpress-6.4-RC3.zip\">RC3 version (zip)</a> and install it on a WordPress site.</li>\n\n\n\n<li><strong>Command line</strong>: Use the following <a href=\"https://make.wordpress.org/cli/\">WP-CLI</a> command:<br><code>wp core update --version=6.4-RC3</code></li>\n</ol>\n\n\n\n<p><a href=\"https://wordpress.org/news/2023/10/wordpress-6-4-release-candidate-1/\">Read the RC1 announcement</a> for featured highlights, and check the <a href=\"https://make.wordpress.org/core/\">Make WordPress Core blog</a> for <a href=\"https://make.wordpress.org/core/tag/6-4/\">6.4-related posts</a>. If you are looking for detailed technical notes on new features and improvements, the <a href=\"https://make.wordpress.org/core/2023/10/23/wordpress-6-4-field-guide/\"><strong>WordPress 6.4 Field Guide</strong></a> is for you.</p>\n\n\n\n<p>The WordPress 6.4 release is brought to you by an <a href=\"https://make.wordpress.org/core/2023/06/05/wordpress-6-4-development-cycle/\">underrepresented gender release squad</a> to welcome the participation and partnership of those who identify as gender-underrepresented in the WordPress open source project.</p>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">What’s in WordPress 6.4 RC3?</h2>\n\n\n\n<p>Thanks to everyone who has tested the beta and RC releases. Since RC2 was released on October 24, there have been more than 25 issues resolved. You can browse the technical details for all recent updates using these links:</p>\n\n\n\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/commits/wp/6.4\">GitHub commits for 6.4</a></li>\n\n\n\n<li><a href=\"https://core.trac.wordpress.org/query?status=closed&amp;changetime=10%2F25%2F2023..11%2F01%2F2023&amp;milestone=6.4&amp;col=id&amp;col=milestone&amp;col=owner&amp;col=type&amp;col=priority&amp;order=id\">Closed Trac tickets since RC2</a></li>\n\n\n\n<li><a href=\"https://github.com/WordPress/twentytwentyfour/commits/\">GitHub commits for Twenty Twenty-Four</a></li>\n</ul>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">PHP compatibility update</h2>\n\n\n\n<p>It’s recommended to use PHP 8.1 or 8.2 with the upcoming 6.4 release. Refer to <a href=\"https://wordpress.org/news/2023/10/wordpress-6-4s-php-compatibility/\">WordPress 6.4&#8217;s PHP compatibility post</a> for more details.</p>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">Contributing to 6.4</h2>\n\n\n\n<p>WordPress is open source software made possible by a community of people collaborating on and contributing to its development. The resources below outline various ways you can help, regardless of your technical expertise.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Get involved in testing</h3>\n\n\n\n<p>Your feedback and help in testing are vital to developing the WordPress software and ensuring its quality. It’s also a meaningful way for anyone to contribute. <a href=\"https://make.wordpress.org/test/2023/09/26/help-test-wordpress-6-4/\">Check out this guide</a> for instructions on testing WordPress 6.4 features.</p>\n\n\n\n<p>The core Query block requires more <a href=\"https://make.wordpress.org/test/2023/09/26/help-test-wordpress-6-4/#query-loop-block-pagination-enhancements\">testing and feedback</a> to ensure the latest changes to prevent full page reloads work smoothly. Please note that this setting was called &#8220;Enhanced pagination&#8221; but has recently been renamed, and it&#8217;s now referred to as &#8220;Force page reload&#8221; instead.</p>\n\n\n\n<p>If you encounter an issue, please report it to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta area</a> of the support forums or directly to <a href=\"https://core.trac.wordpress.org/newticket\">WordPress Trac</a> if you are comfortable writing a reproducible bug report. You can also check your issue against a list of <a href=\"https://core.trac.wordpress.org/tickets/major\">known bugs</a>.</p>\n\n\n\n<p>Curious about testing releases in general? Follow along with the <a href=\"https://make.wordpress.org/test/\">testing initiatives in Make Core</a> and join the <a href=\"https://wordpress.slack.com/messages/core-test/\">#core-test channel</a> on <a href=\"https://wordpress.slack.com/\">Making WordPress Slack</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Search for vulnerabilities</h3>\n\n\n\n<p>During the release candidate phase of WordPress 6.4, the <a href=\"https://make.wordpress.org/security/2023/09/26/bug-bounty-for-wordpress-6-4-beta/\">monetary reward for reporting new, unreleased security vulnerabilities</a> is doubled. Please follow responsible disclosure practices as detailed in the project’s security practices and policies outlined on the <a href=\"https://hackerone.com/wordpress\">HackerOne page</a> and in the <a href=\"https://wordpress.org/about/security/\">security white paper</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Update your theme or plugin</h3>\n\n\n\n<p>Do you build themes and plugins? Your products play an integral role in extending the functionality and value of WordPress for users worldwide.</p>\n\n\n\n<p>Hopefully, you have already tested your themes and plugins with WordPress 6.4 betas. With RC3, you will want to continue your testing and update the <em>&#8220;Tested up to&#8221;</em> version in your <a href=\"https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/\">plugin&#8217;s readme file</a> to 6.4.</p>\n\n\n\n<p>Please post detailed information to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">support forums</a> if you find compatibility issues.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Documentation</h3>\n\n\n\n<p>Help the Docs team put the finishing touches on end-user documentation in time for the 6.4 release. Find out what’s needed and how you can help <a href=\"https://make.wordpress.org/docs/2023/10/25/call-for-volunteers-to-help-with-6-4-end-user-documentation/\">in this post</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Help translate WordPress</h3>\n\n\n\n<p>Do you speak a language other than English? ¿Español? Français? Português? Русский? 日本? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help translate WordPress into more than 100 languages</a>.</p>\n\n\n\n<div style=\"height:5px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading\">A RC3 haiku</h2>\n\n\n\n<p>One more week of prep<br>One more week to test the code<br>One more week til launch</p>\n\n\n\n<p><em>Thank you to the following contributors for collaborating on this post: <a href=\'https://profiles.wordpress.org/meher/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>meher</a>, <a href=\'https://profiles.wordpress.org/rmartinezduque/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>rmartinezduque</a>, <a href=\'https://profiles.wordpress.org/sereedmedia/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>sereedmedia</a>, <a href=\'https://profiles.wordpress.org/jorbin/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>jorbin</a>, <a href=\'https://profiles.wordpress.org/luisherranz/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>luisherranz</a>, <a href=\'https://profiles.wordpress.org/marybaum/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>marybaum</a></em>.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16247\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:61:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"WP Briefing: Episode 65: Little Sun Success\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/news/2023/10/episode-65-little-sun-success/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 30 Oct 2023 12:00:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"Podcast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:11:\"wp-briefing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/news/?post_type=podcast&p=16227\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:340:\"Join WordPress Executive Director, Josepha Haden Chomphosy, as she looks at a recent WordPress success story with Little Sun. To help us, we spoke to two special guests with Little Sun, Romane Guégan, Senior Press and Communications Manager, and Ashley Mrozek, Senior Digital Manager. Don’t miss this opportunity for an insider’s look!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"enclosure\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"url\";s:51:\"https://wordpress.org/news/files/2023/10/WPB065.mp3\";s:6:\"length\";s:1:\"0\";s:4:\"type\";s:0:\"\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brett McSherry\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:21512:\"\n<p>Join WordPress Executive Director Josepha Haden Chomphosy as she looks at a recent WordPress success story, the clean energy solution Little Sun, and learns about their WordPress story.</p>\n\n\n\n<p><em><strong>Have a question you&#8217;d like answered? You can submit them to&nbsp;<a href=\"mailto:wpbriefing@wordpress.org\">wpbriefing@wordpress.org</a>, either written or as a voice recording.</strong></em></p>\n\n\n\n<h2 class=\"wp-block-heading\">Credits</h2>\n\n\n\n<p>Host:&nbsp;<a href=\"https://profiles.wordpress.org/chanthaboune/\">Josepha Haden Chomphosy</a><br>Special Guest: Romane Guégan<br>Special Guest: Ashley Mrozek <br>Editor:&nbsp;<a href=\"https://profiles.wordpress.org/dustinhartzler/\">Dustin Hartzler</a><br>Logo:&nbsp;<a href=\"https://profiles.wordpress.org/javiarce/\">Javier Arce</a><br>Production:&nbsp;<a href=\"https://profiles.wordpress.org/bjmcsherry/\">Brett McSherry</a><br>Song: Fearless First by Kevin MacLeod</p>\n\n\n\n<h2 class=\"wp-block-heading\">Show Notes</h2>\n\n\n\n<ul>\n<li>Website: <a href=\"https://littlesun.org/\">Little Sun</a></li>\n\n\n\n<li><strong>Small List of Big Things</strong>\n<ul>\n<li><a href=\"https://wordpress.org/news/2023/10/state-of-the-word-2023/\" target=\"_blank\" rel=\"noreferrer noopener\">State of the Word</a> &#8211; This year&#8217;s annual keynote, State of the Word, will be on December 11. Save the date to hear the WordPress project&#8217;s co-founder, <a href=\"https://ma.tt/\" target=\"_blank\" rel=\"noreferrer noopener\">Matt Mullenweg</a>, share reflections on the project&#8217;s progress and aspirations for the future of open source.</li>\n\n\n\n<li>Celebrating 10,000 Photos in the <a href=\"https://wordpress.org/photos/\">WordPress Photo Directory</a> &#8211; On October 11, the 10,000th photo was approved! <a href=\"https://make.wordpress.org/photos/\" target=\"_blank\" rel=\"noreferrer noopener\">The Photo Team</a> is one of the newest ways to contribute to the WordPress open source project. </li>\n\n\n\n<li><a href=\"https://make.wordpress.org/community/2023/10/18/community-team-training-11-using-the-translate-live-tool/\" target=\"_blank\" rel=\"noreferrer noopener\">Community Team Training #11: Using the Translate Live tool</a>&nbsp;&#8211; Uncover the potential of the &#8220;Translate Live&#8221; tool, which is ideal for presenting at local meetups to engage and onboard new translators for your native language. If you&#8217;re organizing a WordCamp, consider introducing this tool during your Contributor Day.</li>\n\n\n\n<li><a href=\"https://wordpress.org/news/2023/10/a-new-wordpress-showcase/\" target=\"_blank\" rel=\"noreferrer noopener\">A New WordPress Showcase</a>&nbsp;&#8211; The&nbsp;journey to update&nbsp;<a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"noreferrer noopener\">WordPress.org</a>&nbsp;continues with the launch of a new&nbsp;<a href=\"https://wordpress.org/showcase/\" target=\"_blank\" rel=\"noreferrer noopener\">Showcase</a>&nbsp;design. The Showcase is a natural starting point for visitors arriving on&nbsp;WordPress.org, and it both inspires creativity and demonstrates what&#8217;s possible with WordPress.</li>\n</ul>\n</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Transcript</h2>\n\n\n\n<span id=\"more-16227\"></span>\n\n\n\n<p>[00:00:00] <strong>Josepha:</strong> Hello everyone, and welcome to the WordPress Briefing. The podcast where you can catch quick explanations of the ideas behind the WordPress open source project, some insight into the community that supports it, and get a small list of big things coming up in the next two weeks. I&#8217;m your host, Josepha Haden Chomphosy. Here we go.</p>\n\n\n\n<p>[00:00:28] (Intro music)&nbsp;</p>\n\n\n\n<p>[00:00:40] <strong>Josepha:</strong> Today, I&#8217;ve got a special guest with me. I have here a couple of folks from Little Sun, a nonprofit organization that recently moved its entire online presence to WordPress. And we&#8217;re talking everything from their mission statement and donations all the way to their blog and shop.</p>\n\n\n\n<p>Welcome both to the WordPress Briefing.&nbsp;</p>\n\n\n\n<p>[00:00:59] <strong>Ashley:</strong> Thank you.</p>\n\n\n\n<p>[00:01:00] <strong>Romane:</strong> Thank you.&nbsp;</p>\n\n\n\n<p>[00:01:01] <strong>Josepha:</strong> We have with us Little Sun today. Can you start by introducing yourselves and your organization? Just tell us a little bit about what you all do.&nbsp;</p>\n\n\n\n<p>[00:01:08] <strong>Romane:</strong> Hi, my name is Romane Guégan. I&#8217;m a Senior Press and Communications Manager at Little Sun.&nbsp;</p>\n\n\n\n<p>[00:01:14] <strong>Ashley:</strong> And I am Ashley Mrozek. I&#8217;m the Senior Digital Manager.&nbsp;</p>\n\n\n\n<p>[00:01:17] <strong>Josepha:</strong> So what does Little Sun do for the folks who are listening and maybe don&#8217;t know about it yet?&nbsp;</p>\n\n\n\n<p>[00:01:22] <strong>Romane:</strong> Little Sun brings full power and light to communities that live off the grid, with the focus on sub-Saharan Africa because most of the people who lack access to electricity and need them. And we also inspire people to take climate action globally.&nbsp;</p>\n\n\n\n<p>[00:01:39] <strong>Ashley:</strong> So access to solar energy helps kids who don&#8217;t have electricity and study at night. They can complete their homework at night. If their schools are in a more rural area, they will have a light to kind of guide them back home.</p>\n\n\n\n<p>We also work on a lot of electric vocation projects and hospitals. So we&#8217;re, we&#8217;re kind of supporting labors that are, are taking place in the evening, after the sun goes down, among other things.&nbsp;</p>\n\n\n\n<p>[00:02:07] <strong>Josepha:</strong> Yeah. It&#8217;s, I, I think that that is one of the things that folks, probably most of my listeners, probably take for granted, like the easy access to light. And as we all know, the sun is around a lot. And so that is one of our most readily available resources other than potentially wind power. But I think that that is a great mission. And I really think that that&#8217;s wonderful work that y&#8217;all are doing.</p>\n\n\n\n<p>So, is there a particular reason that you focus on sub-Saharan Africa? Is that where you find a majority of people who don&#8217;t have access to that kind of resource are?&nbsp;</p>\n\n\n\n<p>[00:02:43] <strong>Romane:</strong> Yeah. 70% of those people actually need in sub-Saharan Africa, where solar is actually a viable source of energy. Actually, it&#8217;s only 1% of solar, of the solar capital of the generation when we actually deliver solar energy there because there is so much potential.</p>\n\n\n\n<p>[00:03:04] <strong>Josepha:</strong> That&#8217;s amazing. So you said that you all were funded in 2012. I imagine that your business has evolved over time. So, obviously, you all are WordPress users. That&#8217;s why we have you here with us today. But before we get into the questions about WordPress itself. Why don&#8217;t you tell us a bit about how your business needs evolved over time and how you wound up needing a solution that did use WordPress?</p>\n\n\n\n<p>[00:03:31] <strong>Ashley:</strong> So I would say our focus and kind of the different initiatives that we&#8217;ve taken on since 2012 have shifted a lot based on various reasons, where our donors are, where we&#8217;ve kind of found the most need, and where we can be the most impactful.</p>\n\n\n\n<p>And I think as we go into those new geographies, our online presence has become more and more important.&nbsp;</p>\n\n\n\n<p>[00:03:55] <strong>Josepha:</strong> So, before you all switched to WordPress, I understand that you had several sites that you had to merge into one. And so I assume that as you evolved the business and your focus has changed, you realized you needed something a bit more streamlined. So, how was that transition, that migration from a lot of different sites to one big site?&nbsp;</p>\n\n\n\n<p>[00:04:17] <strong>Romane:</strong> Yeah, because we started as a global project. And then, with the time, we evolved, actually also getting new donations. And in the past, we used to have one website where we have our webshop and our mission, our vision, all of our project descriptions.</p>\n\n\n\n<p>But then we had another website only for the foundation. And then you had another foundation in the U.S. So it was the question, okay, how do we put everything together? So we actually switched from littlesun.com to littlesun.org with WordPress, and it was amazing to see how we managed with the team to create an ecosystem approach, including impact, but also sales, and fundraising.&nbsp;</p>\n\n\n\n<p>[00:05:02] <strong>Josepha:</strong> That was a big footprint that you all had, and you kind of consolidated it into one. And for all of our folks listening on the podcast, I&#8217;m going to include some links, not only to their site but then also to a few other things that we&#8217;ve mentioned in here today. So, since you made that change, how has it, how has that impacted the way that you all work with your site or with your online presence?</p>\n\n\n\n<p>[00:05:27] <strong>Ashley:</strong> Yeah, I think using WordPress and having access to WordPress has been hugely valuable for us. We&#8217;re a small team, we&#8217;re a nonprofit, so it is pretty scrappy. Everyone is kind of doing a lot of different things. We don&#8217;t have a dedicated development team. And so being able to easily customize our pages and create new landing pages or make adjustments on the site without that development help has been valuable.</p>\n\n\n\n<p>[00:05:55] <strong>Josepha:</strong> Yeah, so you don&#8217;t have a developer team now. Did you have a developer team when you had all the sites?&nbsp;</p>\n\n\n\n<p>[00:06:01] <strong>Romane:</strong> We just still work with freelancers. </p>\n\n\n\n<p>[00:06:03] <strong>Josepha:</strong> Okay, yeah. I am also not a developer, for what it&#8217;s worth, and have been working with nonprofits for a while. And I understand that problem where you have all these things you need to do and want to do, but there are also things you absolutely have to focus on in order to make your mission possible and your vision come true.</p>\n\n\n\n<p>[00:06:23] <strong>Ashley:</strong> Yeah, and I think, I think WordPress has given us a lot more, like a lot more flexibility to kind of produce new content quickly. And because of that, it&#8217;s just been a lot more efficient, too, for us, you know.&nbsp;</p>\n\n\n\n<p>[00:06:38] <strong>Josepha:</strong> And you all are using Blocks? Are you, like, the best Block builders?</p>\n\n\n\n<p>[00:06:42] <strong>Romane:</strong> Yeah, I love Blocks.&nbsp;</p>\n\n\n\n<p>[00:06:43] <strong>Josepha:</strong> Blocks are a fairly new innovation for the history of WordPress. WordPress has been around for 20 years, so we&#8217;re a nice, mature project. And we&#8217;ve really only had blocks as a functional part of the CMS for probably the last five or so. We&#8217;ve been working on the project a little bit longer. And it has been fascinating to me, like, in my own work that I have done with WordPress, kind of outside of my work with the project, to see, like, how much autonomy you get to have back as somebody who is not a developer, maybe isn&#8217;t a designer, but you do know exactly what you need to have on your site today, right?</p>\n\n\n\n<p>And having to stop and find a freelancer or stop and find some set of developers who can make those changes. For me, when I was specifically working on nonprofit stuff. That was always kind of a moment where I was like, well, I guess I&#8217;ll just go to Facebook and put that on there or something because I was faster than trying to find someone to come help you. And so, I&#8217;m so glad you love the block.</p>\n\n\n\n<p>[00:07:48] <strong>Ashley:</strong> We&#8217;ve created many a landing page.&nbsp;</p>\n\n\n\n<p>[00:07:50] <strong>Josepha:</strong> Also, your site is adorable, and your brand is adorable, in case no one&#8217;s mentioned that lately. Super cute. Super cute.</p>\n\n\n\n<p>[00:07:58] <strong>Josepha:</strong> So, we&#8217;ve talked about how you kind of took a bunch of stuff and made it into one big thing and how that&#8217;s been easier for you all to manage it. But from the standpoint of just, like, somebody who&#8217;s running a nonprofit, someone who&#8217;s running an organization, how has that transition been for your team? I know you said you don&#8217;t have a huge team, but was the move toward WordPress a net benefit over time, or was it immediately beneficial? Like, how has that been for your team? </p>\n\n\n\n<p>[00:08:27] <strong>Romane:</strong> So what&#8217;s interesting actually is that we have a team that is spread also all over the world. And so we have teams in Berlin and in U.S., and New York. In Zambia, too. What was really interesting was how people identify to the new website because now we have to really think, okay, what is the content we want people to see, but also we want our critics to see. And so it kind of unified all of our content at Little Sun. And it was much more like much easier to understand afterwards. </p>\n\n\n\n<p>[00:09:03] <strong>Josepha:</strong> Yeah.&nbsp;</p>\n\n\n\n<p>[00:09:04] <strong>Romane:</strong> And it was because we also work at the intersection of creative communications, impacts, fundraising, technology, and to be able to put everything and have it on the front. And then have the stories to tell the stories from sub-Saharan Africa, from universities who got either a Little Sun lamps or solar systems, and then we have the donation page, so basically everything could be integrated in a super easy way, and it could target different audiences easily, either it&#8217;s someone who wants to partner with us, or a donor, or just someone who wants to be part of our solar training.</p>\n\n\n\n<p>[00:09:46] <strong>Josepha:</strong> Yeah, and I mean, I think that no one will be surprised to hear that if you have multiple things that you have to get everybody to, it really increases the amount of marketing that you have to accomplish, rather than having one place for everyone to go too, and they can see everything that they might want once they arrive. So, that&#8217;s wonderful.</p>\n\n\n\n<p>[00:10:06] <strong>Ashley:</strong> I think I was just going to say, or kind of echo what Romane said about the fact that we have so many different audiences, we have partners, we have donors, we have people who are just coming to learn about solar energy, or who are interested in purchasing a lamp. I think prior to this, it was a little bit confusing for those different audiences to kind of navigate to where they were intended to go to on the site, and now it&#8217;s much more cohesive. And we often hear that from people where it&#8217;s like, it&#8217;s quite easy to, to kind to find what they need to find on the site.&nbsp;</p>\n\n\n\n<p>[00:10:39] <strong>Josepha:</strong> I define the WordPress community as anyone who is using WordPress, regardless of whether they know it or not. And so you all, in my mind, are part of the WordPress Community. And I just wondered if being part of that community has changed your approach to the way that you manage your content online or the way that you have chosen work with your business as like an online entity that also does on-the-ground, in-person thing?</p>\n\n\n\n<p>[00:11:06] <strong>Ashley:</strong> I think definitely. I think we&#8217;re kind of going back to what I said before. I think we&#8217;re much more efficient now. I think in the past, it&#8217;s the idea of, like, well, getting this web page live or publishing this is going to be, you know, we have to think about a huge timeline, that&#8217;s, is going to require a lot of resourcing, a lot of different types of expertise and people, and everything now feels like something that we can, we can launch pretty immediately, which is really wonderful too.</p>\n\n\n\n<p>I would also say just like being a part of the WordPress community too. It&#8217;s the sort of support that we&#8217;ve gotten from your team. It&#8217;s always really tailored. And I think as a nonprofit working with a, like, a much bigger business, you can be apprehensive sometimes, feeling like you won&#8217;t really get that personalized support.&nbsp;</p>\n\n\n\n<p>And I think that&#8217;s something that&#8217;s been so nice with WordPress. Is really feeling like the people we&#8217;re working with are understanding our business and taking the time to understand our needs. And I think that makes us think differently about our online presence as well because then we feel like we have that additional support, which is great.</p>\n\n\n\n<p>[00:12:12] <strong>Josepha:</strong> I&#8217;m always a fan of hearing that people who are passionate about WordPress are also passionate about helping others with WordPress. That&#8217;s one of my favorite things about us. That&#8217;s not true. I have like 25 favorite things about us. And so I need to stop saying that I have one favorite, but I never will.</p>\n\n\n\n<p>Okay, well, do you all have any last thoughts that you just want to share with me or podcast listeners that we have?&nbsp;</p>\n\n\n\n<p>[00:12:36] <strong>Ashley:</strong> Yeah, I think the, the plugins and integrations have been really useful for us. I think it can be really intimidating to bring on, like, a new tech solution or tool and feel like everything that you are already working with or have is going to become outdated or obsolete in some way. And I think it&#8217;s just been really nice to work with WordPress and have all of those transitions be really seamless for everything to connect really well. Yeah, I think that&#8217;s been. That&#8217;s hugely helpful too.&nbsp;</p>\n\n\n\n<p>[00:13:07] <strong>Josepha:</strong> So, was that part of the decision-making process? Like, do I know that this software will be around in the future so that you&#8217;re making an investment in the site now and know that it&#8217;s going to hang around now you can find people help? Like, was that part of the decision-making process?</p>\n\n\n\n<p>[00:13:21] <strong>Ashley:</strong> I think so. I mean, I guess I wasn&#8217;t completely around during the time, but I would say, like, that&#8217;s definitely something that we&#8217;re considering in any kind of tech that we&#8217;re thinking about is it can require so much work to, to kind of bring something on with such a small team. So we want to ensure that, yeah, it&#8217;s going to last, it has longevity, and it&#8217;s going to work with the tools that we already have. So I think all of that is really important for sure.&nbsp;</p>\n\n\n\n<p>[00:13:48] <strong>Josepha:</strong> Well, thank you both so much for joining me. Like I said, we&#8217;ll have a link to littlesun.org in the notes so that you all can learn more about their project and see their beautiful site with their beautiful little solar sunflowers.</p>\n\n\n\n<p>Thank you both for being with me today.&nbsp;</p>\n\n\n\n<p>[00:14:04] <strong>Romane:</strong> Thank you so much.&nbsp;</p>\n\n\n\n<p>[00:14:05] <strong>Ashley:</strong> Thank you so much for having us.</p>\n\n\n\n<p>[00:14:07] (Music interlude)</p>\n\n\n\n<p>[00:14:11] <strong>Josepha:</strong> What a wonderful organization. I&#8217;m so glad that they found WordPress and that it works for them. Let&#8217;s continue our tour today with the small list of big things.</p>\n\n\n\n<p>Item number one, it&#8217;s time to save the date: December 11th, 2023, for this year&#8217;s State of the Word. State of the Word is the annual keynote address delivered by the WordPress Project co-founder Matt Mullenweg. Every year, the event shares reflections on the project&#8217;s progress and aspirations for the future of open source. And so, if that is something that you like to tune into, December 11th is your day.&nbsp;</p>\n\n\n\n<p>Second thing on our list is that we are celebrating our 10,000th photo submission. So, on October 11th, the 10,000th photo was approved. The Photo Team is one of the newest ways to contribute to the WordPress open source project, and it feeds all of those photos into Openverse as well.</p>\n\n\n\n<p>The third thing on our list today is that I want to tell you about a community team training module that just came out. It&#8217;s specifically about the Translate Live tool, and it is ideal for presenting at your local meetups to engage and onboard new translators for your native language. If you&#8217;re organizing a WordCamp, consider introducing this tool during your Contributor Day. I will leave a link for this in the show notes so that it is easy to find.&nbsp;</p>\n\n\n\n<p>And item number four, the journey to update WordPress.org, continues with the launch of a new Showcase design. The Showcase is a natural starting point for a lot of visitors who are on WordPress.org. It inspires creativity and also demonstrates what&#8217;s possible with WordPress. So, stop on by there, it&#8217;s WordPress.org/showcase, and give it a bit of a look.</p>\n\n\n\n<p>[00:15:58] <strong>Josepha:</strong> And that, my friends, is your small list of big things. Thank you for tuning in today for the WordPress Briefing. And don&#8217;t forget to follow us on your favorite podcast app or subscribe directly on WordPress.org/news. You&#8217;ll get a friendly reminder whenever a new episode drops. And if you like what you heard today, share it with a fellow WordPresser. Or, if you had questions about what you heard today, you can share those with me at wprebriefing@WordPress.org. </p>\n\n\n\n<p>I&#8217;m your host, Josepha Haden Chomphosy, and I&#8217;ll see you again in a couple of weeks. </p>\n\n\n\n<p>[00:16:24] (Music outro)</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16227\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress 6.4’s PHP Compatibility\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/news/2023/10/wordpress-6-4s-php-compatibility/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 26 Oct 2023 08:40:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:7:\"General\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:3:\"PHP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16235\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:340:\"In an effort to keep the WordPress community up to date, this post provides an update on the PHP compatibility of the upcoming WordPress 6.4 release scheduled for November 7, 2023.&#160; Recommended PHP version for WordPress 6.4 It’s recommended to use PHP 8.1 or 8.2 with this upcoming release. Please refer to the Hosting page [&#8230;]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Chloe Bringmann\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3117:\"\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"2400\" height=\"1350\" src=\"https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=2400%2C1350&#038;ssl=1\" alt=\"\" class=\"wp-image-16236\" srcset=\"https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?w=2400&amp;ssl=1 2400w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/wordpress.org/news/files/2023/10/WordPress-6.4s-PHP-comp.png?resize=2048%2C1152&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In an effort to keep the WordPress community up to date, this post provides an update on the PHP compatibility of the upcoming WordPress 6.4 release scheduled for November 7, 2023.&nbsp;</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Recommended PHP version for WordPress 6.4</strong></h3>\n\n\n\n<p>It’s recommended to use PHP 8.1 or 8.2 with this upcoming release. Please refer to the Hosting page for more detailed information, including <a href=\"https://make.wordpress.org/core/handbook/references/php-compatibility-and-wordpress-versions/\">a few known issues</a>.&nbsp;</p>\n\n\n\n<p>Reach out to your hosting company to explore PHP upgrade options.</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Why does compatibility matter?</strong></h3>\n\n\n\n<p>PHP is a programming language on which the WordPress code is based. This language runs on the server, and it is critical to keep it updated for security and functionality. Various teams within the WordPress open source project work to both test and fix any issues with new PHP versions so you can update with confidence that the WordPress core software is compatible.&nbsp;</p>\n\n\n\n<p>Happy WordPress-ing!&nbsp;</p>\n\n\n\n<p><em>Thank you to <a href=\'https://profiles.wordpress.org/annezazu/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>annezazu</a> <a href=\'https://profiles.wordpress.org/barry/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>barry</a> <a href=\'https://profiles.wordpress.org/ironprogrammer/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>ironprogrammer</a> <a href=\'https://profiles.wordpress.org/hellofromtonya/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>hellofromtonya</a> <a href=\'https://profiles.wordpress.org/chanthaboune/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>chanthaboune</a> <a href=\'https://profiles.wordpress.org/costdev/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>costdev</a> <a href=\'https://profiles.wordpress.org/javiercasares/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>javiercasares</a> for reviewing and contributing to the effort of this post.</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16235\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:69:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n\n					\n										\n					\n		\n		\n			\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 6.4 Release Candidate 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/news/2023/10/wordpress-6-4-release-candidate-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Oct 2023 16:45:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:5:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:3:\"6.4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:11:\"development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:8:\"releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"https://wordpress.org/news/?p=16219\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:163:\"WordPress 6.4 RC2 is ready for download and testing. Reaching this phase of the release cycle is an important milestone. Check out what\'s new and how you can help.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Meher Bala\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6586:\"\n<p>The second release candidate (RC2) for WordPress 6.4 is now available!</p>\n\n\n\n<p><strong>This version of the WordPress software is under development</strong>. Please do not install, run, or test this version of WordPress on production or mission-critical websites. Instead, it’s recommended that you evaluate RC2 on a test server and site.</p>\n\n\n\n<p>WordPress 6.4 is <a href=\"https://make.wordpress.org/core/6-4/\">slated for release</a> on <strong>November 7, 2023</strong>—two weeks from today. If you haven’t tried it, now is the time.</p>\n\n\n\n<p>You can test WordPress 6.4 RC2 in three ways:</p>\n\n\n\n<ol>\n<li><strong>Plugin</strong>: Install and activate the <a href=\"https://wordpress.org/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin on a WordPress install (select the “Bleeding edge” channel and “Beta/RC Only” stream).</li>\n\n\n\n<li><strong>Direct download</strong>: Download the <a href=\"https://wordpress.org/wordpress-6.4-RC2.zip\">RC2 version (zip)</a> and install it on a WordPress site.</li>\n\n\n\n<li><strong>Command line</strong>: Use the following <a href=\"https://make.wordpress.org/cli/\">WP-CLI</a> command:<br><code>wp core update --version=6.4-RC2</code></li>\n</ol>\n\n\n\n<p><a href=\"https://wordpress.org/news/2023/10/wordpress-6-4-release-candidate-1/\">Read the RC1 announcement</a> for featured highlights, and check the <a href=\"https://make.wordpress.org/core/\">Make WordPress Core blog</a> for <a href=\"https://make.wordpress.org/core/tag/6-4/\">6.4-related posts</a>. If you are looking for detailed technical notes on new features and improvements, the <a href=\"https://make.wordpress.org/core/2023/10/23/wordpress-6-4-field-guide/\"><strong>WordPress 6.4 Field Guide</strong></a> is for you.</p>\n\n\n\n<p>The WordPress 6.4 release is brought to you by an <a href=\"https://make.wordpress.org/core/2023/06/05/wordpress-6-4-development-cycle/\">underrepresented gender release squad</a> to welcome the participation and partnership of those who identify as gender-underrepresented in the WordPress open source project.</p>\n\n\n\n<h2 class=\"wp-block-heading\">What’s in WordPress 6.4 RC2?</h2>\n\n\n\n<p>Thanks to everyone who has tested the beta and RC releases. Since RC1 was released on October 17, there have been more than 25 issues resolved. You can browse the technical details for all recent updates using these links:</p>\n\n\n\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/commits/wp/6.4\">GitHub commits for 6.4</a></li>\n\n\n\n<li><a href=\"https://core.trac.wordpress.org/query?status=closed&amp;changetime=10%2F18%2F2023..10%2F24%2F2023&amp;milestone=6.4&amp;col=id&amp;col=milestone&amp;col=owner&amp;col=type&amp;col=priority&amp;order=id\">Closed Trac tickets since RC1</a></li>\n\n\n\n<li><a href=\"https://github.com/WordPress/twentytwentyfour/commits/\">GitHub commits for Twenty Twenty-Four</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Contributing to 6.4</h2>\n\n\n\n<p>WordPress is open source software made possible by a community of people collaborating on and contributing to its development. The resources below outline various ways you can help, regardless of your technical expertise.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Get involved in testing</h3>\n\n\n\n<p>Your feedback and help in testing are vital to developing the WordPress software and ensuring its quality. It’s also a meaningful way for anyone to contribute. <a href=\"https://make.wordpress.org/test/2023/09/26/help-test-wordpress-6-4/\">Check out this guide</a> for instructions on testing WordPress 6.4 features.</p>\n\n\n\n<p>If you encounter an issue, please report it to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">Alpha/Beta area</a> of the support forums or directly to <a href=\"https://core.trac.wordpress.org/newticket\">WordPress Trac</a> if you are comfortable writing a reproducible bug report. You can also check your issue against a list of <a href=\"https://core.trac.wordpress.org/tickets/major\">known bugs</a>.</p>\n\n\n\n<p>Curious about testing releases in general? Follow along with the <a href=\"https://make.wordpress.org/test/\">testing initiatives in Make Core</a> and join the <a href=\"https://wordpress.slack.com/messages/core-test/\">#core-test channel</a> on <a href=\"https://wordpress.slack.com/\">Making WordPress Slack</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Search for vulnerabilities</h3>\n\n\n\n<p>During the release candidate phase of WordPress 6.4, the <a href=\"https://make.wordpress.org/security/2023/09/26/bug-bounty-for-wordpress-6-4-beta/\">monetary reward for reporting new, unreleased security vulnerabilities</a> is doubled. Please follow responsible disclosure practices as detailed in the project’s security practices and policies outlined on the <a href=\"https://hackerone.com/wordpress\">HackerOne page</a> and in the <a href=\"https://wordpress.org/about/security/\">security white paper</a>.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Update your theme or plugin</h3>\n\n\n\n<p>Do you build themes and plugins? Your products play an integral role in extending the functionality and value of WordPress for users worldwide.</p>\n\n\n\n<p>Hopefully, you have already tested your themes and plugins with WordPress 6.4 betas. With RC2, you will want to continue your testing and update the <em>&#8220;Tested up to&#8221;</em> version in your <a href=\"https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/\">plugin&#8217;s readme file</a> to 6.4.</p>\n\n\n\n<p>Please post detailed information to the <a href=\"https://wordpress.org/support/forum/alphabeta/\">support forums</a> if you find compatibility issues.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Help translate WordPress</h3>\n\n\n\n<p>Do you speak a language other than English? ¿Español? Français? Português? Русский? 日本? <a href=\"https://translate.wordpress.org/projects/wp/dev\">Help translate WordPress into more than 100 languages</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">A RC2 haiku</h2>\n\n\n\n<p>You have been waiting<br>Download and give it a test<br>RC2 is here</p>\n\n\n\n<p><em>Thank you to the following contributors for collaborating on this post: <a href=\'https://profiles.wordpress.org/meher/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>meher</a>, <a href=\'https://profiles.wordpress.org/rmartinezduque/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>rmartinezduque</a>, <a href=\'https://profiles.wordpress.org/michelleames/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>michelleames</a>, <a href=\'https://profiles.wordpress.org/cbringmann/\' class=\'mention\'><span class=\'mentions-prefix\'>@</span>cbringmann</a></em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:7:\"post-id\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"16219\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:32:\"https://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"\n	hourly	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"\n	1	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:30:\"com-wordpress:feed-additions:1\";a:1:{s:4:\"site\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"14607090\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:48:\"WpOrg\\Requests\\Utility\\CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:12:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sat, 18 Nov 2023 09:40:56 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:25:\"strict-transport-security\";s:12:\"max-age=3600\";s:6:\"x-olaf\";s:3:\"⛄\";s:13:\"last-modified\";s:29:\"Fri, 17 Nov 2023 22:46:11 GMT\";s:4:\"link\";s:63:\"<https://wordpress.org/news/wp-json/>; rel=\"https://api.w.org/\"\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:16:\"content-encoding\";s:4:\"gzip\";s:7:\"alt-svc\";s:19:\"h3=\":443\"; ma=86400\";s:4:\"x-nc\";s:9:\"HIT ord 1\";}}s:5:\"build\";s:14:\"20231115103410\";}','no');
INSERT INTO `wp_options` VALUES (389,'_transient_timeout_feed_mod_9bbd59226dc36b9b26cd43f15694c5c3','1700343655','no');
INSERT INTO `wp_options` VALUES (390,'_transient_feed_mod_9bbd59226dc36b9b26cd43f15694c5c3','1700300455','no');
INSERT INTO `wp_options` VALUES (391,'_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9','1700343655','no');
INSERT INTO `wp_options` VALUES (392,'_transient_feed_d117b5738fbd35bd8c0391cda1f2b5d9','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"WPTavern: Last Call\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://wptavern.com/?p=151409\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://wptavern.com/last-call\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4939:\"<p>This has been an emotional, bittersweet morning for me, reading through old posts, as I close the book on my time at this beloved publication. Today is my last day before moving on to embrace a new challenge in the world of tech.&nbsp;&nbsp;</p>\n\n\n\n<p>In 2013, the year I started writing at the Tavern, just <a href=\"https://w3techs.com/technologies/history_overview/content_management/all/y\">17.4% of the web</a> was running on WordPress, but the momentum I felt at that <a href=\"https://wptavern.com/matt-mullenwegs-state-of-the-word-highlights-internationalization-mobile-and-new-tools-for-wordpress-contributors\">last WordCamp San Francisco</a> was intoxicating and undeniable. It marked the ascendency of the global WordPress community and the move to embrace new tools like Slack and GitHub for contributing to core.</p>\n\n\n\n<p>At that time, one frustrating thing I frequently heard was &#8220;It&#8217;s just WordPress, don&#8217;t take it so seriously.&#8221; Yet there we were, standing on the edge of an amazing acceleration of WordPress&#8217; adoption and expansion of the ecosystem that brought meaningful work to millions and gave people a voice on the web. It was never &#8220;just WordPress&#8221; to me. As the software enters its third decade, powering 43% of the world&#8217;s websites, WordPress continues to be an irrepressible force of good on the web. I&#8217;d like to think the Tavern had a small part in that.</p>\n\n\n\n<p>I want to thank past colleagues Jeff Chandler, Justin Tadlock, and Nathan Wrigley, as well as Matt Mullenweg for supporting the publication for so many years. We have done a lot of daily reporting but the Tavern keeper is a watchdog at heart. Our commitment to serving the public interest was instrumental in holding companies, authorities, and the open source project accountable, and I am proud of the work we did together.</p>\n\n\n\n<p>When I started, I had no idea how I would fully embrace the challenge of writing, editing, and publishing&nbsp;WordPress news every day. It changed me. Writing news is an intensely public job that comes with a nearly constant onslaught of criticism. I found that showing up even on my worst days forged a level of discipline that was previously inaccessible to me. Today, 3,021 articles later, publishing is in my blood.</p>\n\n\n\n<p>To our wonderful community of readers: Thank you for trusting us to tell your stories. Thank you to every one of you who chose to speak to the press &#8211; both on the record and anonymously when something needed to come to light. You made it possible for the Tavern to become the most authoritative and reliable source of WordPress news on the web.</p>\n\n\n\n<p>We navigated many challenging times together and celebrated previously unbelievable milestones. I&#8217;ve been privileged to have a front row seat to your innovation and determination, and I&#8217;ll continue cheering for your success. Thank you, beautiful WordPress community.</p>\n\n\n\n<p>In honor of 10 years at the Tavern, I&#8217;ll leave you with 10 of my favorite articles for a short trip down memory lane. </p>\n\n\n\n<p><a href=\"https://wptavern.com/finding-freedom-and-opportunity-with-wordpress-how-wolf-bishop-overcame-prison-and-addiction-to-launch-a-career\">Finding Freedom and Opportunity With WordPress: How Wolf Bishop Overcame Prison and Addiction to Launch a Career</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/how-the-welch-news-uses-wordpress-to-keep-local-news-alive-in-west-virginia\">How The Welch News Uses WordPress To Keep Local News Alive in West Virginia</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/amp-has-irreparably-damaged-publishers-trust-in-google-led-initiatives\">AMP Has Irreparably Damaged Publishers’ Trust in Google-led Initiatives</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/wordpress-turns-20\">WordPress Turns 20</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/tectonic-shifts-in-retail-industry-are-creating-unprecedented-opportunities-for-independent-stores\">Tectonic Shifts in Retail Industry are Creating Unprecedented Opportunities for Independent Stores</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/finding-wordpress-in-the-post-print-news-era\">Finding WordPress in the Post-Print News Era</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/wordpress-5-0-rc-expected-on-u-s-thanksgiving-holiday-despite-last-minute-pushback-from-contributors\">WordPress 5.0 RC Expected on U.S. Thanksgiving Holiday, Despite Last-Minute Pushback from Contributors</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/wordpress-smiley-wars-will-core-adopt-new-emoticons\">WordPress Smiley Wars: Will Core Adopt New Emoticons?</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/rip-buddypress-default-theme-finally-laid-to-rest-in-1-9\">RIP BuddyPress Default Theme: Finally Laid to Rest in 1.9</a></p>\n\n\n\n<p><a href=\"https://wptavern.com/wordpress-beyond-boundaries-a-recap-of-wordcamp-europe-2014\">WordPress Beyond Boundaries: A Recap of WordCamp Europe 2014</a></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 20:50:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Sarah Gooding\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"Do The Woo Community: Talking Woo Agencies with Andrew Behla and Patrick Garman\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=63221\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"https://dothewoo.io/a-woobiz-chat-with-agency-owners-andrew-behla-and-patrick-garman/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:469:\"<p>Listen in as they chat about market disruptions, business tools, client off hour expectations and the differentiators that set Woo apart from other ecommerce platforms.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/a-woobiz-chat-with-agency-owners-andrew-behla-and-patrick-garman/\">Talking Woo Agencies with Andrew Behla and Patrick Garman</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"Do The Woo Community: WooCommerce Development Insights &amp; Empowering Clients with DJ\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=63183\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://dothewoo.io/woocommerce-development-insights-empowering-clients-with-d-j/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:455:\"<p>DJ\'s development skills with WooCommerce blend his willingness to learn quickly and deeply while giving his clients more empowerment over their site.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-development-insights-empowering-clients-with-d-j/\">WooCommerce Development Insights &#038; Empowering Clients with DJ</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"Do The Woo Community: A Roundtable Chat with Clara Lee, Product Marketing at WooCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=63172\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"https://dothewoo.io/a-roundtable-chat-with-clara-lee-product-marketing-at-woocommerce/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:442:\"<p>A conversation with Clara Lee takes a deep dive behind the scenes into the product marketing at WooCommerce and what makes it tick.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/a-roundtable-chat-with-clara-lee-product-marketing-at-woocommerce/\">A Roundtable Chat with Clara Lee, Product Marketing at WooCommerce</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"Do The Woo Community: A Mastering WooCommerce Snippets with Rodolfo Melogli\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=63160\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://dothewoo.io/a-master-of-woocommerce-snippets-rodolfo-melogli/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:398:\"<p>Listen in as Rodolfo talks about dedicating his site over the years to help developers level up their coding skills. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/a-master-of-woocommerce-snippets-rodolfo-melogli/\">A Mastering WooCommerce Snippets with Rodolfo Melogli</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"Do The Woo Community: All You Need to Know to Organize a WooCommerce Meetup\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=63052\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"https://dothewoo.io/all-you-need-to-know-to-organize-a-woocommerce-meetup/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:410:\"<p>When you get five meetup co-organizers together for a chat, the insights and experiences shared are going to flood the gates</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/all-you-need-to-know-to-organize-a-woocommerce-meetup/\">All You Need to Know to Organize a WooCommerce Meetup</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"Do The Woo Community: When Did You First Do the Woo?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62904\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://dothewoo.io/when-did-you-first-do-the-woo/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:338:\"<p>Listen in as we hear from ten past guests about how they discovered and started using WooCommerce. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/when-did-you-first-do-the-woo/\">When Did You First Do the Woo?</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"Do The Woo Community: WooCommerce and Mobile Apps with Scott Bolinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62878\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://dothewoo.io/woocommerce-and-mobile-apps-with-scott-bolinger/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:401:\"<p>Whether it\'s your clients site or your own store, you may or may not be keeping mobile apps aligned with what you are building.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-and-mobile-apps-with-scott-bolinger/\">WooCommerce and Mobile Apps with Scott Bolinger</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"Do The Woo Community: A Look at WordPress Core and Blocks with Grzegorz Ziolkowski\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62624\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://dothewoo.io/wordpress-core-and-blocks-with-grzegorz-ziolkowski/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:423:\"<p>We catch up with what\'s happening with blocks and get some insights from Greg on how WooCommerce blocks play into the bigger picture.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/wordpress-core-and-blocks-with-grzegorz-ziolkowski/\">A Look at WordPress Core and Blocks with Grzegorz Ziolkowski</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"Do The Woo Community: A Roundtable Discussion with Warren Holmes, COO at WooCommerce\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62612\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://dothewoo.io/a-roundtable-discussion-with-warren-holmes-coo-at-woocommerce/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:439:\"<p>Warren Holmes has been with WooCommerce for 10 years and sheds some light on  very important questions with his insights and experience.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/a-roundtable-discussion-with-warren-holmes-coo-at-woocommerce/\">A Roundtable Discussion with Warren Holmes, COO at WooCommerce</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"Do The Woo Community: Hooking and Integrating WooCommerce into Warehousing with David Baumwald\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62571\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"https://dothewoo.io/hooking-woocommerce-into-warehousing-with-david-baumwald/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:475:\"<p>From being an expert into hooking WooCommerce into a warehouse to being a release lead for WordPress Core, David has done a lot as a full stack developer for 17 years.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/hooking-woocommerce-into-warehousing-with-david-baumwald/\">Hooking and Integrating WooCommerce into Warehousing with David Baumwald</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"Do The Woo Community: Developers and Meetups with Alicia St. Rose and David Bisset\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62561\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"https://dothewoo.io/developers-and-meetups-with-alicia-st-rose-and-david-bisset/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:466:\"<p>There are a lot of opportunities for developers to attend or even start up a WordPress or WooCommerce meetup. Alicia and David dive into it from first-hand experience.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/developers-and-meetups-with-alicia-st-rose-and-david-bisset/\">Developers and Meetups with Alicia St. Rose and David Bisset</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"Do The Woo Community: Keeping Woo Devs on Top of WordPress Core with Jonathan Desrosiers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62542\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"https://dothewoo.io/keeping-on-top-of-wordpress-core-with-jonathan-desrosiers/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:431:\"<p>As a WooCommerce builder, you need to keep on top of all the major changes in WordPress core. This episode will get you started.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/keeping-on-top-of-wordpress-core-with-jonathan-desrosiers/\">Keeping Woo Devs on Top of WordPress Core with Jonathan Desrosiers</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:117:\"Do The Woo Community: Promoting Products to WooCommerce Developers and Agencies with Jodie Florenza and Michael Bragg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62463\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"https://dothewoo.io/promoting-products-to-woocommerce-developers-and-agencies/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:439:\"<p>Get agencies and developers to become your fans and  recommend and use your WooCommerce product or service.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/promoting-products-to-woocommerce-developers-and-agencies/\">Promoting Products to WooCommerce Developers and Agencies with Jodie Florenza and Michael Bragg</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"Do The Woo Community: A Deep Dive into the WooCommerce User Community with Jonathan Wold\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62397\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://dothewoo.io/woocommerce-roundtable-with-guest-jonathan-wold/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:361:\"<p>A great conversation around the WooCommerce ecosystem and community.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-roundtable-with-guest-jonathan-wold/\">A Deep Dive into the WooCommerce User Community with Jonathan Wold</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"Do The Woo Community: Funding and Growth for WooCommerce Shops with Aidan Corbett\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62385\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://dothewoo.io/funding-growth-and-deliberation-with-aidan-corbett/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:433:\"<p>Aidan shares thoughts on outside funding, seasonal inventory, low risk businesses and how he views WooCommerce favorably as a deliberate choice.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/funding-growth-and-deliberation-with-aidan-corbett/\">Funding and Growth for WooCommerce Shops with Aidan Corbett</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"Do The Woo Community: A Q&amp;A on Developer Advocacy at WooCommerce with Allen Smith\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62378\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"https://dothewoo.io/question-and-answer-with-allen-smith-developer-advocate-woocommerce/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:443:\"<p>Listen in to this live chat with Allen Smith as we talk about WooCommerce documentation, resources, contributing, headless and more.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/question-and-answer-with-allen-smith-developer-advocate-woocommerce/\">A Q&#038;A on Developer Advocacy at WooCommerce with Allen Smith</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"Do The Woo Community: Conversation, Chatter and Core with BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62369\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"https://dothewoo.io/conversation-chatter-and-core/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:371:\"<p>We are bring more conversation to the podcast. Added perspectives through both the Woo Builder Events and WordPress core.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/conversation-chatter-and-core/\">Conversation, Chatter and Core with BobWP</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"Do The Woo Community: Training, Open Source and WooCommerce with Robbie Adair\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62314\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://dothewoo.io/training-open-source-and-woocommerce-with-robbie-adair/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:418:\"<p>Listen in as Robbie shares her diverse background of open source work through her agency and her experience with online training.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/training-open-source-and-woocommerce-with-robbie-adair/\">Training, Open Source and WooCommerce with Robbie Adair</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"Do The Woo Community: WooCommerce, eCommerce and Accessibility with Amber Hinds\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62290\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"https://dothewoo.io/woocommerce-ecommerce-and-accessibility-with-amber-hinds/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:430:\"<p>This conversation takes us deeper into accessibility. Not only do we learn the important basics, but how eCommerce fits into the picture.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-ecommerce-and-accessibility-with-amber-hinds/\">WooCommerce, eCommerce and Accessibility with Amber Hinds</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"Do The Woo Community: The WooCommerce Marketplace with Adepeju Oduye\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62218\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://dothewoo.io/the-woocommerce-marketplace-with-adepeju-oduye/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:380:\"<p>Listen in as Adepeju Oduye talks about developers, selling on WooCommerce and the future of the marketplace.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/the-woocommerce-marketplace-with-adepeju-oduye/\">The WooCommerce Marketplace with Adepeju Oduye</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"Do The Woo Community: Online Events for the WooCommerce Builder Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62070\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://dothewoo.io/online-events-for-the-woocommerce-builder-community/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:391:\"<p>Listen as the co-organizers chat about what WooCommerce builders can expect if they attend the weekly events.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/online-events-for-the-woocommerce-builder-community/\">Online Events for the WooCommerce Builder Community</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:85:\"Do The Woo Community: A Conversation Around WooCommerce Blocks Gary, Darren and Manos\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=62037\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://dothewoo.io/a-conversation-around-woocommerce-blocks/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:419:\"<p>Darren Ethier and Gary Murray from WooCommerce join Manos Psychogyiopoulos, Head of Product at SomewhereWarm to talk WooCommerce blocks.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/a-conversation-around-woocommerce-blocks/\">A Conversation Around WooCommerce Blocks Gary, Darren and Manos</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"Do The Woo Community: Building a WooCommerce Store on WordPress.com with Timmy Crawford\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61960\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://dothewoo.io/woocommerce-on-wordpress-com-with-timmy-crawford/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:407:\"<p>Timmy works on the Woo team and shares what people may not now about building a WooCommerce shop on WordPress.com.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-on-wordpress-com-with-timmy-crawford/\">Building a WooCommerce Store on WordPress.com with Timmy Crawford</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"Do The Woo Community: Growing an Agency and WooCommerce Enterprise Sites with Jake Goldman\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61796\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"https://dothewoo.io/growing-an-agency-enterprise-and-woocommerce-with-jake-goldman/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:423:\"<p>Jakes shares his insights about WooCommerce in the enterprise state as well as the 10-year growth of his agency. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/growing-an-agency-enterprise-and-woocommerce-with-jake-goldman/\">Growing an Agency and WooCommerce Enterprise Sites with Jake Goldman</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"Do The Woo Community: The Do the Woo WooCommerce Builder Survey 2020\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61717\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://dothewoo.io/how-2020-played-out-for-woocommerce-businesses/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:386:\"<p>In this episode I share the results of my WooCommerce Builder Survey and some snippets on 2020 from past episodes.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/how-2020-played-out-for-woocommerce-businesses/\">The Do the Woo WooCommerce Builder Survey 2020</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"Do The Woo Community: Walking Clients Through the WooCommerce Journey with Alicia St. Rose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61614\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"https://dothewoo.io/taking-clients-on-the-entire-woocommerce-journey-with-alicia-st-rose/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:475:\"<p>Alicia brings in a unique combination of coaching and development that takes her clients through the entire process of building and growing your site or shop. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/taking-clients-on-the-entire-woocommerce-journey-with-alicia-st-rose/\">Walking Clients Through the WooCommerce Journey with Alicia St. Rose</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"Do The Woo Community: Celebrating 100 Episodes on Do the Woo Podcast with an AMA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61519\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://dothewoo.io/celebrating-100-episodes-on-do-the-woo-podcast-with-an-ama/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:362:\"<p>When we hit 100 episodes it’s time for questions and celebration</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/celebrating-100-episodes-on-do-the-woo-podcast-with-an-ama/\">Celebrating 100 Episodes on Do the Woo Podcast with an AMA</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"Do The Woo Community: Load Testing and Building WooCommerce Sites with Lauri Kasti\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61509\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://dothewoo.io/load-testing-and-woocommerce-with-lauri-robert-and-zach/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:373:\"<p>Listen in to an interesting deep-dive into load testing your WooCommerce shop.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/load-testing-and-woocommerce-with-lauri-robert-and-zach/\">Load Testing and Building WooCommerce Sites with Lauri Kasti</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"Do The Woo Community: WooCommerce and Accessibility Tips with Bet Hannon\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61478\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://dothewoo.io/woocommerce-and-accessibility-with-bet-hannon/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:417:\"<p>Bet has a deep passion for accessibility. This is filled with stories, insights and tips for both WooCommerce and WordPress sites in general. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-and-accessibility-with-bet-hannon/\">WooCommerce and Accessibility Tips with Bet Hannon</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"Do The Woo Community: A Guide to Agency Rebranding and Growth with Patrick Garman\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61390\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"https://dothewoo.io/agency-rebranding-and-growth-with-patrick-garman-from-mindsize/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:431:\"<p>Patrick talks about the WooCommerce space over the years, the rebranding of his agency Mindsize and the potential WooCommerce has.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/agency-rebranding-and-growth-with-patrick-garman-from-mindsize/\">A Guide to Agency Rebranding and Growth with Patrick Garman</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"Do The Woo Community: A WooCommerce Reunion with Adii, Magnus and Mark\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61362\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://dothewoo.io/a-woo-reunion-with-adii-magnus-and-mark/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:426:\"<p>in 2007 three guys, two from South Africa and one from Norway got together when an idea to start a theme shop called WooThemes. Well, one thing led to another.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/a-woo-reunion-with-adii-magnus-and-mark/\">A WooCommerce Reunion with Adii, Magnus and Mark</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"Do The Woo Community: SEO, WooCommerce and Building Plugins with Marieke van de Rakt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61256\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://dothewoo.io/seo-woocommerce-marieke-van-de-rakt-yoast-do-the-woo-podcast/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:409:\"<p>In this episode we chat with Marieke, CEO at Yoast SEO about eCommerce SEO, building plugins and local SEO.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/seo-woocommerce-marieke-van-de-rakt-yoast-do-the-woo-podcast/\">SEO, WooCommerce and Building Plugins with Marieke van de Rakt</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"Do The Woo Community: The Perfect Blend of WooCommerce Freelancing and Community with Noelle Steegs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61178\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"https://dothewoo.io/freelancing-community-and-woocommerce-with-noelle-steegs/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:444:\"<p>Noëlle Steegs is one of those rare freelancers that jumped on WordPress and WooCommerce at the same time. And the rest is history.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/freelancing-community-and-woocommerce-with-noelle-steegs/\">The Perfect Blend of WooCommerce Freelancing and Community with Noelle Steegs</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"Do The Woo Community: Ten Things I Wish I Knew When Starting My eCommerce Business with Christie and Dave\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61108\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://dothewoo.io/ten-tips-starting-ecommerce-site/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:446:\"<p>This tip-filled episode results from a threaded tweet based on someone who share what they wish they had known when they started their eCommerce site. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/ten-tips-starting-ecommerce-site/\">Ten Things I Wish I Knew When Starting My eCommerce Business with Christie and Dave</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"Do The Woo Community: A Web Designer Who Codes with Michael Bragg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=61063\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://dothewoo.io/designer-developer-woocommerce-michael-bragg/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:364:\"<p>Michael designs and codes and brings a unique talent that is truly a commodity for the ecosystem.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/designer-developer-woocommerce-michael-bragg/\">A Web Designer Who Codes with Michael Bragg</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"Do The Woo Community: How a Diverse Web Career Led to WordPress and WooCommerce with Sharon Yates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60947\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"https://dothewoo.io/diverse-web-career-leading-to-woocommerce-sharon-yates/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:448:\"<p>Sharon Yates, owner of Creative Mouse Studio, chats with us about her experience in the tech industry, including WordPress and WooCommerce.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/diverse-web-career-leading-to-woocommerce-sharon-yates/\">How a Diverse Web Career Led to WordPress and WooCommerce with Sharon Yates</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"Do The Woo Community: Do the Woo Chats with WordFest Organizers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60926\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://dothewoo.io/do-the-woo-chats-with-wordfest-organizers/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:385:\"<p>Listen in to learn more about WordFest, tips for Woo builders and a bit of \"in hindsight, we should have used WooCommerce\".</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/do-the-woo-chats-with-wordfest-organizers/\">Do the Woo Chats with WordFest Organizers</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"Do The Woo Community: Building WooCommerce Community and Stores in Nigeria with Mary Job\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60810\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"https://dothewoo.io/building-woocommerce-community-and-stores-in-nigeria-with-mary-job/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:404:\"<p>Mary Job has the passion to bring WordPress and WooCommerce to Nigeria and beyond in Africa.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/building-woocommerce-community-and-stores-in-nigeria-with-mary-job/\">Building WooCommerce Community and Stores in Nigeria with Mary Job</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"Do The Woo Community: WooCommerce Builder Tips from the Pros for 2021\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60623\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://dothewoo.io/woocommerce-builder-tips-for-2021/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:364:\"<p>Listen to these tips from some WooCommerce pros for builders of products, services and websites in 2021.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-builder-tips-for-2021/\">WooCommerce Builder Tips from the Pros for 2021</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"Do The Woo Community: Finding Resilience with WooCommerce Products in 2020 with Colin Daniels\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60517\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"https://dothewoo.io/resilience-with-woocommerce-products-in-2020-with-colin-daniels/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:423:\"<p>A chat about bootstrapping to product sales and when you are hit with product challenges resulting from 2020.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/resilience-with-woocommerce-products-in-2020-with-colin-daniels/\">Finding Resilience with WooCommerce Products in 2020 with Colin Daniels</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"Do The Woo Community: Bringing Pride, Experience and Business Smarts to WooCommerce with Cami MacNamara\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60427\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://dothewoo.io/solopreneur-woocommerce-cami-macnamara/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:412:\"<p>Hear how one solopreneur is moving into the WooCommerce space and how she manages her business as a single owner.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/solopreneur-woocommerce-cami-macnamara/\">Bringing Pride, Experience and Business Smarts to WooCommerce with Cami MacNamara</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"Do The Woo Community: Post Black Friday in 2020 with WooCommerce Plugin Shops\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60363\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://dothewoo.io/post-black-friday-in-2020-with-woocommerce-plugin-shops/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:418:\"<p>Listen in to hear how this year\'s Black Friday and Cyber Sunday sales went for three popular WooCommerce plugin shops this year.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/post-black-friday-in-2020-with-woocommerce-plugin-shops/\">Post Black Friday in 2020 with WooCommerce Plugin Shops</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:106:\"Do The Woo Community: Perspectives from Inside and Outside of the WooCommerce Ecosystem with Robert Jacobi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60326\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://dothewoo.io/outside-inside-woocommerce-ecosystem-robert-jacobi/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:436:\"<p>Robert Jacobi, Industry Analyst Strategist shares a very diverse background in the web space, open source and WooCommerce.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/outside-inside-woocommerce-ecosystem-robert-jacobi/\">Perspectives from Inside and Outside of the WooCommerce Ecosystem with Robert Jacobi</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:83:\"Do The Woo Community: What is a WooCommerce Builder and a Look at the Opportunities\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60234\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://dothewoo.io/woocommerce-builders-and-opportunities/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:385:\"<p>A lively discussion around who the Woo builders are and what opportunities can be found in thee ecosystem.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woocommerce-builders-and-opportunities/\">What is a WooCommerce Builder and a Look at the Opportunities</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"Do The Woo Community: Working with WooCommerce and Subscriptions Support with Sarah Rennick\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60196\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"https://dothewoo.io/subscriptions-and-woocommerce-support-with-sarah-rennick/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:488:\"<p>We have a chance to talk about her transition to Automattic, a bit around the space of subscriptions and, of course, her active role in support at WooCommerce as a Happiness Engineer.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/subscriptions-and-woocommerce-support-with-sarah-rennick/\">Working with WooCommerce and Subscriptions Support with Sarah Rennick</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"Do The Woo Community: Product Pricing and Opportunities in the WooCommerce Ecosystem with Alex Denning\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=60043\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"https://dothewoo.io/the-product-ecosystem-product-pricing-and-black-friday-with-alex-denning/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:479:\"<p>Alex has helped dozens of WooCommerce product builders and he has seen it all. Alex has a pulse on this space and a lot of great insights to share.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/the-product-ecosystem-product-pricing-and-black-friday-with-alex-denning/\">Product Pricing and Opportunities in the WooCommerce Ecosystem with Alex Denning</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"Do The Woo Community: WooGraphQL, Headless and APIs with WordPress with Geoff Taylor\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=59847\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://dothewoo.io/woographql-headless-and-apis-with-geoff-taylor/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:501:\"<p>When you ask a developer on the show who is passionate about what they do, well, it literally takes a deep dive into the topic. This was the case when we invited Geoff Taylor, from XWP and developer of WooGraphQL.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/woographql-headless-and-apis-with-geoff-taylor/\">WooGraphQL, Headless and APIs with WordPress with Geoff Taylor</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:113:\"Do The Woo Community: Combining Agencies for a Focus on WooCommerce Maintenance with Jimmy Rosen and David Lockie\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=59715\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"https://dothewoo.io/deep-thoughts-from-david-lockie-and-jimmy-rosen-on-woocommerce-and-open-source/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:557:\"<p>When you get a couple of agency owners from the WordPress space who have been around for awhile, you may or may not be surprised the deeper dive you end up with around WooCommerce, WordPress and Open Source. </p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/deep-thoughts-from-david-lockie-and-jimmy-rosen-on-woocommerce-and-open-source/\">Combining Agencies for a Focus on WooCommerce Maintenance with Jimmy Rosen and David Lockie</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"Do The Woo Community: Insights and Perspectives on the State of the Woo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"https://dothewoo.io/?p=59576\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"https://dothewoo.io/insights-and-perspectives-on-the-state-of-the-woo/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:447:\"<p>To introduce the new addition to the Do the Woo podcast, Woo Perspectives, I asked my co-hosts to join me for insights into the State of the Woo from the recent WooSesh.</p>\n<p>&gt;&gt; The post <a href=\"https://dothewoo.io/insights-and-perspectives-on-the-state-of-the-woo/\">Insights and Perspectives on the State of the Woo</a> appeared first on <a href=\"https://dothewoo.io\">Do the Woo - a WooCommerce and WordPress Builder Podcast</a>	.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Nov 2023 14:30:31 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"BobWP\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:48:\"WpOrg\\Requests\\Utility\\CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sat, 18 Nov 2023 09:40:57 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:13:\"last-modified\";s:29:\"Sat, 18 Nov 2023 09:30:32 GMT\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:16:\"content-encoding\";s:4:\"gzip\";s:7:\"alt-svc\";s:19:\"h3=\":443\"; ma=86400\";s:4:\"x-nc\";s:9:\"HIT ord 2\";}}s:5:\"build\";s:14:\"20231115103410\";}','no');
INSERT INTO `wp_options` VALUES (393,'_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1700343655','no');
INSERT INTO `wp_options` VALUES (394,'_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9','1700300455','no');
INSERT INTO `wp_options` VALUES (395,'_transient_timeout_dash_v2_88ae138922fe95674369b1cb3d215a2b','1700343655','no');
INSERT INTO `wp_options` VALUES (396,'_transient_dash_v2_88ae138922fe95674369b1cb3d215a2b','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2023/11/state-of-the-word-2023-madrid-spain/\'>State of the Word 2023 – Madrid, Spain</a></li><li><a class=\'rsswidget\' href=\'https://wordpress.org/news/2023/11/introducing-twenty-twenty-four/\'>Introducing Twenty Twenty-Four</a></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wptavern.com/last-call\'>WPTavern: Last Call</a></li><li><a class=\'rsswidget\' href=\'https://dothewoo.io/agency-rebranding-and-growth-with-patrick-garman-from-mindsize/\'>Do The Woo Community: A Guide to Agency Rebranding and Growth with Patrick Garman</a></li><li><a class=\'rsswidget\' href=\'https://dothewoo.io/load-testing-and-woocommerce-with-lauri-robert-and-zach/\'>Do The Woo Community: Load Testing and Building WooCommerce Sites with Lauri Kasti</a></li></ul></div>','no');
INSERT INTO `wp_options` VALUES (399,'_transient_timeout_feed_71a7765c3d553e44aaa308159b5a2ba6','1700345293','no');
INSERT INTO `wp_options` VALUES (400,'_transient_feed_71a7765c3d553e44aaa308159b5a2ba6','a:3:{s:3:\"url\";s:22:\"https://wordpress.org/\";s:8:\"feed_url\";s:31:\"http://wordpress.org/news/feed/\";s:5:\"build\";s:14:\"20231115103410\";}','no');
INSERT INTO `wp_options` VALUES (401,'_transient_timeout_feed_mod_71a7765c3d553e44aaa308159b5a2ba6','1700345293','no');
INSERT INTO `wp_options` VALUES (402,'_transient_feed_mod_71a7765c3d553e44aaa308159b5a2ba6','1700302093','no');
INSERT INTO `wp_options` VALUES (434,'themeisle_sdk_notifications','a:2:{s:17:\"last_notification\";a:2:{s:2:\"id\";s:16:\"raft_logger_flag\";s:10:\"display_at\";i:1700335376;}s:24:\"last_notification_active\";i:0;}','yes');
INSERT INTO `wp_options` VALUES (435,'_site_transient_timeout_theme_roots','1700339338','no');
INSERT INTO `wp_options` VALUES (436,'_site_transient_theme_roots','a:1:{s:4:\"raft\";s:7:\"/themes\";}','no');
INSERT INTO `wp_options` VALUES (437,'_site_transient_timeout_wp_remote_block_patterns_079cd97b75ad4b98ba3be33e1b0b923c','1700341141','no');
INSERT INTO `wp_options` VALUES (438,'_site_transient_wp_remote_block_patterns_079cd97b75ad4b98ba3be33e1b0b923c','a:43:{i:0;O:8:\"stdClass\":7:{s:2:\"id\";i:309935;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:45:\"Centered image with two-tone background color\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1275:\"\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient\" style=\"background:linear-gradient(90deg,rgb(35,74,20) 50%,rgb(225,137,116) 50%)\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group wp-container-content-2 is-layout-constrained wp-container-3 wp-block-group-is-layout-constrained\">\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<figure class=\"wp-block-image size-large is-style-default wp-duotone-000000-ffffff-1\"><img decoding=\"async\" src=\"https://pd.w.org/2022/03/3866241b433db4ee2.96648572.jpeg\" alt=\"\" /></figure>\n\n\n\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<h2 class=\"wp-block-heading alignwide has-text-align-center has-white-color has-text-color\" style=\"padding-left:32px;font-size:50px;font-style:normal;font-weight:400;letter-spacing:32px;line-height:1;text-transform:uppercase\">Etcetera</h2>\n\n\n\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:18:\"Gradient, Two-Tone\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:57:\"core/cover,core/group,core/heading,core/image,core/spacer\";}s:14:\"category_slugs\";a:3:{i:0;s:6:\"banner\";i:1;s:6:\"images\";i:2;s:4:\"text\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:2134:\"<!-- wp:cover {\"minHeight\":66,\"minHeightUnit\":\"vh\",\"customGradient\":\"linear-gradient(90deg,rgb(35,74,20) 50%,rgb(225,137,116) 50%)\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"5vw\",\"right\":\"5vw\",\"bottom\":\"5vw\",\"left\":\"5vw\"},\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient\" style=\"background:linear-gradient(90deg,rgb(35,74,20) 50%,rgb(225,137,116) 50%)\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"},\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"constrained\",\"contentSize\":\"600px\",\"wideSize\":\"1200px\"}} -->\n<div class=\"wp-block-group\"><!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#ffffff\"]}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-large is-style-default\"><img src=\"https://pd.w.org/2022/03/3866241b433db4ee2.96648572.jpeg\" alt=\"\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":\"48px\"} -->\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"align\":\"wide\",\"style\":{\"typography\":{\"fontSize\":\"50px\",\"fontStyle\":\"normal\",\"fontWeight\":\"400\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"32px\",\"lineHeight\":\"1\"},\"spacing\":{\"padding\":{\"left\":\"32px\"}}},\"textColor\":\"white\"} -->\n<h2 class=\"wp-block-heading alignwide has-text-align-center has-white-color has-text-color\" style=\"padding-left:32px;font-size:50px;font-style:normal;font-weight:400;letter-spacing:32px;line-height:1;text-transform:uppercase\">Etcetera</h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:1;O:8:\"stdClass\":7:{s:2:\"id\";i:309925;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:43:\"Fullwidth Dark Banner with Heading Top Left\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1029:\"\n<div class=\"wp-block-cover alignfull has-custom-content-position is-position-top-left\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:50vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-90 has-background-dim\" style=\"background-color:#141414\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-333\" alt=\"\" src=\"https://pd.w.org/2022/07/87262c92d42acd1c3.73206444.jpg\" style=\"object-position:50% 0%\" data-object-fit=\"cover\" data-object-position=\"50% 0%\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group wp-container-content-5 is-vertical is-nowrap is-layout-flex wp-container-6 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-left has-text-color has-source-serif-pro-font-family\" style=\"color:#d8a557;font-size:160px;font-style:italic;font-weight:900;letter-spacing:-4px;line-height:0.8;text-transform:none\">bud!</p>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:16:\"Jazz, Fulllwidth\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:36:\"core/cover,core/group,core/paragraph\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:1697:\"<!-- wp:cover {\"url\":\"https://pd.w.org/2022/07/87262c92d42acd1c3.73206444.jpg\",\"id\":333,\"dimRatio\":90,\"customOverlayColor\":\"#141414\",\"focalPoint\":{\"x\":0.5,\"y\":0},\"minHeight\":50,\"minHeightUnit\":\"vh\",\"contentPosition\":\"top left\",\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"5vw\",\"right\":\"5vw\",\"bottom\":\"5vw\",\"left\":\"5vw\"},\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull has-custom-content-position is-position-top-left\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:50vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-90 has-background-dim\" style=\"background-color:#141414\"></span><img class=\"wp-block-cover__image-background wp-image-333\" alt=\"\" src=\"https://pd.w.org/2022/07/87262c92d42acd1c3.73206444.jpg\" style=\"object-position:50% 0%\" data-object-fit=\"cover\" data-object-position=\"50% 0%\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"},\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"160px\",\"fontStyle\":\"italic\",\"fontWeight\":\"900\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\",\"textTransform\":\"none\"},\"color\":{\"text\":\"#d8a557\"}},\"fontFamily\":\"source-serif-pro\"} -->\n<p class=\"has-text-align-left has-text-color has-source-serif-pro-font-family\" style=\"color:#d8a557;font-size:160px;font-style:italic;font-weight:900;letter-spacing:-4px;line-height:0.8;text-transform:none\">bud!</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:2;O:8:\"stdClass\":7:{s:2:\"id\";i:309230;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:44:\"Fullwidth cover with repeating gradient text\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1723:\"\n<div class=\"wp-block-cover alignfull is-light wp-duotone-36345d-abaaaa-10\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-60 has-background-dim\" style=\"background-color:#c2b7a4\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-334\" alt=\"\" src=\"https://pd.w.org/2022/01/95161f850d22f0c06.37817431.jpg\" style=\"object-position:50% 5%\" data-object-fit=\"cover\" data-object-position=\"50% 5%\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-group is-vertical is-content-justification-center is-nowrap is-layout-flex wp-container-8 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-right has-text-color\" style=\"color:#c8c4d3;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n\n\n\n<p class=\"has-text-align-right has-text-color\" style=\"color:#ac94b2;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n\n\n\n<p class=\"has-text-align-right has-text-color\" style=\"color:#71689c;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n\n\n\n<p class=\"has-text-align-right has-text-color\" style=\"color:#444178;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n</div>\n\n\n\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:48:\"Fullwidth, Background Image, Gradient, Uppercase\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:48:\"core/cover,core/group,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:4:\"text\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3135:\"<!-- wp:cover {\"url\":\"https://pd.w.org/2022/01/95161f850d22f0c06.37817431.jpg\",\"id\":334,\"dimRatio\":60,\"customOverlayColor\":\"#c2b7a4\",\"focalPoint\":{\"x\":0.5,\"y\":0.05},\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"5vw\",\"right\":\"5vw\",\"bottom\":\"5vw\",\"left\":\"5vw\"},\"margin\":{\"top\":\"0\"}},\"color\":{\"duotone\":[\"#36345d\",\"#abaaaa\"]}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-60 has-background-dim\" style=\"background-color:#c2b7a4\"></span><img class=\"wp-block-cover__image-background wp-image-334\" alt=\"\" src=\"https://pd.w.org/2022/01/95161f850d22f0c06.37817431.jpg\" style=\"object-position:50% 5%\" data-object-fit=\"cover\" data-object-position=\"50% 5%\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:spacer {\"height\":\"48px\"} -->\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"300\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\"},\"color\":{\"text\":\"#c8c4d3\"}}} -->\n<p class=\"has-text-align-right has-text-color\" style=\"color:#c8c4d3;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"300\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\"},\"color\":{\"text\":\"#ac94b2\"}}} -->\n<p class=\"has-text-align-right has-text-color\" style=\"color:#ac94b2;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"300\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\"},\"color\":{\"text\":\"#71689c\"}}} -->\n<p class=\"has-text-align-right has-text-color\" style=\"color:#71689c;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"300\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\"},\"color\":{\"text\":\"#444178\"}}} -->\n<p class=\"has-text-align-right has-text-color\" style=\"color:#444178;font-size:148px;font-style:normal;font-weight:300;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">DJANGO</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"48px\"} -->\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div></div>\n<!-- /wp:cover -->\";}i:3;O:8:\"stdClass\":7:{s:2:\"id\";i:309224;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:72:\"Fullwidth, vertically aligned headline on right with description on left\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2130:\"\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#e68b14\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-layout-flex wp-container-17 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group wp-container-content-13 is-layout-flow wp-container-14 wp-block-group-is-layout-flow\">\n<p class=\"wp-container-content-11\" style=\"font-size:17px;font-style:normal;font-weight:300;letter-spacing:0px;line-height:1.4;text-decoration:none;text-transform:none\">Let &#8217;em Roll is an album by American organist Big John Patton recorded in 1965 and released on the Blue Note label.</p>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-font-size\" style=\"font-size:17px;font-style:normal;font-weight:700;letter-spacing:0px;text-decoration:none;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-black-background-color has-text-color has-background wp-element-button\" style=\"border-radius:0px;border-top-style:none;border-top-width:0px;border-right-style:none;border-right-width:0px;border-bottom-style:none;border-bottom-width:0px;border-left-style:none;border-left-width:0px;padding-top:14px;padding-right:36px;padding-bottom:14px;padding-left:36px\">Shop Now</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-group wp-container-content-15 is-layout-flow wp-container-16 wp-block-group-is-layout-flow\">\n<p class=\"has-text-align-right has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">Let<br>&#8216;EM<br>Roll</p>\n\n\n\n<p class=\"has-text-align-right has-white-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">Big<br>John<br>Patton</p>\n</div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:60:\"vertically, bold, jazz, shop, store, headline, hero, product\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:61:\"core/button,core/buttons,core/cover,core/group,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:14:\"call-to-action\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3726:\"<!-- wp:cover {\"customOverlayColor\":\"#e68b14\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"5vw\",\"right\":\"5vw\",\"bottom\":\"5vw\",\"left\":\"5vw\"},\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#e68b14\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"320px\"},\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"330px\"},\"typography\":{\"fontSize\":\"17px\",\"fontStyle\":\"normal\",\"fontWeight\":\"300\",\"lineHeight\":\"1.4\",\"textTransform\":\"none\",\"textDecoration\":\"none\",\"letterSpacing\":\"0px\"}}} -->\n<p style=\"font-size:17px;font-style:normal;font-weight:300;letter-spacing:0px;line-height:1.4;text-decoration:none;text-transform:none\">Let \'em Roll is an album by American organist Big John Patton recorded in 1965 and released on the Blue Note label.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"backgroundColor\":\"black\",\"textColor\":\"white\",\"style\":{\"typography\":{\"fontSize\":\"17px\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textDecoration\":\"none\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"},\"spacing\":{\"padding\":{\"top\":\"14px\",\"bottom\":\"14px\",\"left\":\"36px\",\"right\":\"36px\"}},\"border\":{\"radius\":\"0px\",\"top\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"},\"right\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"},\"bottom\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"},\"left\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}}}} -->\n<div class=\"wp-block-button has-custom-font-size\" style=\"font-size:17px;font-style:normal;font-weight:700;letter-spacing:0px;text-decoration:none;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-black-background-color has-text-color has-background wp-element-button\" style=\"border-radius:0px;border-top-style:none;border-top-width:0px;border-right-style:none;border-right-width:0px;border-bottom-style:none;border-bottom-width:0px;border-left-style:none;border-left-width:0px;padding-top:14px;padding-right:36px;padding-bottom:14px;padding-left:36px\">Shop Now</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"},\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\"}},\"textColor\":\"black\"} -->\n<p class=\"has-text-align-right has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">Let<br>\'EM<br>Roll</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.8\",\"letterSpacing\":\"-4px\"}},\"textColor\":\"white\"} -->\n<p class=\"has-text-align-right has-white-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-4px;line-height:0.8;text-transform:uppercase\">Big<br>John<br>Patton</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:4;O:8:\"stdClass\":7:{s:2:\"id\";i:309236;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:60:\"Fullwidth headline with links and gradient offset background\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1893:\"\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:48px;padding-right:5vw;padding-bottom:48px;padding-left:5vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient\" style=\"background:linear-gradient(180deg,rgb(0,0,0) 39%,rgb(83,80,123) 39%)\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-group is-content-justification-space-between is-layout-flex wp-container-24 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group wp-container-content-19 is-layout-flow wp-container-20 wp-block-group-is-layout-flow\">\n<p class=\"has-text-align-left has-white-color has-text-color has-link-color wp-elements-52dc92f2ee4b8dfde042239a7e68e30d\" style=\"font-size:172px;font-style:normal;font-weight:700;letter-spacing:-10px;line-height:0.7;text-transform:uppercase\"><strong>MONK</strong>.</p>\n</div>\n\n\n\n<div class=\"wp-block-group wp-container-content-22 is-layout-flow wp-container-23 wp-block-group-is-layout-flow\">\n<div class=\"wp-block-group is-content-justification-right is-nowrap is-layout-flex wp-container-21 wp-block-group-is-layout-flex\">\n<p class=\"has-white-color has-text-color has-link-color wp-elements-c8902903bdf5ea1baed310a565cbd10e\" style=\"font-size:17px;font-style:normal;font-weight:700;letter-spacing:0px;text-decoration:none;text-transform:uppercase\">A new collection</p>\n\n\n\n<p class=\"has-white-color has-text-color has-link-color wp-elements-669af571686ebf2235f18cd2403659b5\" style=\"font-size:17px;font-style:normal;font-weight:700;letter-spacing:0px;text-decoration:none;text-transform:uppercase\">Learn More → </p>\n</div>\n</div>\n</div>\n\n\n\n<div style=\"height:260px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:41:\"Offset, Gradient, Jazz, Headline, Feature\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:48:\"core/cover,core/group,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3195:\"<!-- wp:cover {\"customGradient\":\"linear-gradient(180deg,rgb(0,0,0) 39%,rgb(83,80,123) 39%)\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"48px\",\"right\":\"5vw\",\"bottom\":\"48px\",\"left\":\"5vw\"},\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:48px;padding-right:5vw;padding-bottom:48px;padding-left:5vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient\" style=\"background:linear-gradient(180deg,rgb(0,0,0) 39%,rgb(83,80,123) 39%)\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"48px\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"verticalAlignment\":\"top\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"},\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"172px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.7\",\"letterSpacing\":\"-10px\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|white\"}}}},\"textColor\":\"white\"} -->\n<p class=\"has-text-align-left has-white-color has-text-color has-link-color\" style=\"font-size:172px;font-style:normal;font-weight:700;letter-spacing:-10px;line-height:0.7;text-transform:uppercase\"><strong>MONK</strong>.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"400px\"},\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"48px\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"right\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"17px\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textDecoration\":\"none\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|white\"}}}},\"textColor\":\"white\"} -->\n<p class=\"has-white-color has-text-color has-link-color\" style=\"font-size:17px;font-style:normal;font-weight:700;letter-spacing:0px;text-decoration:none;text-transform:uppercase\">A new collection</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"17px\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textDecoration\":\"none\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|white\"}}}},\"textColor\":\"white\"} -->\n<p class=\"has-white-color has-text-color has-link-color\" style=\"font-size:17px;font-style:normal;font-weight:700;letter-spacing:0px;text-decoration:none;text-transform:uppercase\">Learn More → </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"260px\"} -->\n<div style=\"height:260px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div></div>\n<!-- /wp:cover -->\";}i:5;O:8:\"stdClass\":7:{s:2:\"id\";i:308937;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:42:\"Heading, Paragraph, Button with Two Images\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2550:\"\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:6vw;padding-right:6vw;padding-bottom:6vw;padding-left:6vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#eb4c77\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-content-justification-center is-layout-flex wp-container-36 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group alignwide wp-container-content-27 is-content-justification-left is-layout-constrained wp-container-28 wp-block-group-is-layout-constrained\">\n<h2 class=\"wp-block-heading alignwide has-text-align-left has-contrast-color has-text-color\" style=\"font-size:100px;font-style:normal;font-weight:500;line-height:0.9;text-transform:none\">Time for an adventure</h2>\n\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-align-left has-contrast-color has-text-color\">Explore our network of trails that lead through a variety of woodland habitats and observe the diverse flora that call this area home. </p>\n\n\n\n<div style=\"height:60px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-left is-nowrap is-layout-flex wp-container-26 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-font-size is-style-fill\" style=\"font-size:16px;font-style:normal;font-weight:500;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-base-color has-contrast-background-color has-text-color has-background wp-element-button\" style=\"border-radius:0px;padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Sign up</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-group is-content-justification-right is-nowrap is-layout-flex wp-container-35 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group wp-container-content-31 is-layout-flow wp-block-group-is-layout-flow\">\n<div style=\"height:8vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<figure class=\"wp-block-image size-large wp-container-content-29 wp-duotone-rgb000-rgb21788120-30\"><img decoding=\"async\" src=\"https://pd.w.org/2022/01/84661f60659149cc8.02053291.jpg\" alt=\"\" /></figure>\n</div>\n\n\n\n<figure class=\"wp-block-image size-large wp-container-content-33 wp-duotone-rgb000-rgb21788120-34\"><img decoding=\"async\" src=\"https://pd.w.org/2022/01/21261f60ba46147b0.97888240.jpg\" alt=\"\" /></figure>\n</div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:97:\"core/button,core/buttons,core/cover,core/group,core/heading,core/image,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:14:\"call-to-action\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:4102:\"<!-- wp:cover {\"customOverlayColor\":\"#eb4c77\",\"contentPosition\":\"center center\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"6vw\",\"right\":\"6vw\",\"bottom\":\"6vw\",\"left\":\"6vw\"},\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:6vw;padding-right:6vw;padding-bottom:6vw;padding-left:6vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#eb4c77\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0vw\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"justifyContent\":\"center\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":\"0px\"},\"layout\":{\"selfStretch\":\"fill\"}},\"layout\":{\"type\":\"constrained\",\"justifyContent\":\"left\",\"contentSize\":\"600px\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"textAlign\":\"left\",\"align\":\"wide\",\"style\":{\"typography\":{\"fontSize\":\"100px\",\"textTransform\":\"none\",\"fontStyle\":\"normal\",\"fontWeight\":\"500\",\"lineHeight\":\"0.9\"}},\"textColor\":\"contrast\"} -->\n<h2 class=\"wp-block-heading alignwide has-text-align-left has-contrast-color has-text-color\" style=\"font-size:100px;font-style:normal;font-weight:500;line-height:0.9;text-transform:none\">Time for an adventure</h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"align\":\"left\",\"textColor\":\"contrast\"} -->\n<p class=\"has-text-align-left has-contrast-color has-text-color\">Explore our network of trails that lead through a variety of woodland habitats and observe the diverse flora that call this area home. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":\"60px\"} -->\n<div style=\"height:60px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"backgroundColor\":\"contrast\",\"textColor\":\"base\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"24px\",\"right\":\"48px\",\"bottom\":\"24px\",\"left\":\"48px\"}},\"typography\":{\"fontSize\":\"16px\",\"fontStyle\":\"normal\",\"fontWeight\":\"500\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"},\"border\":{\"radius\":\"0px\"}},\"className\":\"is-style-fill\"} -->\n<div class=\"wp-block-button has-custom-font-size is-style-fill\" style=\"font-size:16px;font-style:normal;font-weight:500;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-base-color has-contrast-background-color has-text-color has-background wp-element-button\" style=\"border-radius:0px;padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Sign up</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fit\",\"flexSize\":null},\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"verticalAlignment\":\"top\",\"justifyContent\":\"right\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"50%\"}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\"><!-- wp:spacer {\"height\":\"8vw\"} -->\n<div style=\"height:8vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"50%\"},\"color\":{\"duotone\":[\"rgb(0, 0, 0)\",\"rgb(217, 88, 120)\"]}}} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://pd.w.org/2022/01/84661f60659149cc8.02053291.jpg\" alt=\"\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"50%\"},\"color\":{\"duotone\":[\"rgb(0, 0, 0)\",\"rgb(217, 88, 120)\"]}}} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://pd.w.org/2022/01/21261f60ba46147b0.97888240.jpg\" alt=\"\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:6;O:8:\"stdClass\":7:{s:2:\"id\";i:308949;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:42:\"Bold sale banner with geometric background\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1663:\"\n<div class=\"wp-block-cover alignfull wp-duotone-rgb4448102-ffb23d-41\" style=\"margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw;min-height:50vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-90 has-background-dim\" style=\"background-color:#2c3066\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-334\" alt=\"\" src=\"https://pd.w.org/2022/01/2661f82cd1ba9172.16386413.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-layout-flow wp-container-39 wp-block-group-is-layout-flow\">\n<p class=\"has-text-align-center has-text-color\" style=\"color:#ffb23d;font-size:160px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">Enjoy</p>\n\n\n\n<p class=\"has-text-align-center has-text-color\" style=\"color:#ffb23d;font-size:160px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">20% Off</p>\n\n\n\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-layout-flex wp-container-38 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-font-size\" style=\"font-size:20px;font-style:normal;font-weight:700;letter-spacing:1px;text-transform:uppercase\"><a class=\"wp-block-button__link has-text-color has-background wp-element-button\" style=\"color:#2c3066;background-color:#ffb23d;padding-top:32px;padding-right:48px;padding-bottom:32px;padding-left:48px\">Shop Now</a></div>\n</div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:43:\"store, shop, coupon, jazz, background image\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:73:\"core/button,core/buttons,core/cover,core/group,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:14:\"call-to-action\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:2819:\"<!-- wp:cover {\"url\":\"https://pd.w.org/2022/01/2661f82cd1ba9172.16386413.jpg\",\"id\":334,\"dimRatio\":90,\"customOverlayColor\":\"#2c3066\",\"minHeight\":50,\"minHeightUnit\":\"vh\",\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"4vw\",\"right\":\"4vw\",\"bottom\":\"4vw\",\"left\":\"4vw\"},\"margin\":{\"top\":\"0\"}},\"color\":{\"duotone\":[\"rgb(44, 48, 102)\",\"#ffb23d\"]}}} -->\n<div class=\"wp-block-cover alignfull\" style=\"margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw;min-height:50vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-90 has-background-dim\" style=\"background-color:#2c3066\"></span><img class=\"wp-block-cover__image-background wp-image-334\" alt=\"\" src=\"https://pd.w.org/2022/01/2661f82cd1ba9172.16386413.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"center\",\"style\":{\"typography\":{\"fontSize\":\"160px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.9\",\"letterSpacing\":\"-2px\"},\"color\":{\"text\":\"#ffb23d\"}}} -->\n<p class=\"has-text-align-center has-text-color\" style=\"color:#ffb23d;font-size:160px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">Enjoy</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"style\":{\"typography\":{\"fontSize\":\"160px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.9\",\"letterSpacing\":\"-2px\"},\"color\":{\"text\":\"#ffb23d\"}}} -->\n<p class=\"has-text-align-center has-text-color\" style=\"color:#ffb23d;font-size:160px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">20% Off</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":\"48px\"} -->\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"style\":{\"color\":{\"background\":\"#ffb23d\",\"text\":\"#2c3066\"},\"spacing\":{\"padding\":{\"top\":\"32px\",\"right\":\"48px\",\"bottom\":\"32px\",\"left\":\"48px\"}},\"typography\":{\"fontSize\":\"20px\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"1px\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\"}}} -->\n<div class=\"wp-block-button has-custom-font-size\" style=\"font-size:20px;font-style:normal;font-weight:700;letter-spacing:1px;text-transform:uppercase\"><a class=\"wp-block-button__link has-text-color has-background wp-element-button\" style=\"color:#2c3066;background-color:#ffb23d;padding-top:32px;padding-right:48px;padding-bottom:32px;padding-left:48px\">Shop Now</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:7;O:8:\"stdClass\":7:{s:2:\"id\";i:308924;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:47:\"Offset bold paragraph text with varying opacity\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1592:\"\n<div class=\"wp-block-cover alignfull has-white-color has-text-color\" style=\"margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim-100 has-background-dim\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-content-justification-left is-layout-constrained wp-container-42 wp-block-group-is-layout-constrained\">\n<p class=\"has-text-align-left has-text-color\" style=\"color:#ffffff61;font-size:120px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:1;text-transform:uppercase\">Embark</p>\n\n\n\n<p class=\"has-text-align-right has-text-color\" style=\"color:#ffffff73;font-size:72px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\"><strong>ON A HIKING</strong></p>\n\n\n\n<p class=\"has-text-align-left has-text-color\" style=\"color:#ffffffad;font-size:72px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\">adventure and explore the beauty of nature&#8217;s best…</p>\n\n\n\n<p class=\"has-text-align-right has-text-color\" style=\"color:#ffffffd1;font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:1;text-transform:uppercase\">In the</p>\n\n\n\n<p class=\"has-text-align-left has-text-color\" style=\"color:#fffffff5;font-size:162px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:1;text-transform:uppercase\">WOODS.</p>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:36:\"core/cover,core/group,core/paragraph\";}s:14:\"category_slugs\";a:1:{i:0;s:4:\"text\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3052:\"<!-- wp:cover {\"overlayColor\":\"black\",\"minHeight\":66,\"minHeightUnit\":\"vh\",\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"4vw\",\"right\":\"4vw\",\"bottom\":\"4vw\",\"left\":\"4vw\"},\"margin\":{\"top\":\"0\"}}},\"textColor\":\"white\"} -->\n<div class=\"wp-block-cover alignfull has-white-color has-text-color\" style=\"margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim-100 has-background-dim\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"}},\"layout\":{\"type\":\"constrained\",\"wideSize\":\"700px\",\"contentSize\":\"700px\",\"justifyContent\":\"left\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"120px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"1\",\"letterSpacing\":\"-2px\"},\"color\":{\"text\":\"#ffffff61\"}}} -->\n<p class=\"has-text-align-left has-text-color\" style=\"color:#ffffff61;font-size:120px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:1;text-transform:uppercase\">Embark</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"72px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"1\",\"letterSpacing\":\"0px\"},\"color\":{\"text\":\"#ffffff73\"}}} -->\n<p class=\"has-text-align-right has-text-color\" style=\"color:#ffffff73;font-size:72px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\"><strong>ON A HIKING</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"72px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"1\",\"letterSpacing\":\"0px\"},\"color\":{\"text\":\"#ffffffad\"}}} -->\n<p class=\"has-text-align-left has-text-color\" style=\"color:#ffffffad;font-size:72px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\">adventure and explore the beauty of nature\'s best…</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"1\",\"letterSpacing\":\"-2px\"},\"color\":{\"text\":\"#ffffffd1\"}}} -->\n<p class=\"has-text-align-right has-text-color\" style=\"color:#ffffffd1;font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:1;text-transform:uppercase\">In the</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"162px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"1\",\"letterSpacing\":\"-2px\"},\"color\":{\"text\":\"#fffffff5\"}}} -->\n<p class=\"has-text-align-left has-text-color\" style=\"color:#fffffff5;font-size:162px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:1;text-transform:uppercase\">WOODS.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:8;O:8:\"stdClass\":7:{s:2:\"id\";i:308916;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:40:\"Offset text with a brutalist design vibe\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1389:\"\n<div class=\"wp-block-cover alignfull is-light has-black-color has-text-color\" style=\"margin-top:0;padding-top:48px;padding-right:48px;padding-bottom:48px;padding-left:48px;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#ffb43c\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-layout-constrained wp-container-44 wp-block-group-is-layout-constrained\">\n<p class=\"has-text-align-left has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\"><mark style=\"color:#a65a00\" class=\"has-inline-color\">✴︎</mark> Walk</p>\n\n\n\n<p class=\"has-text-align-right has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">In the</p>\n\n\n\n<p class=\"has-text-align-left has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">Park</p>\n\n\n\n<p class=\"has-text-align-center has-text-color\" style=\"color:#a65a00;font-size:140px;font-style:italic;font-weight:200;letter-spacing:0px;line-height:0.9;text-transform:uppercase\">—01.03</p>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:36:\"core/cover,core/group,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:4:\"text\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:2631:\"<!-- wp:cover {\"customOverlayColor\":\"#ffb43c\",\"minHeight\":66,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"48px\",\"right\":\"48px\",\"bottom\":\"48px\",\"left\":\"48px\"},\"margin\":{\"top\":\"0\"}}},\"textColor\":\"black\"} -->\n<div class=\"wp-block-cover alignfull is-light has-black-color has-text-color\" style=\"margin-top:0;padding-top:48px;padding-right:48px;padding-bottom:48px;padding-left:48px;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#ffb43c\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0px\"}},\"layout\":{\"type\":\"constrained\",\"wideSize\":\"1200px\",\"contentSize\":\"800px\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.9\",\"letterSpacing\":\"-2px\"}},\"textColor\":\"black\"} -->\n<p class=\"has-text-align-left has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\"><mark style=\"color:#a65a00\" class=\"has-inline-color\">✴︎</mark> Walk</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"right\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.9\",\"letterSpacing\":\"-2px\"}},\"textColor\":\"black\"} -->\n<p class=\"has-text-align-right has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">In the</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"148px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"lineHeight\":\"0.9\",\"letterSpacing\":\"-2px\"}},\"textColor\":\"black\"} -->\n<p class=\"has-text-align-left has-black-color has-text-color\" style=\"font-size:148px;font-style:normal;font-weight:700;letter-spacing:-2px;line-height:0.9;text-transform:uppercase\">Park</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"style\":{\"typography\":{\"fontSize\":\"140px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"italic\",\"fontWeight\":\"200\",\"letterSpacing\":\"0px\",\"lineHeight\":\"0.9\"},\"color\":{\"text\":\"#a65a00\"}}} -->\n<p class=\"has-text-align-center has-text-color\" style=\"color:#a65a00;font-size:140px;font-style:italic;font-weight:200;letter-spacing:0px;line-height:0.9;text-transform:uppercase\">—01.03</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:9;O:8:\"stdClass\":7:{s:2:\"id\";i:308901;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:40:\"Fullscreen image with right content area\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2040:\"\n<div class=\"wp-block-cover alignfull\" style=\"margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#376a23\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-content-justification-left is-layout-flex wp-container-50 wp-block-group-is-layout-flex\">\n<figure class=\"wp-block-image size-large wp-container-content-46\"><img decoding=\"async\" src=\"https://pd.w.org/2022/01/84661f60659149cc8.02053291.jpg\" alt=\"\" /></figure>\n\n\n\n<div class=\"wp-block-group alignwide wp-container-content-48 is-content-justification-left is-layout-constrained wp-container-49 wp-block-group-is-layout-constrained\">\n<h2 class=\"wp-block-heading alignwide has-text-align-left has-black-color has-text-color\" style=\"font-size:80px;font-style:italic;font-weight:700;line-height:1.0;text-transform:uppercase\">wAndering through the woods</h2>\n\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-align-left has-black-color has-text-color\" style=\"font-size:18px;font-style:italic;font-weight:600\">Explore our network of trails that lead through a variety of woodland habitats and observe the diverse flora that call this area home. </p>\n\n\n\n<div style=\"height:60px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-left is-nowrap is-layout-flex wp-container-47 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-font-size is-style-fill\" style=\"font-size:18px;font-style:italic;font-weight:600;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-black-background-color has-text-color has-background wp-element-button\" style=\"border-radius:0px;padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Sign up</a></div>\n</div>\n</div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:97:\"core/button,core/buttons,core/cover,core/group,core/heading,core/image,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3261:\"<!-- wp:cover {\"customOverlayColor\":\"#376a23\",\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"4vw\",\"right\":\"4vw\",\"bottom\":\"4vw\",\"left\":\"4vw\"},\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull\" style=\"margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#376a23\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"4vw\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"justifyContent\":\"left\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"sizeSlug\":\"large\",\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"50%\"}}} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://pd.w.org/2022/01/84661f60659149cc8.02053291.jpg\" alt=\"\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:group {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":\"0px\"},\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"constrained\",\"justifyContent\":\"left\",\"contentSize\":\"600px\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"textAlign\":\"left\",\"align\":\"wide\",\"style\":{\"typography\":{\"fontSize\":\"80px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"italic\",\"fontWeight\":\"700\",\"lineHeight\":\"1.0\"}},\"textColor\":\"black\"} -->\n<h2 class=\"wp-block-heading alignwide has-text-align-left has-black-color has-text-color\" style=\"font-size:80px;font-style:italic;font-weight:700;line-height:1.0;text-transform:uppercase\">wAndering through the woods</h2>\n<!-- /wp:heading -->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"18px\",\"fontStyle\":\"italic\",\"fontWeight\":\"600\"}},\"textColor\":\"black\"} -->\n<p class=\"has-text-align-left has-black-color has-text-color\" style=\"font-size:18px;font-style:italic;font-weight:600\">Explore our network of trails that lead through a variety of woodland habitats and observe the diverse flora that call this area home. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":\"60px\"} -->\n<div style=\"height:60px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"backgroundColor\":\"black\",\"textColor\":\"white\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"24px\",\"right\":\"48px\",\"bottom\":\"24px\",\"left\":\"48px\"}},\"typography\":{\"fontSize\":\"18px\",\"fontStyle\":\"italic\",\"fontWeight\":\"600\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"},\"border\":{\"radius\":\"0px\"}},\"className\":\"is-style-fill\"} -->\n<div class=\"wp-block-button has-custom-font-size is-style-fill\" style=\"font-size:18px;font-style:italic;font-weight:600;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-black-background-color has-text-color has-background wp-element-button\" style=\"border-radius:0px;padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Sign up</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:10;O:8:\"stdClass\":7:{s:2:\"id\";i:308871;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:46:\"Cover Image with Bold Heading and Button, Left\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1525:\"\n<div class=\"wp-block-cover alignfull is-light wp-duotone-094850-f9644e-55\" style=\"margin-top:0;padding-top:48px;padding-right:48px;padding-bottom:48px;padding-left:48px;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-30 has-background-dim\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-335\" alt=\"\" src=\"https://pd.w.org/2021/12/12261b91fba359867.64939140.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-content-justification-left is-layout-constrained wp-container-52 wp-block-group-is-layout-constrained\">\n<h2 class=\"wp-block-heading has-text-align-left has-white-color has-text-color\" style=\"font-size:100px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\">Take a hike and wAnder through the woods</h2>\n</div>\n\n\n\n<div style=\"height:72px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-left is-nowrap is-layout-flex wp-container-53 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-font-size is-style-outline\" style=\"font-size:16px;font-style:normal;font-weight:600;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-text-color wp-element-button\" style=\"padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Explore</a></div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:71:\"core/button,core/buttons,core/cover,core/group,core/heading,core/spacer\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:2443:\"<!-- wp:cover {\"url\":\"https://pd.w.org/2021/12/12261b91fba359867.64939140.jpg\",\"id\":335,\"dimRatio\":30,\"minHeight\":66,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"48px\",\"right\":\"48px\",\"bottom\":\"48px\",\"left\":\"48px\"},\"margin\":{\"top\":\"0\"}},\"color\":{\"duotone\":[\"#094850\",\"#f9644e\"]}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:48px;padding-right:48px;padding-bottom:48px;padding-left:48px;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-30 has-background-dim\"></span><img class=\"wp-block-cover__image-background wp-image-335\" alt=\"\" src=\"https://pd.w.org/2021/12/12261b91fba359867.64939140.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"48px\"}},\"layout\":{\"type\":\"constrained\",\"contentSize\":\"75%\",\"justifyContent\":\"left\",\"wideSize\":\"75%\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"textAlign\":\"left\",\"style\":{\"typography\":{\"fontSize\":\"100px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"letterSpacing\":\"0px\",\"lineHeight\":\"1\"}},\"textColor\":\"white\"} -->\n<h2 class=\"wp-block-heading has-text-align-left has-white-color has-text-color\" style=\"font-size:100px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\">Take a hike and wAnder through the woods</h2>\n<!-- /wp:heading --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"72px\"} -->\n<div style=\"height:72px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"white\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"24px\",\"right\":\"48px\",\"bottom\":\"24px\",\"left\":\"48px\"}},\"typography\":{\"fontSize\":\"16px\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"}},\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button has-custom-font-size is-style-outline\" style=\"font-size:16px;font-style:normal;font-weight:600;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-text-color wp-element-button\" style=\"padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Explore</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div></div>\n<!-- /wp:cover -->\";}i:11;O:8:\"stdClass\":7:{s:2:\"id\";i:308868;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:40:\"Cover Image with Bold Heading and Button\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1533:\"\n<div class=\"wp-block-cover alignfull is-light wp-duotone-rgb4247103-rgb21419442-59\" style=\"margin-top:0;padding-top:48px;padding-right:48px;padding-bottom:48px;padding-left:48px;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-30 has-background-dim\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-335\" alt=\"\" src=\"https://pd.w.org/2022/01/26061d763eca13bb6.11341561.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-layout-constrained wp-container-56 wp-block-group-is-layout-constrained\">\n<h2 class=\"wp-block-heading has-text-align-center has-white-color has-text-color\" style=\"font-size:100px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\">Embark on a hiking adventure and explore the beauty of the woods.</h2>\n</div>\n\n\n\n<div style=\"height:72px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-nowrap is-layout-flex wp-container-57 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-font-size is-style-outline\" style=\"font-size:16px;font-style:normal;font-weight:600;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-text-color wp-element-button\" style=\"padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Explore</a></div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:71:\"core/button,core/buttons,core/cover,core/group,core/heading,core/spacer\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:2449:\"<!-- wp:cover {\"url\":\"https://pd.w.org/2022/01/26061d763eca13bb6.11341561.jpg\",\"id\":335,\"dimRatio\":30,\"minHeight\":66,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"48px\",\"right\":\"48px\",\"bottom\":\"48px\",\"left\":\"48px\"},\"margin\":{\"top\":\"0\"}},\"color\":{\"duotone\":[\"rgb(42, 47, 103)\",\"rgb(214, 194, 42)\"]}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;padding-top:48px;padding-right:48px;padding-bottom:48px;padding-left:48px;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-30 has-background-dim\"></span><img class=\"wp-block-cover__image-background wp-image-335\" alt=\"\" src=\"https://pd.w.org/2022/01/26061d763eca13bb6.11341561.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"48px\"}},\"layout\":{\"type\":\"constrained\",\"wideSize\":\"80%\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"textAlign\":\"center\",\"style\":{\"typography\":{\"fontSize\":\"100px\",\"textTransform\":\"uppercase\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"letterSpacing\":\"0px\",\"lineHeight\":\"1\"}},\"textColor\":\"white\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-white-color has-text-color\" style=\"font-size:100px;font-style:normal;font-weight:700;letter-spacing:0px;line-height:1;text-transform:uppercase\">Embark on a hiking adventure and explore the beauty of the woods.</h2>\n<!-- /wp:heading --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"72px\"} -->\n<div style=\"height:72px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"white\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"24px\",\"right\":\"48px\",\"bottom\":\"24px\",\"left\":\"48px\"}},\"typography\":{\"fontSize\":\"16px\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"0px\"}},\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button has-custom-font-size is-style-outline\" style=\"font-size:16px;font-style:normal;font-weight:600;letter-spacing:0px;text-transform:uppercase\"><a class=\"wp-block-button__link has-white-color has-text-color wp-element-button\" style=\"padding-top:24px;padding-right:48px;padding-bottom:24px;padding-left:48px\">Explore</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div></div>\n<!-- /wp:cover -->\";}i:12;O:8:\"stdClass\":7:{s:2:\"id\";i:303828;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:30:\"Fullscreen cover image gallery\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:895:\"\n<div class=\"wp-block-cover alignfull\" style=\"padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim-100 has-background-dim\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group is-content-justification-center is-nowrap is-layout-flex wp-container-60 wp-block-group-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><a href=\"https://thato.test/?page_id=28\"><img decoding=\"async\" src=\"https://pd.w.org/2022/01/84661f60659149cc8.02053291.jpg\" alt=\"\" /></a></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://thato.test/?page_id=28\"><img decoding=\"async\" src=\"https://pd.w.org/2022/01/21261f60ba46147b0.97888240.jpg\" alt=\"\" /></a></figure>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:43:\"gallery, images, columns, background, cover\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:32:\"core/cover,core/group,core/image\";}s:14:\"category_slugs\";a:1:{i:0;s:7:\"gallery\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:1259:\"<!-- wp:cover {\"overlayColor\":\"black\",\"minHeight\":66,\"minHeightUnit\":\"vh\",\"contentPosition\":\"center center\",\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"4vw\",\"right\":\"4vw\",\"bottom\":\"4vw\",\"left\":\"4vw\"}}}} -->\n<div class=\"wp-block-cover alignfull\" style=\"padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw;min-height:66vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim-100 has-background-dim\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"4vw\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"custom\"} -->\n<figure class=\"wp-block-image size-large\"><a href=\"https://thato.test/?page_id=28\"><img src=\"https://pd.w.org/2022/01/84661f60659149cc8.02053291.jpg\" alt=\"\" /></a></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"custom\"} -->\n<figure class=\"wp-block-image size-large\"><a href=\"https://thato.test/?page_id=28\"><img src=\"https://pd.w.org/2022/01/21261f60ba46147b0.97888240.jpg\" alt=\"\" /></a></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:cover -->\";}i:13;O:8:\"stdClass\":7:{s:2:\"id\";i:277265;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:37:\"Fullwidth posts with uppercase titles\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:6993:\"\n<div class=\"wp-block-query alignfull is-layout-flow wp-block-query-is-layout-flow\">\n<div class=\"wp-block-group alignfull is-layout-flow wp-block-group-is-layout-flow\" style=\"padding-top:0;padding-right:0;padding-bottom:0;padding-left:0\"><ul style=\"text-transform:none;\" class=\"wp-block-post-template is-layout-flow wp-block-post-template-is-layout-flow\"><li class=\"wp-block-post post-2071 post type-post status-publish format-standard hentry category-space tag-planet\">\n\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:1px\">\n<div class=\"wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-63 wp-block-group-is-layout-flex\" style=\"padding-top:16px;padding-right:16px;padding-bottom:16px;padding-left:16px\">\n<div class=\"wp-block-group is-nowrap is-layout-flex wp-container-62 wp-block-group-is-layout-flex\">\n<p>✴︎</p>\n\n\n<div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; text-transform:uppercase;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date has-small-font-size wp-elements-4003f76eccbf507a9e3d7e84a42ea154\"><time datetime=\"2021-07-06T21:31:35+00:00\">Jul 6, 2021</time></div></div>\n\n\n<div style=\"text-transform:uppercase\" class=\"taxonomy-category has-link-color has-text-color has-contrast-color wp-block-post-terms wp-elements-d846021732facad792835971f80af878\"><span class=\"wp-block-post-terms__prefix\">✴︎ </span><a href=\"https://wordpress.org/patterns/category/space/\" rel=\"tag\">Space</a></div></div>\n</div>\n\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-66 wp-block-group-is-layout-flex\" style=\"padding-top:16px;padding-right:16px;padding-bottom:var(--wp--preset--spacing--70);padding-left:16px\"><h2 style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:5.2rem;font-style:normal;font-weight:500;line-height:1.1;text-transform:uppercase;\" class=\"has-link-color has-text-color has-contrast-color wp-block-post-title wp-elements-eba6f7f6e0a9160611aa886fe4e31449 is-layout-flow wp-block-post-title-is-layout-flow\"><a href=\"https://wordpress.org/patterns/jupiter/\" target=\"_self\" >Jupiter</a></h2></div>\n\n</li><li class=\"wp-block-post post-2069 post type-post status-publish format-standard hentry category-space tag-stars\">\n\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:1px\">\n<div class=\"wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-68 wp-block-group-is-layout-flex\" style=\"padding-top:16px;padding-right:16px;padding-bottom:16px;padding-left:16px\">\n<div class=\"wp-block-group is-nowrap is-layout-flex wp-container-67 wp-block-group-is-layout-flex\">\n<p>✴︎</p>\n\n\n<div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; text-transform:uppercase;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date has-small-font-size wp-elements-4003f76eccbf507a9e3d7e84a42ea154\"><time datetime=\"2021-07-06T21:30:31+00:00\">Jul 6, 2021</time></div></div>\n\n\n<div style=\"text-transform:uppercase\" class=\"taxonomy-category has-link-color has-text-color has-contrast-color wp-block-post-terms wp-elements-d846021732facad792835971f80af878\"><span class=\"wp-block-post-terms__prefix\">✴︎ </span><a href=\"https://wordpress.org/patterns/category/space/\" rel=\"tag\">Space</a></div></div>\n</div>\n\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-71 wp-block-group-is-layout-flex\" style=\"padding-top:16px;padding-right:16px;padding-bottom:var(--wp--preset--spacing--70);padding-left:16px\"><h2 style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:5.2rem;font-style:normal;font-weight:500;line-height:1.1;text-transform:uppercase;\" class=\"has-link-color has-text-color has-contrast-color wp-block-post-title wp-elements-eba6f7f6e0a9160611aa886fe4e31449 is-layout-flow wp-block-post-title-is-layout-flow\"><a href=\"https://wordpress.org/patterns/star-clusters-in-hurcules/\" target=\"_self\" >Star Clusters in Hurcules</a></h2></div>\n\n</li><li class=\"wp-block-post post-2067 post type-post status-publish format-standard hentry category-space tag-planet\">\n\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:1px\">\n<div class=\"wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-73 wp-block-group-is-layout-flex\" style=\"padding-top:16px;padding-right:16px;padding-bottom:16px;padding-left:16px\">\n<div class=\"wp-block-group is-nowrap is-layout-flex wp-container-72 wp-block-group-is-layout-flex\">\n<p>✴︎</p>\n\n\n<div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; text-transform:uppercase;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date has-small-font-size wp-elements-4003f76eccbf507a9e3d7e84a42ea154\"><time datetime=\"2021-07-05T21:29:00+00:00\">Jul 5, 2021</time></div></div>\n\n\n<div style=\"text-transform:uppercase\" class=\"taxonomy-category has-link-color has-text-color has-contrast-color wp-block-post-terms wp-elements-d846021732facad792835971f80af878\"><span class=\"wp-block-post-terms__prefix\">✴︎ </span><a href=\"https://wordpress.org/patterns/category/space/\" rel=\"tag\">Space</a></div></div>\n</div>\n\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-76 wp-block-group-is-layout-flex\" style=\"padding-top:16px;padding-right:16px;padding-bottom:var(--wp--preset--spacing--70);padding-left:16px\"><h2 style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:5.2rem;font-style:normal;font-weight:500;line-height:1.1;text-transform:uppercase;\" class=\"has-link-color has-text-color has-contrast-color wp-block-post-title wp-elements-eba6f7f6e0a9160611aa886fe4e31449 is-layout-flow wp-block-post-title-is-layout-flow\"><a href=\"https://wordpress.org/patterns/saturn/\" target=\"_self\" >Saturn</a></h2></div>\n\n</li></ul></div>\n\n\n\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--30);padding-right:16px;padding-bottom:var(--wp--preset--spacing--30);padding-left:16px\"><nav class=\"wp-block-query-pagination is-content-justification-left is-nowrap is-layout-flex wp-container-79 wp-block-query-pagination-is-layout-flex\" aria-label=\"Pagination\">\n\n\n<a href=\"/patterns/wp-json/wp/v2/wporg-pattern?page=1&#038;per_page=100&#038;order=desc&#038;orderby=date&#038;locale=en_US&#038;wp-version=6.4.1&#038;pattern-keywords=11&#038;_fields=id%2Ctitle%2Ccontent%2Cmeta%2Ccategory_slugs%2Ckeyword_slugs%2Cpattern_content&#038;query-31-page=2\" style=\"text-transform:uppercase;\" class=\"wp-block-query-pagination-next has-small-font-size\">Next</a>\n</nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:30:\"star, posts, loop, blog, index\";s:16:\"wpop_description\";s:62:\"A fullwidth posts pattern with large titles and start accents.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:10:\"core/query\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:182:\"core/group,core/paragraph,core/post-date,core/post-template,core/post-terms,core/post-title,core/query,core/query-pagination,core/query-pagination-next,core/query-pagination-previous\";}s:14:\"category_slugs\";a:1:{i:0;s:5:\"query\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3502:\"<!-- wp:query {\"queryId\":31,\"query\":{\"perPage\":3,\"pages\":0,\"offset\":0,\"postType\":\"post\",\"order\":\"desc\",\"orderBy\":\"date\",\"author\":\"\",\"search\":\"\",\"exclude\":[],\"sticky\":\"\",\"inherit\":false},\"align\":\"full\",\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-query alignfull\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"padding-top:0;padding-right:0;padding-bottom:0;padding-left:0\"><!-- wp:post-template {\"style\":{\"typography\":{\"textTransform\":\"none\"}}} -->\n<!-- wp:group {\"style\":{\"border\":{\"bottom\":{\"color\":\"var:preset|color|contrast\",\"width\":\"1px\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:1px\"><!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"16px\",\"right\":\"16px\",\"bottom\":\"16px\",\"left\":\"16px\"}}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group\" style=\"padding-top:16px;padding-right:16px;padding-bottom:16px;padding-left:16px\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"4px\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph -->\n<p>✴︎</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:post-date {\"textAlign\":\"left\",\"format\":\"M j, Y\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}},\"typography\":{\"textTransform\":\"uppercase\"}},\"textColor\":\"contrast\",\"fontSize\":\"small\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:post-terms {\"term\":\"category\",\"prefix\":\"✴︎ \",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}},\"typography\":{\"textTransform\":\"uppercase\"}},\"textColor\":\"contrast\"} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"16px\",\"bottom\":\"var:preset|spacing|70\",\"right\":\"16px\",\"left\":\"16px\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\" style=\"padding-top:16px;padding-right:16px;padding-bottom:var(--wp--preset--spacing--70);padding-left:16px\"><!-- wp:post-title {\"isLink\":true,\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}},\"layout\":{\"selfStretch\":\"fit\"},\"typography\":{\"fontStyle\":\"normal\",\"fontWeight\":\"500\",\"lineHeight\":\"1.1\",\"textTransform\":\"uppercase\",\"fontSize\":\"5.2rem\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}},\"textColor\":\"contrast\"} /--></div>\n<!-- /wp:group -->\n<!-- /wp:post-template --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"right\":\"16px\",\"left\":\"16px\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--30);padding-right:16px;padding-bottom:var(--wp--preset--spacing--30);padding-left:16px\"><!-- wp:query-pagination {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"left\"}} -->\n<!-- wp:query-pagination-previous {\"label\":\"Previous\",\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} /-->\n\n<!-- wp:query-pagination-next {\"label\":\"Next\",\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} /-->\n<!-- /wp:query-pagination --></div>\n<!-- /wp:group --></div>\n<!-- /wp:query -->\";}i:14;O:8:\"stdClass\":7:{s:2:\"id\";i:277127;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:33:\"Fullwidth posts titles with dates\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:6510:\"\n<div class=\"wp-block-query alignfull is-layout-flow wp-block-query-is-layout-flow\">\n<div class=\"wp-block-group alignfull is-layout-flow wp-block-group-is-layout-flow\" style=\"padding-top:0;padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--40)\"><ul style=\"text-transform:none;\" class=\"alignfull wp-block-post-template is-layout-flow wp-block-post-template-is-layout-flow\"><li class=\"wp-block-post post-2071 post type-post status-publish format-standard hentry category-space tag-planet\">\n\n<div class=\"wp-block-group is-layout-flow wp-container-84 wp-block-group-is-layout-flow\" style=\"padding-bottom:var(--wp--preset--spacing--50)\">\n<div class=\"wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-82 wp-block-group-is-layout-flex\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:4px;padding-top:var(--wp--preset--spacing--30);padding-right:0;padding-bottom:var(--wp--preset--spacing--30);padding-left:0\"><div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:2rem;font-style:normal;font-weight:600;letter-spacing:1px;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date wp-elements-5813a8450eb0347cfdf34f1870882db6\"><time datetime=\"2021-07-06T21:31:35+00:00\">07.6</time></div>\n\n<div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:2rem;font-style:normal;font-weight:600;letter-spacing:1px;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date wp-elements-672016f5c95dcb277e0d666c7795c645\"><time datetime=\"2021-07-06T21:31:35+00:00\">2021</time></div></div>\n\n\n<h2 style=\"padding-top:var(--wp--preset--spacing--30); font-size:4.6rem;font-style:normal;font-weight:600;line-height:1.1;\" class=\"has-link-color has-text-color has-contrast-color wp-block-post-title wp-elements-b5fa43084743aafd1d185f08a32e7678 is-layout-flow wp-block-post-title-is-layout-flow\"><a href=\"https://wordpress.org/patterns/jupiter/\" target=\"_self\" >Jupiter</a></h2></div>\n\n</li><li class=\"wp-block-post post-2069 post type-post status-publish format-standard hentry category-space tag-stars\">\n\n<div class=\"wp-block-group is-layout-flow wp-container-87 wp-block-group-is-layout-flow\" style=\"padding-bottom:var(--wp--preset--spacing--50)\">\n<div class=\"wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-85 wp-block-group-is-layout-flex\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:4px;padding-top:var(--wp--preset--spacing--30);padding-right:0;padding-bottom:var(--wp--preset--spacing--30);padding-left:0\"><div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:2rem;font-style:normal;font-weight:600;letter-spacing:1px;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date wp-elements-5813a8450eb0347cfdf34f1870882db6\"><time datetime=\"2021-07-06T21:30:31+00:00\">07.6</time></div>\n\n<div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:2rem;font-style:normal;font-weight:600;letter-spacing:1px;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date wp-elements-672016f5c95dcb277e0d666c7795c645\"><time datetime=\"2021-07-06T21:30:31+00:00\">2021</time></div></div>\n\n\n<h2 style=\"padding-top:var(--wp--preset--spacing--30); font-size:4.6rem;font-style:normal;font-weight:600;line-height:1.1;\" class=\"has-link-color has-text-color has-contrast-color wp-block-post-title wp-elements-b5fa43084743aafd1d185f08a32e7678 is-layout-flow wp-block-post-title-is-layout-flow\"><a href=\"https://wordpress.org/patterns/star-clusters-in-hurcules/\" target=\"_self\" >Star Clusters in Hurcules</a></h2></div>\n\n</li><li class=\"wp-block-post post-2067 post type-post status-publish format-standard hentry category-space tag-planet\">\n\n<div class=\"wp-block-group is-layout-flow wp-container-90 wp-block-group-is-layout-flow\" style=\"padding-bottom:var(--wp--preset--spacing--50)\">\n<div class=\"wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-88 wp-block-group-is-layout-flex\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:4px;padding-top:var(--wp--preset--spacing--30);padding-right:0;padding-bottom:var(--wp--preset--spacing--30);padding-left:0\"><div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:2rem;font-style:normal;font-weight:600;letter-spacing:1px;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date wp-elements-5813a8450eb0347cfdf34f1870882db6\"><time datetime=\"2021-07-05T21:29:00+00:00\">07.5</time></div>\n\n<div style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0; font-size:2rem;font-style:normal;font-weight:600;letter-spacing:1px;\" class=\"has-text-align-left has-link-color has-text-color has-contrast-color wp-block-post-date wp-elements-672016f5c95dcb277e0d666c7795c645\"><time datetime=\"2021-07-05T21:29:00+00:00\">2021</time></div></div>\n\n\n<h2 style=\"padding-top:var(--wp--preset--spacing--30); font-size:4.6rem;font-style:normal;font-weight:600;line-height:1.1;\" class=\"has-link-color has-text-color has-contrast-color wp-block-post-title wp-elements-b5fa43084743aafd1d185f08a32e7678 is-layout-flow wp-block-post-title-is-layout-flow\"><a href=\"https://wordpress.org/patterns/saturn/\" target=\"_self\" >Saturn</a></h2></div>\n\n</li></ul></div>\n\n\n\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--40)\"><nav class=\"wp-block-query-pagination is-content-justification-space-between is-nowrap is-layout-flex wp-container-93 wp-block-query-pagination-is-layout-flex\" aria-label=\"Pagination\">\n\n\n<a href=\"/patterns/wp-json/wp/v2/wporg-pattern?page=1&#038;per_page=100&#038;order=desc&#038;orderby=date&#038;locale=en_US&#038;wp-version=6.4.1&#038;pattern-keywords=11&#038;_fields=id%2Ctitle%2Ccontent%2Cmeta%2Ccategory_slugs%2Ckeyword_slugs%2Cpattern_content&#038;query-1-page=2\" style=\"font-size:2rem;font-style:normal;font-weight:600;text-transform:uppercase;letter-spacing:1px;\" class=\"wp-block-query-pagination-next\">Next Page</a>\n</nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:31:\"Posts, Query, Loop, Blog, Index\";s:16:\"wpop_description\";s:62:\"A fullwidth posts pattern with large titles and numeral dates.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:10:\"core/query\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:151:\"core/group,core/post-date,core/post-template,core/post-title,core/query,core/query-pagination,core/query-pagination-next,core/query-pagination-previous\";}s:14:\"category_slugs\";a:1:{i:0;s:5:\"query\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:3583:\"<!-- wp:query {\"queryId\":1,\"query\":{\"perPage\":3,\"pages\":0,\"offset\":0,\"postType\":\"post\",\"order\":\"desc\",\"orderBy\":\"date\",\"author\":\"\",\"search\":\"\",\"exclude\":[],\"sticky\":\"\",\"inherit\":false},\"align\":\"full\",\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-query alignfull\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"right\":\"var:preset|spacing|40\",\"bottom\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|40\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"padding-top:0;padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--40)\"><!-- wp:post-template {\"align\":\"full\",\"style\":{\"typography\":{\"textTransform\":\"none\"}}} -->\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0\",\"padding\":{\"bottom\":\"var:preset|spacing|50\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\" style=\"padding-bottom:var(--wp--preset--spacing--50)\"><!-- wp:group {\"style\":{\"border\":{\"bottom\":{\"color\":\"var:preset|color|contrast\",\"width\":\"4px\"}},\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"0\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group\" style=\"border-bottom-color:var(--wp--preset--color--contrast);border-bottom-width:4px;padding-top:var(--wp--preset--spacing--30);padding-right:0;padding-bottom:var(--wp--preset--spacing--30);padding-left:0\"><!-- wp:post-date {\"textAlign\":\"left\",\"format\":\"m.j\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}},\"typography\":{\"letterSpacing\":\"1px\",\"fontSize\":\"2rem\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\"}},\"textColor\":\"contrast\"} /-->\n\n<!-- wp:post-date {\"textAlign\":\"left\",\"format\":\"Y\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}},\"typography\":{\"letterSpacing\":\"1px\",\"fontSize\":\"2rem\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\"}},\"textColor\":\"contrast\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:post-title {\"isLink\":true,\"style\":{\"layout\":{\"selfStretch\":\"fit\"},\"typography\":{\"lineHeight\":\"1.1\",\"fontSize\":\"4.6rem\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}},\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\"}}},\"textColor\":\"contrast\"} /--></div>\n<!-- /wp:group -->\n<!-- /wp:post-template --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|40\",\"bottom\":\"var:preset|spacing|40\",\"right\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|40\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--40)\"><!-- wp:query-pagination {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<!-- wp:query-pagination-previous {\"style\":{\"typography\":{\"fontSize\":\"2rem\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"1px\"}}} /-->\n\n<!-- wp:query-pagination-next {\"style\":{\"typography\":{\"fontSize\":\"2rem\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\",\"textTransform\":\"uppercase\",\"letterSpacing\":\"1px\"}}} /-->\n<!-- /wp:query-pagination --></div>\n<!-- /wp:group --></div>\n<!-- /wp:query -->\";}i:15;O:8:\"stdClass\":7:{s:2:\"id\";i:229092;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:41:\"Header inside full-width background image\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:4810:\"\n<div class=\"wp-block-group alignfull is-layout-constrained wp-block-group-is-layout-constrained\">\n<div class=\"wp-block-cover alignfull is-light\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30);min-height:50px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-61\" alt=\"\" src=\"https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/a017-eberhard-cco-the-after-rain.jpg?w=1200&amp;h=1200&amp;fit=clip&amp;crop=default&amp;dpr=1&amp;q=75&amp;vib=3&amp;con=3&amp;usm=15&amp;cs=srgb&amp;bg=F4F4F3&amp;ixlib=js-2.2.1&amp;s=e7b4ca0a0edcc84ba48c1f7ebf02dd5a\" style=\"object-position:50% 50%\" data-object-fit=\"cover\" data-object-position=\"50% 50%\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-group alignwide has-base-color has-text-color has-link-color wp-elements-a5c55c350363e1349d710a58148fd7b6 is-content-justification-space-between is-layout-flex wp-container-99 wp-block-group-is-layout-flex\" style=\"margin-top:0;margin-bottom:0\">\n<div class=\"wp-block-group is-layout-flex wp-block-group-is-layout-flex\"><div class=\"is-default-size is-style-default wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n<h1 class=\"has-link-color has-text-color has-white-color wp-block-site-title has-medium-font-size wp-elements-e24c80986e13ab3d929b38d6b46e3019\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1></div>\n\n\n<nav class=\"has-text-color has-white-color is-responsive items-justified-right is-fallback wp-block-navigation is-content-justification-right is-layout-flex wp-container-98 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-97\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-97-content\">\n							<ul class=\"wp-block-navigation__container has-text-color has-white-color is-responsive items-justified-right is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n\n\n\n<div style=\"height:33vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:100:\"Simple header with logo, site title, navigation and a full-width background image with dark overlay.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:80:\"core/cover,core/group,core/navigation,core/site-logo,core/site-title,core/spacer\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"header\";}s:13:\"keyword_slugs\";a:1:{i:0;s:4:\"core\";}s:15:\"pattern_content\";s:2554:\"<!-- wp:group {\"align\":\"full\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\"><!-- wp:cover {\"url\":\"https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/a017-eberhard-cco-the-after-rain.jpg?w=1200&h=1200&fit=clip&crop=default&dpr=1&q=75&vib=3&con=3&usm=15&cs=srgb&bg=F4F4F3&ixlib=js-2.2.1&s=e7b4ca0a0edcc84ba48c1f7ebf02dd5a\",\"id\":61,\"dimRatio\":50,\"overlayColor\":\"black\",\"focalPoint\":{\"x\":0.5,\"y\":0.5},\"minHeight\":50,\"contentPosition\":\"center center\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30);min-height:50px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim\"></span><img class=\"wp-block-cover__image-background wp-image-61\" alt=\"\" src=\"https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/a017-eberhard-cco-the-after-rain.jpg?w=1200&amp;h=1200&amp;fit=clip&amp;crop=default&amp;dpr=1&amp;q=75&amp;vib=3&amp;con=3&amp;usm=15&amp;cs=srgb&amp;bg=F4F4F3&amp;ixlib=js-2.2.1&amp;s=e7b4ca0a0edcc84ba48c1f7ebf02dd5a\" style=\"object-position:50% 50%\" data-object-fit=\"cover\" data-object-position=\"50% 50%\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"align\":\"wide\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|base\"}}},\"spacing\":{\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"textColor\":\"base\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide has-base-color has-text-color has-link-color\" style=\"margin-top:0;margin-bottom:0\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"className\":\"is-style-default\"} /-->\n\n<!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|background\"}}}},\"textColor\":\"white\",\"fontSize\":\"medium\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:navigation {\"textColor\":\"white\",\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"33vw\"} -->\n<div style=\"height:33vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div></div>\n<!-- /wp:cover --></div>\n<!-- /wp:group -->\";}i:16;O:8:\"stdClass\":7:{s:2:\"id\";i:229097;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:34:\"Simple header with dark background\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3886:\"\n<div class=\"wp-block-group alignfull has-background-color has-white-color has-black-background-color has-text-color has-background has-link-color wp-elements-4956719e1d36ae31d9fb9c185b0a148a is-layout-constrained wp-block-group-is-layout-constrained\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-105 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-block-group-is-layout-flex\"><div class=\"is-default-size wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n<h1 class=\"has-link-color wp-block-site-title wp-elements-f1e98d6c897e424c7d4e8232ded39f0a\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1></div>\n\n\n<nav class=\"is-responsive items-justified-right is-fallback wp-block-navigation is-content-justification-right is-layout-flex wp-container-104 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-103\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-103-content\">\n							<ul class=\"wp-block-navigation__container is-responsive items-justified-right is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:76:\"Simple header with logo, site title, navigation links and a dark background.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:57:\"core/group,core/navigation,core/site-logo,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1232:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|white\"}}},\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}}},\"backgroundColor\":\"black\",\"textColor\":\"white\",\"className\":\"has-background-color\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-background-color has-white-color has-black-background-color has-text-color has-background has-link-color\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo /-->\n\n<!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|white\"}}}}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:17;O:8:\"stdClass\":7:{s:2:\"id\";i:229101;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:29:\"Text-only header with tagline\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3646:\"\n<div class=\"wp-block-group alignfull is-layout-constrained wp-block-group-is-layout-constrained\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-110 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-block-group-is-layout-flex\"><h1 class=\"has-link-color wp-block-site-title wp-elements-d6202aa7d337f2ce08aedc8ed261a84e\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n<p class=\"wp-block-site-tagline\">Beautifully designed patterns ready to go with a simple copy/paste</p></div>\n\n\n<nav class=\"is-responsive items-justified-right is-fallback wp-block-navigation is-content-justification-right is-layout-flex wp-container-109 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-108\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-108-content\">\n							<ul class=\"wp-block-navigation__container is-responsive items-justified-right is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:53:\"Header with site title, tagline and navigation links.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:60:\"core/group,core/navigation,core/site-tagline,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:966:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}}} /-->\n\n<!-- wp:site-tagline /--></div>\n<!-- /wp:group -->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:18;O:8:\"stdClass\":7:{s:2:\"id\";i:229105;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:26:\"Simple header with tagline\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:4215:\"\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color has-link-color wp-elements-7479bd1e590756c4aa927894dbdbef4e is-layout-constrained wp-block-group-is-layout-constrained\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-116 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-container-113 wp-block-group-is-layout-flex\"><div class=\"is-default-size wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-112 wp-block-group-is-layout-flex\"><h1 class=\"has-link-color wp-block-site-title wp-elements-d6202aa7d337f2ce08aedc8ed261a84e\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n<p class=\"wp-block-site-tagline has-small-font-size\">Beautifully designed patterns ready to go with a simple copy/paste</p></div>\n</div>\n\n\n<nav class=\"has-small-font-size is-responsive items-justified-right is-fallback wp-block-navigation has-small-font-size is-content-justification-right is-layout-flex wp-container-115 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-114\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-114-content\">\n							<ul class=\"wp-block-navigation__container has-small-font-size is-responsive items-justified-right is-fallback wp-block-navigation has-small-font-size\"><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:92:\"Header with site logo, title and tagline on the left and with navigation links on the right.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:75:\"core/group,core/navigation,core/site-logo,core/site-tagline,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1389:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}},\"textColor\":\"contrast\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color has-link-color\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"4px\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}}} /-->\n\n<!-- wp:site-tagline {\"fontSize\":\"small\"} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"fontSize\":\"small\"} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:19;O:8:\"stdClass\":7:{s:2:\"id\";i:229111;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:36:\"Fullwidth site title and menu button\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3418:\"\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color has-link-color wp-elements-e0434f7bbe3c9d87e2f1562e19b734da is-content-justification-space-between is-layout-flex wp-container-120 wp-block-group-is-layout-flex\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><h1 class=\"wp-block-site-title\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n<nav class=\"is-responsive items-justified-right is-fallback wp-block-navigation is-content-justification-right is-layout-flex wp-container-119 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open always-shown\" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container hidden-by-default \" style=\"\" id=\"modal-118\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-118-content\">\n							<ul class=\"wp-block-navigation__container is-responsive items-justified-right is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:51:\"Header with site title and a hamburger menu button.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:42:\"core/group,core/navigation,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:794:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}},\"textColor\":\"contrast\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color has-link-color\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:site-title /-->\n\n<!-- wp:navigation {\"overlayMenu\":\"always\",\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"}} /--></div>\n<!-- /wp:group -->\";}i:20;O:8:\"stdClass\":7:{s:2:\"id\";i:229116;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:32:\"Fullwidth header with hero image\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:4746:\"\n<div class=\"wp-block-group alignfull is-layout-constrained wp-block-group-is-layout-constrained\">\n<div class=\"wp-block-group alignfull is-content-justification-space-between is-layout-flex wp-container-125 wp-block-group-is-layout-flex\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group is-layout-flex wp-container-122 wp-block-group-is-layout-flex\"><div class=\"is-default-size wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-121 wp-block-group-is-layout-flex\"><h1 class=\"has-link-color wp-block-site-title has-medium-font-size wp-elements-234e57400cf5587740bb7caa261d6fc4\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1></div>\n</div>\n\n\n<nav class=\"is-responsive items-justified-right is-fallback wp-block-navigation is-content-justification-right is-layout-flex wp-container-124 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-123\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-123-content\">\n							<ul class=\"wp-block-navigation__container is-responsive items-justified-right is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n\n\n\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;min-height:40vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim-0 has-background-dim\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background wp-image-61\" alt=\"\" src=\"https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/a017-eberhard-cco-the-after-rain.jpg?w=1200&amp;h=1200&amp;fit=clip&amp;crop=default&amp;dpr=1&amp;q=75&amp;vib=3&amp;con=3&amp;usm=15&amp;cs=srgb&amp;bg=F4F4F3&amp;ixlib=js-2.2.1&amp;s=e7b4ca0a0edcc84ba48c1f7ebf02dd5a\" style=\"object-position:50% 50%\" data-object-fit=\"cover\" data-object-position=\"50% 50%\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:65:\"Header on a white background followed by a full-width hero image.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:80:\"core/cover,core/group,core/navigation,core/site-logo,core/site-title,core/spacer\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"header\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:2566:\"<!-- wp:group {\"align\":\"full\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}}},\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"4px\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}},\"fontSize\":\"medium\"} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:cover {\"url\":\"https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/a017-eberhard-cco-the-after-rain.jpg?w=1200&h=1200&fit=clip&crop=default&dpr=1&q=75&vib=3&con=3&usm=15&cs=srgb&bg=F4F4F3&ixlib=js-2.2.1&s=e7b4ca0a0edcc84ba48c1f7ebf02dd5a\",\"id\":61,\"dimRatio\":0,\"overlayColor\":\"black\",\"focalPoint\":{\"x\":0.5,\"y\":0.5},\"minHeight\":40,\"minHeightUnit\":\"vw\",\"contentPosition\":\"center center\",\"isDark\":false,\"align\":\"full\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\"}}}} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0;min-height:40vw\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-black-background-color has-background-dim-0 has-background-dim\"></span><img class=\"wp-block-cover__image-background wp-image-61\" alt=\"\" src=\"https://img.rawpixel.com/s3fs-private/rawpixel_images/website_content/a017-eberhard-cco-the-after-rain.jpg?w=1200&amp;h=1200&amp;fit=clip&amp;crop=default&amp;dpr=1&amp;q=75&amp;vib=3&amp;con=3&amp;usm=15&amp;cs=srgb&amp;bg=F4F4F3&amp;ixlib=js-2.2.1&amp;s=e7b4ca0a0edcc84ba48c1f7ebf02dd5a\" style=\"object-position:50% 50%\" data-object-fit=\"cover\" data-object-position=\"50% 50%\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:spacer {\"height\":\"50px\"} -->\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div></div>\n<!-- /wp:cover --></div>\n<!-- /wp:group -->\";}i:21;O:8:\"stdClass\":7:{s:2:\"id\";i:229088;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:13:\"Simple header\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3749:\"\n<div class=\"wp-block-group alignfull is-layout-constrained wp-block-group-is-layout-constrained\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-131 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-container-128 wp-block-group-is-layout-flex\"><div class=\"is-default-size wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n<h1 class=\"has-link-color wp-block-site-title wp-elements-d6202aa7d337f2ce08aedc8ed261a84e\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1></div>\n\n\n<nav class=\"is-responsive items-justified-right is-fallback wp-block-navigation is-content-justification-right is-layout-flex wp-container-130 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-129\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-129-content\">\n							<ul class=\"wp-block-navigation__container is-responsive items-justified-right is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:51:\"Simple header with logo, site title and navigation.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:57:\"core/group,core/navigation,core/site-logo,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1021:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo /-->\n\n<!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:22;O:8:\"stdClass\":7:{s:2:\"id\";i:229080;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:25:\"Centered header with logo\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3713:\"\n<div class=\"wp-block-group alignfull is-layout-constrained wp-block-group-is-layout-constrained\" style=\"padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-vertical is-content-justification-center is-layout-flex wp-container-135 wp-block-group-is-layout-flex\"><div class=\"is-default-size wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n<h1 class=\"has-link-color has-text-color has-contrast-color wp-block-site-title has-large-font-size wp-elements-9728cce79011b64628d7f6beff066787\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n<nav class=\"is-responsive items-justified-center is-fallback wp-block-navigation is-content-justification-center is-layout-flex wp-container-134 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-133\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-133-content\">\n							<ul class=\"wp-block-navigation__container is-responsive items-justified-center is-fallback wp-block-navigation\"><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\" wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:65:\"Center aligned header with logo, site title and navigation links.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:57:\"core/group,core/navigation,core/site-logo,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:926:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|40\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|30\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:site-logo /-->\n\n<!-- wp:site-title {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}},\"textColor\":\"contrast\",\"fontSize\":\"large\"} /-->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"center\"}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:23;O:8:\"stdClass\":7:{s:2:\"id\";i:229084;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:37:\"Fullwidth header with large font size\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3546:\"\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color has-link-color wp-elements-4b5a1e7a31f9f44eaeb3ab45e5ae60f1 is-content-justification-space-between is-layout-flex wp-container-139 wp-block-group-is-layout-flex\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><h1 class=\"wp-block-site-title has-large-font-size\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n<nav class=\"has-large-font-size is-responsive items-justified-right is-fallback wp-block-navigation has-large-font-size is-content-justification-right is-layout-flex wp-container-138 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-137\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-137-content\">\n							<ul class=\"wp-block-navigation__container has-large-font-size is-responsive items-justified-right is-fallback wp-block-navigation has-large-font-size\"><li class=\"has-large-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\"has-large-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\"has-large-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:80:\"Header with a large site title and navigation links in the same large font size.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/header\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:42:\"core/group,core/navigation,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"header\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:811:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|30\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|30\",\"left\":\"var:preset|spacing|30\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|contrast\"}}}},\"textColor\":\"contrast\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color has-link-color\" style=\"padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:site-title {\"fontSize\":\"large\"} /-->\n\n<!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\";}i:24;O:8:\"stdClass\":7:{s:2:\"id\";i:229123;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:33:\"Centered footer with social links\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:4180:\"\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color is-vertical is-content-justification-center is-layout-flex wp-container-142 wp-block-group-is-layout-flex\" style=\"min-height:30vh;margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--60);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--60);padding-left:var(--wp--preset--spacing--50)\">\n<div class=\"wp-block-group is-nowrap is-layout-flex wp-container-141 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-center\">Proudly powered by <a href=\"https://wordpress.org\">WordPress</a></p>\n\n\n\n<ul class=\"wp-block-social-links has-small-icon-size is-style-logos-only is-nowrap is-layout-flex wp-container-140 wp-block-social-links-is-layout-flex\"><li class=\"wp-social-link wp-social-link-twitter  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M22.23,5.924c-0.736,0.326-1.527,0.547-2.357,0.646c0.847-0.508,1.498-1.312,1.804-2.27 c-0.793,0.47-1.671,0.812-2.606,0.996C18.324,4.498,17.257,4,16.077,4c-2.266,0-4.103,1.837-4.103,4.103 c0,0.322,0.036,0.635,0.106,0.935C8.67,8.867,5.647,7.234,3.623,4.751C3.27,5.357,3.067,6.062,3.067,6.814 c0,1.424,0.724,2.679,1.825,3.415c-0.673-0.021-1.305-0.206-1.859-0.513c0,0.017,0,0.034,0,0.052c0,1.988,1.414,3.647,3.292,4.023 c-0.344,0.094-0.707,0.144-1.081,0.144c-0.264,0-0.521-0.026-0.772-0.074c0.522,1.63,2.038,2.816,3.833,2.85 c-1.404,1.1-3.174,1.756-5.096,1.756c-0.331,0-0.658-0.019-0.979-0.057c1.816,1.164,3.973,1.843,6.29,1.843 c7.547,0,11.675-6.252,11.675-11.675c0-0.178-0.004-0.355-0.012-0.531C20.985,7.47,21.68,6.747,22.23,5.924z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Twitter</span></a></li>\n\n<li class=\"wp-social-link wp-social-link-instagram  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M12,4.622c2.403,0,2.688,0.009,3.637,0.052c0.877,0.04,1.354,0.187,1.671,0.31c0.42,0.163,0.72,0.358,1.035,0.673 c0.315,0.315,0.51,0.615,0.673,1.035c0.123,0.317,0.27,0.794,0.31,1.671c0.043,0.949,0.052,1.234,0.052,3.637 s-0.009,2.688-0.052,3.637c-0.04,0.877-0.187,1.354-0.31,1.671c-0.163,0.42-0.358,0.72-0.673,1.035 c-0.315,0.315-0.615,0.51-1.035,0.673c-0.317,0.123-0.794,0.27-1.671,0.31c-0.949,0.043-1.233,0.052-3.637,0.052 s-2.688-0.009-3.637-0.052c-0.877-0.04-1.354-0.187-1.671-0.31c-0.42-0.163-0.72-0.358-1.035-0.673 c-0.315-0.315-0.51-0.615-0.673-1.035c-0.123-0.317-0.27-0.794-0.31-1.671C4.631,14.688,4.622,14.403,4.622,12 s0.009-2.688,0.052-3.637c0.04-0.877,0.187-1.354,0.31-1.671c0.163-0.42,0.358-0.72,0.673-1.035 c0.315-0.315,0.615-0.51,1.035-0.673c0.317-0.123,0.794-0.27,1.671-0.31C9.312,4.631,9.597,4.622,12,4.622 M12,3 C9.556,3,9.249,3.01,8.289,3.054C7.331,3.098,6.677,3.25,6.105,3.472C5.513,3.702,5.011,4.01,4.511,4.511 c-0.5,0.5-0.808,1.002-1.038,1.594C3.25,6.677,3.098,7.331,3.054,8.289C3.01,9.249,3,9.556,3,12c0,2.444,0.01,2.751,0.054,3.711 c0.044,0.958,0.196,1.612,0.418,2.185c0.23,0.592,0.538,1.094,1.038,1.594c0.5,0.5,1.002,0.808,1.594,1.038 c0.572,0.222,1.227,0.375,2.185,0.418C9.249,20.99,9.556,21,12,21s2.751-0.01,3.711-0.054c0.958-0.044,1.612-0.196,2.185-0.418 c0.592-0.23,1.094-0.538,1.594-1.038c0.5-0.5,0.808-1.002,1.038-1.594c0.222-0.572,0.375-1.227,0.418-2.185 C20.99,14.751,21,14.444,21,12s-0.01-2.751-0.054-3.711c-0.044-0.958-0.196-1.612-0.418-2.185c-0.23-0.592-0.538-1.094-1.038-1.594 c-0.5-0.5-1.002-0.808-1.594-1.038c-0.572-0.222-1.227-0.375-2.185-0.418C14.751,3.01,14.444,3,12,3L12,3z M12,7.378 c-2.552,0-4.622,2.069-4.622,4.622S9.448,16.622,12,16.622s4.622-2.069,4.622-4.622S14.552,7.378,12,7.378z M12,15 c-1.657,0-3-1.343-3-3s1.343-3,3-3s3,1.343,3,3S13.657,15,12,15z M16.804,6.116c-0.596,0-1.08,0.484-1.08,1.08 s0.484,1.08,1.08,1.08c0.596,0,1.08-0.484,1.08-1.08S17.401,6.116,16.804,6.116z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Instagram</span></a></li></ul>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:82:\"Centered footer with the sentence \"Proudly powered by WordPress\" and social links.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:25:\"core/group,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1495:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"right\":\"var:preset|spacing|50\",\"bottom\":\"var:preset|spacing|60\",\"left\":\"var:preset|spacing|50\",\"top\":\"var:preset|spacing|60\"},\"blockGap\":\"var:preset|spacing|40\",\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}},\"dimensions\":{\"minHeight\":\"30vh\"}},\"textColor\":\"contrast\",\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"center\",\"verticalAlignment\":\"center\"}} -->\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color\" style=\"min-height:30vh;margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--60);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--60);padding-left:var(--wp--preset--spacing--50)\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"24px\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"center\"} -->\n<p class=\"has-text-align-center\">Proudly powered by <a href=\"https://wordpress.org\">WordPress</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"size\":\"has-small-icon-size\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<ul class=\"wp-block-social-links has-small-icon-size is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"instagram\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:25;O:8:\"stdClass\":7:{s:2:\"id\";i:229127;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:47:\"Footer with search, site title, and credit line\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2966:\"\n<div class=\"wp-block-group alignfull has-background is-layout-constrained wp-block-group-is-layout-constrained\" style=\"background-color:#00000008;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--40)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-149 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group wp-container-content-144 is-content-justification-left is-layout-constrained wp-container-145 wp-block-group-is-layout-constrained\">\n<p class=\"has-text-align-left\" style=\"font-size:0.9rem;font-style:normal;font-weight:600;letter-spacing:1px;text-transform:uppercase\">Search</p>\n\n\n<form role=\"search\" method=\"get\" action=\"https://wordpress.org/patterns/\" class=\"wp-block-search__button-outside wp-block-search__icon-button wp-block-search\"    ><label class=\"wp-block-search__label screen-reader-text\" for=\"wp-block-search__input-143\" >Search</label><div class=\"wp-block-search__inside-wrapper \"  style=\"width: 100%\"><input class=\"wp-block-search__input\" id=\"wp-block-search__input-143\" placeholder=\"\" value=\"\" type=\"search\" name=\"s\" required  style=\"border-width: 1px\"/><button aria-label=\"Search\" class=\"wp-block-search__button has-icon wp-element-button\" type=\"submit\"  style=\"border-width: 1px\"><svg class=\"search-icon\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n					<path d=\"M13 5c-3.3 0-6 2.7-6 6 0 1.4.5 2.7 1.3 3.7l-3.8 3.8 1.1 1.1 3.8-3.8c1 .8 2.3 1.3 3.7 1.3 3.3 0 6-2.7 6-6S16.3 5 13 5zm0 10.5c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5 4.5 2 4.5 4.5-2 4.5-4.5 4.5z\"></path>\n				</svg></button></div></form></div>\n\n\n\n<div class=\"wp-block-group is-content-justification-right is-nowrap is-layout-flex wp-container-148 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-147 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-left\" style=\"font-size:0.9rem;font-style:normal;font-weight:600;letter-spacing:1px;text-transform:uppercase\">Social</p>\n\n\n\n<div class=\"wp-block-group has-small-font-size is-vertical is-content-justification-left is-layout-flex wp-container-146 wp-block-group-is-layout-flex\">\n<p><a href=\"#\">Facebook</a></p>\n\n\n\n<p><a href=\"#\">Instagram</a></p>\n\n\n\n<p><a href=\"#\">Twitter</a></p>\n</div>\n</div>\n</div>\n</div>\n\n\n\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-151 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-block-group-is-layout-flex\"><h1 class=\"wp-block-site-title has-small-font-size\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1></div>\n\n\n\n<p class=\"has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:88:\"Footer with search field and site title on the left, and small credit line on the right.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:65:\"core/group,core/paragraph,core/search,core/site-title,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:3254:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"right\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|40\",\"top\":\"var:preset|spacing|50\",\"bottom\":\"var:preset|spacing|50\"}},\"color\":{\"background\":\"#00000008\"}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-background\" style=\"background-color:#00000008;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--40)\"><!-- wp:group {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":\"var:preset|spacing|60\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"justifyContent\":\"space-between\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"constrained\",\"justifyContent\":\"left\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"textTransform\":\"uppercase\",\"fontSize\":\"0.9rem\",\"letterSpacing\":\"1px\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\"}}} -->\n<p class=\"has-text-align-left\" style=\"font-size:0.9rem;font-style:normal;font-weight:600;letter-spacing:1px;text-transform:uppercase\">Search</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:search {\"label\":\"Search\",\"showLabel\":false,\"width\":100,\"widthUnit\":\"%\",\"buttonText\":\"Search\",\"buttonUseIcon\":true,\"style\":{\"border\":{\"width\":\"1px\"}}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":[]},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"right\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\",\"style\":{\"typography\":{\"textTransform\":\"uppercase\",\"fontSize\":\"0.9rem\",\"letterSpacing\":\"1px\",\"fontStyle\":\"normal\",\"fontWeight\":\"600\"}}} -->\n<p class=\"has-text-align-left\" style=\"font-size:0.9rem;font-style:normal;font-weight:600;letter-spacing:1px;text-transform:uppercase\">Social</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"8px\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"left\"},\"fontSize\":\"small\"} -->\n<div class=\"wp-block-group has-small-font-size\"><!-- wp:paragraph -->\n<p><a href=\"#\">Facebook</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"#\">Instagram</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"#\">Twitter</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"48px\"} -->\n<div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-title {\"fontSize\":\"small\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:26;O:8:\"stdClass\":7:{s:2:\"id\";i:229131;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:38:\"Footer with site title and credit line\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:840:\"\n<div class=\"wp-block-group alignfull has-background-color is-layout-constrained wp-block-group-is-layout-constrained\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-154 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-block-group-is-layout-flex\"><h1 class=\"wp-block-site-title has-small-font-size\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1></div>\n\n\n\n<p class=\"has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:64:\"Footer with site title on the left and credit line on the right.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:41:\"core/group,core/paragraph,core/site-title\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1095:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|40\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|30\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"className\":\"has-background-color\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-background-color\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-title {\"fontSize\":\"small\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:27;O:8:\"stdClass\":7:{s:2:\"id\";i:229135;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:38:\"Footer with navigation and credit line\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3652:\"\n<div class=\"wp-block-group alignfull has-background-color is-layout-constrained wp-block-group-is-layout-constrained\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-159 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-layout-flex wp-block-group-is-layout-flex\"><nav class=\"has-small-font-size is-responsive items-justified-left is-fallback wp-block-navigation has-small-font-size is-content-justification-left is-layout-flex wp-container-157 wp-block-navigation-is-layout-flex\" aria-label=\"\" \n			data-wp-interactive\n			data-wp-context=\'{ \"core\": { \"navigation\": { \"overlayOpenedBy\": {}, \"type\": \"overlay\", \"roleAttribute\": \"\" } } }\'\n		><button aria-haspopup=\"true\" aria-label=\"Open menu\" class=\"wp-block-navigation__responsive-container-open \" \n			data-wp-on--click=\"actions.core.navigation.openMenuOnClick\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n		><svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\"><rect x=\"4\" y=\"7.5\" width=\"16\" height=\"1.5\" /><rect x=\"4\" y=\"15\" width=\"16\" height=\"1.5\" /></svg></button>\n			<div class=\"wp-block-navigation__responsive-container  \" style=\"\" id=\"modal-156\" \n			data-wp-class--has-modal-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-class--is-menu-open=\"selectors.core.navigation.isMenuOpen\"\n			data-wp-effect=\"effects.core.navigation.initMenu\"\n			data-wp-on--keydown=\"actions.core.navigation.handleMenuKeydown\"\n			data-wp-on--focusout=\"actions.core.navigation.handleMenuFocusout\"\n			tabindex=\"-1\"\n		>\n				<div class=\"wp-block-navigation__responsive-close\" tabindex=\"-1\">\n					<div aria-modal=\"\" role=\"\" class=\"wp-block-navigation__responsive-dialog\" aria-label=\"Menu\" \n			data-wp-bind--aria-modal=\"selectors.core.navigation.ariaModal\"\n			data-wp-bind--role=\"selectors.core.navigation.roleAttribute\"\n			data-wp-effect=\"effects.core.navigation.focusFirstElement\"\n		>\n							<button aria-label=\"Close menu\" class=\"wp-block-navigation__responsive-container-close\" \n			data-wp-on--click=\"actions.core.navigation.closeMenuOnClick\"\n		><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M13 11.8l6.1-6.3-1-1-6.1 6.2-6.1-6.2-1 1 6.1 6.3-6.5 6.7 1 1 6.5-6.6 6.5 6.6 1-1z\"></path></svg></button>\n						<div class=\"wp-block-navigation__responsive-container-content\" id=\"modal-156-content\">\n							<ul class=\"wp-block-navigation__container has-small-font-size is-responsive items-justified-left is-fallback wp-block-navigation has-small-font-size\"><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul>\n						</div>\n					</div>\n				</div>\n			</div></nav></div>\n\n\n\n<p class=\"has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:64:\"Footer with navigation on the left and credit line on the right.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:41:\"core/group,core/navigation,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1174:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|40\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|30\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"className\":\"has-background-color\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-background-color\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"left\"},\"fontSize\":\"small\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:28;O:8:\"stdClass\":7:{s:2:\"id\";i:229139;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:56:\"Fullwidth footer with background color and three columns\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2963:\"\n<div class=\"wp-block-group alignfull has-background-color has-white-color has-black-background-color has-text-color has-background has-link-color wp-elements-8d0170a0199cafe7fbcba6c0b4dac464 is-vertical is-content-justification-stretch is-layout-flex wp-container-169 wp-block-group-is-layout-flex\" style=\"min-height:40vh;margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--60);padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--60);padding-left:var(--wp--preset--spacing--40)\">\n<div class=\"wp-block-columns alignwide has-small-font-size is-layout-flex wp-container-167 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p class=\"has-text-align-center\">Location</p>\n\n\n\n<p class=\"has-text-align-center\">2020 Lomita Blvd,&nbsp;<br>Torrance, CA 90101<br>United States</p>\n\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p class=\"has-text-align-center\">Pages</p>\n\n\n<nav class=\"has-small-font-size items-justified-center is-vertical no-wrap is-fallback wp-block-navigation has-small-font-size is-content-justification-center is-nowrap is-layout-flex wp-container-163 wp-block-navigation-is-layout-flex\" aria-label=\"\"><ul class=\"wp-block-navigation__container has-small-font-size items-justified-center is-vertical no-wrap is-fallback wp-block-navigation has-small-font-size\"><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul></nav>\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p class=\"has-text-align-center\">Follow us</p>\n\n\n\n<div class=\"wp-block-group is-vertical is-content-justification-center is-layout-flex wp-container-165 wp-block-group-is-layout-flex\">\n<p><a href=\"#\">Facebook</a></p>\n\n\n\n<p><a href=\"#\">Instagram</a></p>\n\n\n\n<p><a href=\"#\">Twitter</a></p>\n</div>\n\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-group alignwide is-content-justification-center is-layout-flex wp-container-168 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-center has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:57:\"Text-only footer with background color and three columns.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:78:\"core/column,core/columns,core/group,core/navigation,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:3225:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|white\"}}},\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|60\",\"right\":\"var:preset|spacing|40\",\"bottom\":\"var:preset|spacing|60\",\"left\":\"var:preset|spacing|40\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\"},\"blockGap\":\"var:preset|spacing|30\"},\"dimensions\":{\"minHeight\":\"40vh\"}},\"backgroundColor\":\"black\",\"textColor\":\"white\",\"className\":\"has-background-color\",\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"stretch\",\"verticalAlignment\":\"center\"}} -->\n<div class=\"wp-block-group alignfull has-background-color has-white-color has-black-background-color has-text-color has-background has-link-color\" style=\"min-height:40vh;margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--60);padding-right:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--60);padding-left:var(--wp--preset--spacing--40)\"><!-- wp:columns {\"align\":\"wide\",\"fontSize\":\"small\"} -->\n<div class=\"wp-block-columns alignwide has-small-font-size\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"align\":\"center\"} -->\n<p class=\"has-text-align-center\">Location</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p class=\"has-text-align-center\">2020 Lomita Blvd,&nbsp;<br>Torrance, CA 90101<br>United States</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"align\":\"center\"} -->\n<p class=\"has-text-align-center\">Pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:navigation {\"overlayMenu\":\"never\",\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"center\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"8px\"}},\"fontSize\":\"small\"} /-->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"align\":\"center\"} -->\n<p class=\"has-text-align-center\">Follow us</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"8px\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph -->\n<p><a href=\"#\">Facebook</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"#\">Instagram</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"#\">Twitter</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"flexWrap\":\"wrap\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"small\"} -->\n<p class=\"has-text-align-center has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:29;O:8:\"stdClass\":7:{s:2:\"id\";i:229143;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:33:\"Centered footer with social links\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:4120:\"\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color is-vertical is-content-justification-center is-layout-flex wp-container-171 wp-block-group-is-layout-flex\" style=\"min-height:40vh;margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--60);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--60);padding-left:var(--wp--preset--spacing--50)\"><div style=\"margin-bottom:6px;\" class=\"is-default-size aligncenter wp-block-site-logo\"><span class=\"custom-logo-link\"><img decoding=\"async\" src=\"https://s.w.org/images/wmark.png\" class=\"custom-logo\" alt=\"Site logo\"></span></div>\n\n\n<p class=\"has-text-align-center has-medium-font-size\">Proudly powered by <a href=\"https://wordpress.org\">WordPress</a></p>\n\n\n\n<ul class=\"wp-block-social-links has-normal-icon-size is-style-logos-only is-nowrap is-layout-flex wp-container-170 wp-block-social-links-is-layout-flex\"><li class=\"wp-social-link wp-social-link-facebook  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M12 2C6.5 2 2 6.5 2 12c0 5 3.7 9.1 8.4 9.9v-7H7.9V12h2.5V9.8c0-2.5 1.5-3.9 3.8-3.9 1.1 0 2.2.2 2.2.2v2.5h-1.3c-1.2 0-1.6.8-1.6 1.6V12h2.8l-.4 2.9h-2.3v7C18.3 21.1 22 17 22 12c0-5.5-4.5-10-10-10z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Facebook</span></a></li>\n\n<li class=\"wp-social-link wp-social-link-twitter  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M22.23,5.924c-0.736,0.326-1.527,0.547-2.357,0.646c0.847-0.508,1.498-1.312,1.804-2.27 c-0.793,0.47-1.671,0.812-2.606,0.996C18.324,4.498,17.257,4,16.077,4c-2.266,0-4.103,1.837-4.103,4.103 c0,0.322,0.036,0.635,0.106,0.935C8.67,8.867,5.647,7.234,3.623,4.751C3.27,5.357,3.067,6.062,3.067,6.814 c0,1.424,0.724,2.679,1.825,3.415c-0.673-0.021-1.305-0.206-1.859-0.513c0,0.017,0,0.034,0,0.052c0,1.988,1.414,3.647,3.292,4.023 c-0.344,0.094-0.707,0.144-1.081,0.144c-0.264,0-0.521-0.026-0.772-0.074c0.522,1.63,2.038,2.816,3.833,2.85 c-1.404,1.1-3.174,1.756-5.096,1.756c-0.331,0-0.658-0.019-0.979-0.057c1.816,1.164,3.973,1.843,6.29,1.843 c7.547,0,11.675-6.252,11.675-11.675c0-0.178-0.004-0.355-0.012-0.531C20.985,7.47,21.68,6.747,22.23,5.924z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Twitter</span></a></li>\n\n<li class=\"wp-social-link wp-social-link-wordpress  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M12.158,12.786L9.46,20.625c0.806,0.237,1.657,0.366,2.54,0.366c1.047,0,2.051-0.181,2.986-0.51 c-0.024-0.038-0.046-0.079-0.065-0.124L12.158,12.786z M3.009,12c0,3.559,2.068,6.634,5.067,8.092L3.788,8.341 C3.289,9.459,3.009,10.696,3.009,12z M18.069,11.546c0-1.112-0.399-1.881-0.741-2.48c-0.456-0.741-0.883-1.368-0.883-2.109 c0-0.826,0.627-1.596,1.51-1.596c0.04,0,0.078,0.005,0.116,0.007C16.472,3.904,14.34,3.009,12,3.009 c-3.141,0-5.904,1.612-7.512,4.052c0.211,0.007,0.41,0.011,0.579,0.011c0.94,0,2.396-0.114,2.396-0.114 C7.947,6.93,8.004,7.642,7.52,7.699c0,0-0.487,0.057-1.029,0.085l3.274,9.739l1.968-5.901l-1.401-3.838 C9.848,7.756,9.389,7.699,9.389,7.699C8.904,7.67,8.961,6.93,9.446,6.958c0,0,1.484,0.114,2.368,0.114 c0.94,0,2.397-0.114,2.397-0.114c0.485-0.028,0.542,0.684,0.057,0.741c0,0-0.488,0.057-1.029,0.085l3.249,9.665l0.897-2.996 C17.841,13.284,18.069,12.316,18.069,11.546z M19.889,7.686c0.039,0.286,0.06,0.593,0.06,0.924c0,0.912-0.171,1.938-0.684,3.22 l-2.746,7.94c2.673-1.558,4.47-4.454,4.47-7.771C20.991,10.436,20.591,8.967,19.889,7.686z M12,22C6.486,22,2,17.514,2,12 C2,6.486,6.486,2,12,2c5.514,0,10,4.486,10,10C22,17.514,17.514,22,12,22z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">WordPress</span></a></li></ul>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:71:\"Footer with centered site title, tagline, social links and credit line.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.2\";s:25:\"wpop_contains_block_types\";s:75:\"core/group,core/paragraph,core/site-logo,core/social-link,core/social-links\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1532:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"right\":\"var:preset|spacing|50\",\"bottom\":\"var:preset|spacing|60\",\"left\":\"var:preset|spacing|50\",\"top\":\"var:preset|spacing|60\"},\"blockGap\":\"var:preset|spacing|40\",\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}},\"dimensions\":{\"minHeight\":\"40vh\"}},\"textColor\":\"contrast\",\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"center\",\"verticalAlignment\":\"center\"}} -->\n<div class=\"wp-block-group alignfull has-contrast-color has-text-color\" style=\"min-height:40vh;margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--60);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--60);padding-left:var(--wp--preset--spacing--50)\"><!-- wp:site-logo {\"align\":\"center\",\"style\":{\"spacing\":{\"margin\":{\"bottom\":\"6px\"}}}} /-->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Proudly powered by <a href=\"https://wordpress.org\">WordPress</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"size\":\"has-normal-icon-size\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"12px\",\"left\":\"12px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<ul class=\"wp-block-social-links has-normal-icon-size is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"facebook\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"wordpress\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group -->\";}i:30;O:8:\"stdClass\":7:{s:2:\"id\";i:229147;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:52:\"Fullwidth footer with navigation, credit, and social\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:4597:\"\n<div class=\"wp-block-group alignfull has-background-color is-layout-flow wp-block-group-is-layout-flow\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group alignfull has-small-font-size is-content-justification-space-between is-nowrap is-layout-flex wp-container-177 wp-block-group-is-layout-flex\"><h1 class=\"wp-block-site-title has-small-font-size wp-container-content-172\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n\n<div class=\"wp-block-group wp-container-content-173 is-vertical is-content-justification-center is-layout-flex wp-container-174 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-center has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n</div>\n\n\n\n<ul class=\"wp-block-social-links has-small-icon-size is-style-logos-only wp-container-content-175 is-content-justification-right is-nowrap is-layout-flex wp-container-176 wp-block-social-links-is-layout-flex\"><li class=\"wp-social-link wp-social-link-twitter  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M22.23,5.924c-0.736,0.326-1.527,0.547-2.357,0.646c0.847-0.508,1.498-1.312,1.804-2.27 c-0.793,0.47-1.671,0.812-2.606,0.996C18.324,4.498,17.257,4,16.077,4c-2.266,0-4.103,1.837-4.103,4.103 c0,0.322,0.036,0.635,0.106,0.935C8.67,8.867,5.647,7.234,3.623,4.751C3.27,5.357,3.067,6.062,3.067,6.814 c0,1.424,0.724,2.679,1.825,3.415c-0.673-0.021-1.305-0.206-1.859-0.513c0,0.017,0,0.034,0,0.052c0,1.988,1.414,3.647,3.292,4.023 c-0.344,0.094-0.707,0.144-1.081,0.144c-0.264,0-0.521-0.026-0.772-0.074c0.522,1.63,2.038,2.816,3.833,2.85 c-1.404,1.1-3.174,1.756-5.096,1.756c-0.331,0-0.658-0.019-0.979-0.057c1.816,1.164,3.973,1.843,6.29,1.843 c7.547,0,11.675-6.252,11.675-11.675c0-0.178-0.004-0.355-0.012-0.531C20.985,7.47,21.68,6.747,22.23,5.924z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Twitter</span></a></li>\n\n<li class=\"wp-social-link wp-social-link-instagram  wp-block-social-link\"><a href=\"https://#\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M12,4.622c2.403,0,2.688,0.009,3.637,0.052c0.877,0.04,1.354,0.187,1.671,0.31c0.42,0.163,0.72,0.358,1.035,0.673 c0.315,0.315,0.51,0.615,0.673,1.035c0.123,0.317,0.27,0.794,0.31,1.671c0.043,0.949,0.052,1.234,0.052,3.637 s-0.009,2.688-0.052,3.637c-0.04,0.877-0.187,1.354-0.31,1.671c-0.163,0.42-0.358,0.72-0.673,1.035 c-0.315,0.315-0.615,0.51-1.035,0.673c-0.317,0.123-0.794,0.27-1.671,0.31c-0.949,0.043-1.233,0.052-3.637,0.052 s-2.688-0.009-3.637-0.052c-0.877-0.04-1.354-0.187-1.671-0.31c-0.42-0.163-0.72-0.358-1.035-0.673 c-0.315-0.315-0.51-0.615-0.673-1.035c-0.123-0.317-0.27-0.794-0.31-1.671C4.631,14.688,4.622,14.403,4.622,12 s0.009-2.688,0.052-3.637c0.04-0.877,0.187-1.354,0.31-1.671c0.163-0.42,0.358-0.72,0.673-1.035 c0.315-0.315,0.615-0.51,1.035-0.673c0.317-0.123,0.794-0.27,1.671-0.31C9.312,4.631,9.597,4.622,12,4.622 M12,3 C9.556,3,9.249,3.01,8.289,3.054C7.331,3.098,6.677,3.25,6.105,3.472C5.513,3.702,5.011,4.01,4.511,4.511 c-0.5,0.5-0.808,1.002-1.038,1.594C3.25,6.677,3.098,7.331,3.054,8.289C3.01,9.249,3,9.556,3,12c0,2.444,0.01,2.751,0.054,3.711 c0.044,0.958,0.196,1.612,0.418,2.185c0.23,0.592,0.538,1.094,1.038,1.594c0.5,0.5,1.002,0.808,1.594,1.038 c0.572,0.222,1.227,0.375,2.185,0.418C9.249,20.99,9.556,21,12,21s2.751-0.01,3.711-0.054c0.958-0.044,1.612-0.196,2.185-0.418 c0.592-0.23,1.094-0.538,1.594-1.038c0.5-0.5,0.808-1.002,1.038-1.594c0.222-0.572,0.375-1.227,0.418-2.185 C20.99,14.751,21,14.444,21,12s-0.01-2.751-0.054-3.711c-0.044-0.958-0.196-1.612-0.418-2.185c-0.23-0.592-0.538-1.094-1.038-1.594 c-0.5-0.5-1.002-0.808-1.594-1.038c-0.572-0.222-1.227-0.375-2.185-0.418C14.751,3.01,14.444,3,12,3L12,3z M12,7.378 c-2.552,0-4.622,2.069-4.622,4.622S9.448,16.622,12,16.622s4.622-2.069,4.622-4.622S14.552,7.378,12,7.378z M12,15 c-1.657,0-3-1.343-3-3s1.343-3,3-3s3,1.343,3,3S13.657,15,12,15z M16.804,6.116c-0.596,0-1.08,0.484-1.08,1.08 s0.484,1.08,1.08,1.08c0.596,0,1.08-0.484,1.08-1.08S17.401,6.116,16.804,6.116z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Instagram</span></a></li></ul>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:87:\"Footer with site title on the left, credit in the middle and social links on the right.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:76:\"core/group,core/paragraph,core/site-title,core/social-link,core/social-links\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1869:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|50\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|50\",\"left\":\"var:preset|spacing|30\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"className\":\"has-background-color\",\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group alignfull has-background-color\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"blockGap\":\"0\"}},\"layout\":{\"type\":\"flex\",\"justifyContent\":\"space-between\",\"flexWrap\":\"nowrap\"},\"fontSize\":\"small\"} -->\n<div class=\"wp-block-group alignfull has-small-font-size\"><!-- wp:site-title {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"25%\"}},\"fontSize\":\"small\"} /-->\n\n<!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"small\"} -->\n<p class=\"has-text-align-center has-small-font-size\"> Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:social-links {\"size\":\"has-small-icon-size\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"0\",\"left\":\"12px\"}},\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"25%\"}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"right\"}} -->\n<ul class=\"wp-block-social-links has-small-icon-size is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"instagram\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:31;O:8:\"stdClass\":7:{s:2:\"id\";i:229151;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:19:\"Left-aligned footer\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2835:\"\n<div class=\"wp-block-group alignfull is-content-justification-space-between is-layout-flex wp-container-187 wp-block-group-is-layout-flex\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--30)\">\n<div class=\"wp-block-group wp-container-content-179 is-vertical is-layout-flex wp-container-180 wp-block-group-is-layout-flex\"><h1 class=\"wp-block-site-title has-medium-font-size\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n\n<p class=\"has-text-align-left\">2020 Lomita Blvd,&nbsp;<br>Torrance, CA 90101<br>United States</p>\n\n\n\n<p class=\"has-text-align-left has-small-font-size\">Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n\n\n\n<div class=\"wp-block-group is-content-justification-right is-layout-flex wp-container-186 wp-block-group-is-layout-flex\">\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-183 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-left\">Pages</p>\n\n\n<nav class=\"has-small-font-size items-justified-left is-vertical no-wrap is-fallback wp-block-navigation has-small-font-size is-content-justification-left is-nowrap is-layout-flex wp-container-182 wp-block-navigation-is-layout-flex\" aria-label=\"\"><ul class=\"wp-block-navigation__container has-small-font-size items-justified-left is-vertical no-wrap is-fallback wp-block-navigation has-small-font-size\"><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Home</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">About</span></a></li><li class=\"has-small-font-size wp-block-navigation-item wp-block-navigation-link\"><a class=\"wp-block-navigation-item__content\"  href=\"#\"><span class=\"wp-block-navigation-item__label\">Contact</span></a></li></ul></nav>\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-185 wp-block-group-is-layout-flex\">\n<p class=\"has-text-align-left\">Social</p>\n\n\n\n<div class=\"wp-block-group is-vertical is-content-justification-left is-layout-flex wp-container-184 wp-block-group-is-layout-flex\">\n<p><a href=\"#\">Facebook</a></p>\n\n\n\n<p><a href=\"#\">Instagram</a></p>\n\n\n\n<p><a href=\"#\">Twitter</a></p>\n</div>\n\n\n\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:44:\"Left-aligned footer with just a credit line.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:1:{i:0;s:25:\"core/template-part/footer\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:69:\"core/group,core/navigation,core/paragraph,core/site-title,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"footer\";i:1;s:9:\"wireframe\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:2939:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"bottom\":\"0\"},\"padding\":{\"top\":\"var:preset|spacing|50\",\"right\":\"var:preset|spacing|30\",\"bottom\":\"var:preset|spacing|50\",\"left\":\"var:preset|spacing|30\"}}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"justifyContent\":\"space-between\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0;margin-bottom:0;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--30)\"><!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fill\",\"flexSize\":null}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-title {\"fontSize\":\"medium\"} /-->\n\n<!-- wp:paragraph {\"align\":\"left\"} -->\n<p class=\"has-text-align-left\">2020 Lomita Blvd,&nbsp;<br>Torrance, CA 90101<br>United States</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"left\",\"fontSize\":\"small\"} -->\n<p class=\"has-text-align-left has-small-font-size\">Proudly powered by <a rel=\"nofollow\" href=\"https://wordpress.org\">WordPress</a> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"var:preset|spacing|50\"}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"wrap\",\"justifyContent\":\"right\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\"} -->\n<p class=\"has-text-align-left\">Pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:navigation {\"overlayMenu\":\"never\",\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"left\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"8px\"}},\"fontSize\":\"small\"} /-->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"align\":\"left\"} -->\n<p class=\"has-text-align-left\">Social</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"8px\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"justifyContent\":\"left\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph -->\n<p><a href=\"#\">Facebook</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"#\">Instagram</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"#\">Twitter</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"24px\"} -->\n<div style=\"height:24px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:32;O:8:\"stdClass\":7:{s:2:\"id\";i:201;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:32:\"Three columns with offset images\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1330:\"\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-191 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:25%\">\n<figure class=\"wp-block-image size-large is-style-default\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/architecture-01.jpg\" alt=\"Close-up, abstract view of geometric architecture.\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:25%\">\n<div style=\"height:500px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div style=\"height:150px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/architecture-02.jpg\" alt=\"Close-up, angled view of a window on a white building.\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:45%\">\n<figure class=\"wp-block-image size-large is-style-default\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/architecture-03.jpg\" alt=\"Close-up of the corner of a white, geometric building with both sharp points and round corners.\" /></figure>\n\n\n\n<div style=\"height:285px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:33:\"Three columns with offset images.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:47:\"core/column,core/columns,core/image,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:7:\"gallery\";i:1;s:6:\"images\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1753:\"<!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"25%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:25%\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-large is-style-default\"><img src=\"https://s.w.org/images/core/5.8/architecture-01.jpg\" alt=\"Close-up, abstract view of geometric architecture.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"25%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:25%\"><!-- wp:spacer {\"height\":500} -->\n<div style=\"height:500px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:spacer {\"height\":150} -->\n<div style=\"height:150px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/architecture-02.jpg\" alt=\"Close-up, angled view of a window on a white building.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"45%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:45%\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-large is-style-default\"><img src=\"https://s.w.org/images/core/5.8/architecture-03.jpg\" alt=\"Close-up of the corner of a white, geometric building with both sharp points and round corners.\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:spacer {\"height\":285} -->\n<div style=\"height:285px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\";}i:33;O:8:\"stdClass\":7:{s:2:\"id\";i:199;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:34:\"Three columns with images and text\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3496:\"\n<div class=\"wp-block-group alignfull has-background is-layout-flow wp-block-group-is-layout-flow\" style=\"background-color:#f5eac1;padding-top:6vw;padding-right:6vw;padding-bottom:6vw;padding-left:6vw\">\n<div class=\"wp-block-group is-vertical is-nowrap is-layout-flex wp-container-192 wp-block-group-is-layout-flex\" style=\"padding-right:0;padding-left:0\">\n<h6 class=\"wp-block-heading has-text-color\" id=\"ecosystem\" style=\"color:#000000;font-size:16px\">ECOSYSTEM</h6>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:6vw;font-style:normal;font-weight:700;letter-spacing:0px;line-height:0.9;text-decoration:none;text-transform:none\">Positive growth.</p>\n</div>\n\n\n\n<div style=\"height:1vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-group alignwide is-vertical is-nowrap is-layout-flex wp-container-200 wp-block-group-is-layout-flex\" style=\"padding-top:0;padding-right:0;padding-bottom:0;padding-left:0\">\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-196 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33.38%\">\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\"><em>Nature</em>, in the common sense, refers to essences unchanged by man; space, the air, the river, the leaf.&nbsp;<em>Art</em>&nbsp;is applied to the mixture of his will with the same things, as in a house, a canal, a statue, a picture. </p>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">But his operations taken together are so insignificant, a little chipping, baking, patching, and washing, that in an impression so grand as that of the world on the human mind, they do not vary the result.</p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33%\">\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/outside-01.jpg\" alt=\"The sun setting through a dense forest.\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33.62%\">\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/outside-02.jpg\" alt=\"Wind turbines standing on a grassy plain, against a blue sky.\" /></figure>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-199 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:69%\">\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/outside-03.jpg\" alt=\"The sun shining over a ridge leading down into the shore. In the distance, a car drives down a road.\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-vertically-aligned-center is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33%\">\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">Undoubtedly we have no questions to ask which are unanswerable. We must trust the perfection of the creation so far, as to believe that whatever curiosity the order of things has awakened in our minds, the order of things can satisfy. Every man&#8217;s condition is a solution in hieroglyphic to those inquiries he would put.</p>\n</div>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:77:\"Three columns with images and text, with vertical spacing for an offset look.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:86:\"core/column,core/columns,core/group,core/heading,core/image,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:5:{i:0;s:7:\"columns\";i:1;s:8:\"featured\";i:2;s:7:\"gallery\";i:3;s:6:\"images\";i:4;s:4:\"text\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:5124:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"color\":{\"background\":\"#f5eac1\"},\"spacing\":{\"padding\":{\"top\":\"6vw\",\"bottom\":\"6vw\",\"left\":\"6vw\",\"right\":\"6vw\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group alignfull has-background\" style=\"background-color:#f5eac1;padding-top:6vw;padding-right:6vw;padding-bottom:6vw;padding-left:6vw\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"16px\",\"padding\":{\"right\":\"0\",\"left\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\" style=\"padding-right:0;padding-left:0\"><!-- wp:heading {\"level\":6,\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"16px\"}},\"anchor\":\"ecosystem\"} -->\n<h6 class=\"wp-block-heading has-text-color\" id=\"ecosystem\" style=\"color:#000000;font-size:16px\">ECOSYSTEM</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"0.9\",\"fontSize\":\"6vw\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textTransform\":\"none\",\"textDecoration\":\"none\",\"letterSpacing\":\"0px\"},\"color\":{\"text\":\"#000000\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:6vw;font-style:normal;font-weight:700;letter-spacing:0px;line-height:0.9;text-decoration:none;text-transform:none\">Positive growth.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"1vw\"} -->\n<div style=\"height:1vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":\"3vw\",\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group alignwide\" style=\"padding-top:0;padding-right:0;padding-bottom:0;padding-left:0\"><!-- wp:columns {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"3vw\",\"left\":\"3vw\"}}}} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"33.38%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33.38%\"><!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"17px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\"><em>Nature</em>, in the common sense, refers to essences unchanged by man; space, the air, the river, the leaf.&nbsp;<em>Art</em>&nbsp;is applied to the mixture of his will with the same things, as in a house, a canal, a statue, a picture. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"17px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">But his operations taken together are so insignificant, a little chipping, baking, patching, and washing, that in an impression so grand as that of the world on the human mind, they do not vary the result.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"33%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33%\"><!-- wp:spacer {\"height\":\"2vw\"} -->\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/outside-01.jpg\" alt=\"The sun setting through a dense forest.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"33.62%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33.62%\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/outside-02.jpg\" alt=\"Wind turbines standing on a grassy plain, against a blue sky.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:columns {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":{\"left\":\"3vw\"}}}} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"69%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:69%\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/outside-03.jpg\" alt=\"The sun shining over a ridge leading down into the shore. In the distance, a car drives down a road.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"verticalAlignment\":\"center\",\"width\":\"33%\"} -->\n<div class=\"wp-block-column is-vertically-aligned-center\" style=\"flex-basis:33%\"><!-- wp:spacer {\"height\":\"2vw\"} -->\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"17px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">Undoubtedly we have no questions to ask which are unanswerable. We must trust the perfection of the creation so far, as to believe that whatever curiosity the order of things has awakened in our minds, the order of things can satisfy. Every man\'s condition is a solution in hieroglyphic to those inquiries he would put.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:34;O:8:\"stdClass\":7:{s:2:\"id\";i:197;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:39:\"Two columns of text with offset heading\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2240:\"\n<div class=\"wp-block-group alignfull has-background is-layout-flow wp-block-group-is-layout-flow\" style=\"background-color:#f2f0e9\">\n<div style=\"height:70px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-columns alignwide are-vertically-aligned-center is-layout-flex wp-container-204 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:50%\">\n<p class=\"has-text-color\" style=\"color:#000000;font-size:30px;line-height:1.1\"><strong>Oceanic Inspiration</strong></p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:50%\">\n<hr class=\"wp-block-separator has-text-color has-background is-style-wide\" style=\"background-color:#000000;color:#000000\" />\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-208 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\"></div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p class=\"has-text-color has-extra-small-font-size\" style=\"color:#000000\">Winding veils round their heads, the women walked on deck. They were now moving steadily down the river, passing the dark shapes of ships at anchor, and London was a swarm of lights with a pale yellow canopy drooping above it. There were the lights of the great theatres, the lights of the long streets, lights that indicated huge squares of domestic comfort, lights that hung high in air.</p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p class=\"has-text-color has-extra-small-font-size\" style=\"color:#000000\">No darkness would ever settle upon those lamps, as no darkness had settled upon them for hundreds of years. It seemed dreadful that the town should blaze for ever in the same spot; dreadful at least to people going away to adventure upon the sea, and beholding it as a circumscribed mound, eternally burnt, eternally scarred. From the deck of the ship the great city appeared a crouched and cowardly figure, a sedentary miser.</p>\n</div>\n</div>\n\n\n\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:43:\"Two columns of text with an offset heading.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:77:\"core/column,core/columns,core/group,core/paragraph,core/separator,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:7:\"columns\";i:1;s:4:\"text\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:2837:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"color\":{\"background\":\"#f2f0e9\"}}} -->\n<div class=\"wp-block-group alignfull has-background\" style=\"background-color:#f2f0e9\"><!-- wp:spacer {\"height\":70} -->\n<div style=\"height:70px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:columns {\"verticalAlignment\":\"center\",\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide are-vertically-aligned-center\"><!-- wp:column {\"width\":\"50%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:50%\"><!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.1\",\"fontSize\":\"30px\"},\"color\":{\"text\":\"#000000\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:30px;line-height:1.1\"><strong>Oceanic Inspiration</strong></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"50%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:50%\"><!-- wp:separator {\"customColor\":\"#000000\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-text-color has-background is-style-wide\" style=\"background-color:#000000;color:#000000\" />\n<!-- /wp:separator --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"}},\"fontSize\":\"extra-small\"} -->\n<p class=\"has-text-color has-extra-small-font-size\" style=\"color:#000000\">Winding veils round their heads, the women walked on deck. They were now moving steadily down the river, passing the dark shapes of ships at anchor, and London was a swarm of lights with a pale yellow canopy drooping above it. There were the lights of the great theatres, the lights of the long streets, lights that indicated huge squares of domestic comfort, lights that hung high in air.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"}},\"fontSize\":\"extra-small\"} -->\n<p class=\"has-text-color has-extra-small-font-size\" style=\"color:#000000\">No darkness would ever settle upon those lamps, as no darkness had settled upon them for hundreds of years. It seemed dreadful that the town should blaze for ever in the same spot; dreadful at least to people going away to adventure upon the sea, and beholding it as a circumscribed mound, eternally burnt, eternally scarred. From the deck of the ship the great city appeared a crouched and cowardly figure, a sedentary miser.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:spacer {\"height\":40} -->\n<div style=\"height:40px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:group -->\";}i:35;O:8:\"stdClass\":7:{s:2:\"id\";i:196;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:41:\"Media and text in a full height container\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1445:\"\n<div class=\"wp-block-cover alignfull is-light\" style=\"min-height:100vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#ffffff\"></span><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile is-vertically-aligned-center is-image-fill\" style=\"grid-template-columns:56% auto\"><figure class=\"wp-block-media-text__media\" style=\"background-image:url(https://s.w.org/images/core/5.8/soil.jpg);background-position:50% 50%\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/soil.jpg\" alt=\"Close-up of dried, cracked earth.\" /></figure><div class=\"wp-block-media-text__content\">\n<h2 class=\"wp-block-heading has-text-color\" style=\"color:#000000;font-size:32px\"><strong>What&#8217;s the problem?</strong></h2>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">Trees are more important today than ever before. More than 10,000 products are reportedly made from trees. Through chemistry, the humble woodpile is yielding chemicals, plastics and fabrics that were beyond comprehension when an axe first felled a Texas tree.</p>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button is-style-fill\"><a class=\"wp-block-button__link wp-element-button\">Learn more</a></div>\n</div>\n</div></div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:77:\"Media and text block with image to the left and text and button to the right.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:79:\"core/button,core/buttons,core/cover,core/heading,core/media-text,core/paragraph\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:2015:\"<!-- wp:cover {\"customOverlayColor\":\"#ffffff\",\"minHeight\":100,\"minHeightUnit\":\"vh\",\"contentPosition\":\"center center\",\"isDark\":false,\"align\":\"full\"} -->\n<div class=\"wp-block-cover alignfull is-light\" style=\"min-height:100vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-100 has-background-dim\" style=\"background-color:#ffffff\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:media-text {\"mediaLink\":\"https://s.w.org/images/core/5.8/soil.jpg\",\"mediaType\":\"image\",\"mediaWidth\":56,\"verticalAlignment\":\"center\",\"imageFill\":true} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile is-vertically-aligned-center is-image-fill\" style=\"grid-template-columns:56% auto\"><figure class=\"wp-block-media-text__media\" style=\"background-image:url(https://s.w.org/images/core/5.8/soil.jpg);background-position:50% 50%\"><img src=\"https://s.w.org/images/core/5.8/soil.jpg\" alt=\"Close-up of dried, cracked earth.\" /></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading {\"style\":{\"typography\":{\"fontSize\":\"32px\"},\"color\":{\"text\":\"#000000\"}}} -->\n<h2 class=\"wp-block-heading has-text-color\" style=\"color:#000000;font-size:32px\"><strong>What\'s the problem?</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"17px\"},\"color\":{\"text\":\"#000000\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">Trees are more important today than ever before. More than 10,000 products are reportedly made from trees. Through chemistry, the humble woodpile is yielding chemicals, plastics and fabrics that were beyond comprehension when an axe first felled a Texas tree.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"className\":\"is-style-fill\"} -->\n<div class=\"wp-block-button is-style-fill\"><a class=\"wp-block-button__link wp-element-button\">Learn more</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div></div>\n<!-- /wp:media-text --></div></div>\n<!-- /wp:cover -->\";}i:36;O:8:\"stdClass\":7:{s:2:\"id\";i:195;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:38:\"Media and text with image on the right\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:719:\"\n<div class=\"wp-block-media-text alignfull has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center is-style-default\" style=\"grid-template-columns:auto 56%\"><div class=\"wp-block-media-text__content\">\n<h2 class=\"wp-block-heading has-text-color\" style=\"color:#000000\"><strong>Shore with Blue Sea</strong></h2>\n\n\n\n<p class=\"has-text-color\" style=\"color:#636363;font-size:17px;line-height:1.1\">Eleanor Harris&nbsp;(American, 1901-1942)</p>\n</div><figure class=\"wp-block-media-text__media\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/art-02.jpg\" alt=\"A green and brown rural landscape leading into a bright blue ocean and slightly cloudy sky, done in oil paints.\" /></figure></div>\n\n\n\n<p></p>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:66:\"Media and text block with image to the right and text to the left.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:43:\"core/heading,core/media-text,core/paragraph\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1155:\"<!-- wp:media-text {\"align\":\"full\",\"mediaPosition\":\"right\",\"mediaLink\":\"#\",\"mediaType\":\"image\",\"mediaWidth\":56,\"verticalAlignment\":\"center\",\"className\":\"is-style-default\"} -->\n<div class=\"wp-block-media-text alignfull has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center is-style-default\" style=\"grid-template-columns:auto 56%\"><div class=\"wp-block-media-text__content\"><!-- wp:heading {\"style\":{\"color\":{\"text\":\"#000000\"}}} -->\n<h2 class=\"wp-block-heading has-text-color\" style=\"color:#000000\"><strong>Shore with Blue Sea</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.1\",\"fontSize\":\"17px\"},\"color\":{\"text\":\"#636363\"}}} -->\n<p class=\"has-text-color\" style=\"color:#636363;font-size:17px;line-height:1.1\">Eleanor Harris&nbsp;(American, 1901-1942)</p>\n<!-- /wp:paragraph --></div><figure class=\"wp-block-media-text__media\"><img src=\"https://s.w.org/images/core/5.8/art-02.jpg\" alt=\"A green and brown rural landscape leading into a bright blue ocean and slightly cloudy sky, done in oil paints.\" /></figure></div>\n<!-- /wp:media-text -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\";}i:37;O:8:\"stdClass\":7:{s:2:\"id\";i:192;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:37:\"Media and text with image on the left\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:554:\"\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile is-vertically-aligned-center\"><figure class=\"wp-block-media-text__media\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/architecture-04.jpg\" alt=\"Close-up, abstract view of architecture.\" /></figure><div class=\"wp-block-media-text__content\">\n<h3 class=\"wp-block-heading has-text-align-center has-text-color\" style=\"color:#000000\"><strong>Open Spaces</strong></h3>\n\n\n\n<p class=\"has-text-align-center has-extra-small-font-size\"><a href=\"#\">See case study ↗</a></p>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:66:\"Media and text block with image to the left and text to the right.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:43:\"core/heading,core/media-text,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:844:\"<!-- wp:media-text {\"align\":\"full\",\"mediaType\":\"image\",\"verticalAlignment\":\"center\"} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile is-vertically-aligned-center\"><figure class=\"wp-block-media-text__media\"><img src=\"https://s.w.org/images/core/5.8/architecture-04.jpg\" alt=\"Close-up, abstract view of architecture.\" /></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":3,\"style\":{\"color\":{\"text\":\"#000000\"}}} -->\n<h3 class=\"wp-block-heading has-text-align-center has-text-color\" style=\"color:#000000\"><strong>Open Spaces</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"extra-small\"} -->\n<p class=\"has-text-align-center has-extra-small-font-size\"><a href=\"#\">See case study ↗</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\";}i:38;O:8:\"stdClass\":7:{s:2:\"id\";i:186;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:35:\"Large header with text and a button\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1508:\"\n<div class=\"wp-block-cover alignfull has-parallax\" style=\"min-height:100vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-40 has-background-dim\" style=\"background-color:#000000\"></span><div role=\"img\" class=\"wp-block-cover__image-background has-parallax\" style=\"background-position:50% 50%;background-image:url(https://s.w.org/images/core/5.8/art-01.jpg)\"></div><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<h2 class=\"wp-block-heading alignwide has-white-color has-text-color\" style=\"font-size:48px;line-height:1.2\"><strong><em>Overseas:</em></strong><br><strong><em>1500 — 1960</em></strong></h2>\n\n\n\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-215 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:60%\">\n<p class=\"has-text-color\" style=\"color:#ffffff\">An exhibition about the different representations of the ocean throughout time, between the sixteenth and the twentieth century. Taking place in our Open Room in <em>Floor 2</em>.</p>\n\n\n\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-text-color has-background wp-element-button\" style=\"color:#ffffff;background-color:#000000\">Visit</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\"></div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:62:\"Large header with background image and text and button on top.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:88:\"core/button,core/buttons,core/column,core/columns,core/cover,core/heading,core/paragraph\";}s:14:\"category_slugs\";a:1:{i:0;s:6:\"banner\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:2053:\"<!-- wp:cover {\"url\":\"https://s.w.org/images/core/5.8/art-01.jpg\",\"hasParallax\":true,\"dimRatio\":40,\"customOverlayColor\":\"#000000\",\"minHeight\":100,\"minHeightUnit\":\"vh\",\"contentPosition\":\"center center\",\"align\":\"full\"} -->\n<div class=\"wp-block-cover alignfull has-parallax\" style=\"min-height:100vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-40 has-background-dim\" style=\"background-color:#000000\"></span><div role=\"img\" class=\"wp-block-cover__image-background has-parallax\" style=\"background-position:50% 50%;background-image:url(https://s.w.org/images/core/5.8/art-01.jpg)\"></div><div class=\"wp-block-cover__inner-container\"><!-- wp:heading {\"style\":{\"typography\":{\"fontSize\":\"48px\",\"lineHeight\":\"1.2\"}},\"className\":\"alignwide has-white-color has-text-color\"} -->\n<h2 class=\"wp-block-heading alignwide has-white-color has-text-color\" style=\"font-size:48px;line-height:1.2\"><strong><em>Overseas:</em></strong><br><strong><em>1500 — 1960</em></strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"60%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:60%\"><!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#ffffff\"}}} -->\n<p class=\"has-text-color\" style=\"color:#ffffff\">An exhibition about the different representations of the ocean throughout time, between the sixteenth and the twentieth century. Taking place in our Open Room in <em>Floor 2</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"style\":{\"color\":{\"text\":\"#ffffff\",\"background\":\"#000000\"}},\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-text-color has-background wp-element-button\" style=\"color:#ffffff;background-color:#000000\">Visit</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div></div>\n<!-- /wp:cover -->\";}i:39;O:8:\"stdClass\":7:{s:2:\"id\";i:185;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:35:\"Large header with left-aligned text\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1321:\"\n<div class=\"wp-block-cover alignfull\" style=\"min-height:800px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-60 has-background-dim\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background\" alt=\"\" src=\"https://s.w.org/images/core/5.8/forest.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<h2 class=\"wp-block-heading alignwide has-text-color\" style=\"color:#ffe074;font-size:64px\">Forest.</h2>\n\n\n\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-219 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:55%\">\n<div style=\"height:330px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-color\" style=\"color:#ffe074;font-size:12px;line-height:1.3\"><em>Even a child knows how valuable the forest is. The fresh, breathtaking smell of trees. Echoing birds flying above that dense magnitude. A stable climate, a sustainable diverse life and a source of culture. Yet, forests and other ecosystems hang in the balance, threatened to become croplands, pasture, and plantations.</em></p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\"></div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:29:\"Cover image with quote on top\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:75:\"core/column,core/columns,core/cover,core/heading,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1698:\"<!-- wp:cover {\"url\":\"https://s.w.org/images/core/5.8/forest.jpg\",\"dimRatio\":60,\"minHeight\":800,\"align\":\"full\"} -->\n<div class=\"wp-block-cover alignfull\" style=\"min-height:800px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-60 has-background-dim\"></span><img class=\"wp-block-cover__image-background\" alt=\"\" src=\"https://s.w.org/images/core/5.8/forest.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:heading {\"align\":\"wide\",\"style\":{\"color\":{\"text\":\"#ffe074\"},\"typography\":{\"fontSize\":\"64px\"}}} -->\n<h2 class=\"wp-block-heading alignwide has-text-color\" style=\"color:#ffe074;font-size:64px\">Forest.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"55%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:55%\"><!-- wp:spacer {\"height\":\"330px\"} -->\n<div style=\"height:330px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#ffe074\"},\"typography\":{\"lineHeight\":\"1.3\",\"fontSize\":\"12px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#ffe074;font-size:12px;line-height:1.3\"><em>Even a child knows how valuable the forest is. The fresh, breathtaking smell of trees. Echoing birds flying above that dense magnitude. A stable climate, a sustainable diverse life and a source of culture. Yet, forests and other ecosystems hang in the balance, threatened to become croplands, pasture, and plantations.</em></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div></div>\n<!-- /wp:cover -->\";}i:40;O:8:\"stdClass\":7:{s:2:\"id\";i:184;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:7:\"Heading\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:526:\"\n<h2 class=\"alignwide wp-block-heading\" id=\"we-re-a-studio-in-berlin-with-an-international-practice-in-architecture-urban-planning-and-interior-design-we-believe-in-sharing-knowledge-and-promoting-dialogue-to-increase-the-creative-potential-of-collaboration\" style=\"font-size:48px;line-height:1.1\">We&#8217;re a studio in Berlin with an international practice in architecture, urban planning and interior design. We believe in sharing knowledge and promoting dialogue to increase the creative potential of collaboration.</h2>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:17:\"large text, title\";s:16:\"wpop_description\";s:12:\"Heading text\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:1:{i:0;s:12:\"core/heading\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:12:\"core/heading\";}s:14:\"category_slugs\";a:2:{i:0;s:8:\"featured\";i:1;s:4:\"text\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:621:\"<!-- wp:heading {\"align\":\"wide\",\"style\":{\"typography\":{\"fontSize\":\"48px\",\"lineHeight\":\"1.1\"}}} -->\n<h2 class=\"alignwide\" id=\"we-re-a-studio-in-berlin-with-an-international-practice-in-architecture-urban-planning-and-interior-design-we-believe-in-sharing-knowledge-and-promoting-dialogue-to-increase-the-creative-potential-of-collaboration\" style=\"font-size:48px;line-height:1.1\">We\'re a studio in Berlin with an international practice in architecture, urban planning and interior design. We believe in sharing knowledge and promoting dialogue to increase the creative potential of collaboration.</h2>\n<!-- /wp:heading -->\";}i:41;O:8:\"stdClass\":7:{s:2:\"id\";i:29;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:29:\"Two columns of text and title\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1518:\"\n<h2 class=\"wp-block-heading\" style=\"font-size:38px;line-height:1.4\"><strong>The voyage had begun, and had begun happily with a soft blue sky, and a calm sea.</strong></h2>\n\n\n\n<div class=\"wp-block-columns is-layout-flex wp-container-223 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p style=\"font-size:18px\">They followed her on to the deck. All the smoke and the houses had disappeared, and the ship was out in a wide space of sea very fresh and clear though pale in the early light. They had left London sitting on its mud. A very thin line of shadow tapered on the horizon, scarcely thick enough to stand the burden of Paris, which nevertheless rested upon it. They were free of roads, free of mankind, and the same exhilaration at their freedom ran through them all.</p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p style=\"font-size:18px\">The ship was making her way steadily through small waves which slapped her and then fizzled like effervescing water, leaving a little border of bubbles and foam on either side. The colourless October sky above was thinly clouded as if by the trail of wood-fire smoke, and the air was wonderfully salt and brisk. Indeed it was too cold to stand still. Mrs. Ambrose drew her arm within her husband&#8217;s, and as they moved off it could be seen from the way in which her sloping cheek turned up to his that she had something private to communicate.</p>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:47:\"Two columns of text preceded by a long heading.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:52:\"core/column,core/columns,core/heading,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:7:\"columns\";i:1;s:4:\"text\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1711:\"<!-- wp:heading {\"style\":{\"typography\":{\"fontSize\":38,\"lineHeight\":\"1.4\"}}} -->\n<h2 style=\"font-size:38px;line-height:1.4\"><strong>The voyage had begun, and had begun happily with a soft blue sky, and a calm sea.</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":18}}} -->\n<p style=\"font-size:18px\">They followed her on to the deck. All the smoke and the houses had disappeared, and the ship was out in a wide space of sea very fresh and clear though pale in the early light. They had left London sitting on its mud. A very thin line of shadow tapered on the horizon, scarcely thick enough to stand the burden of Paris, which nevertheless rested upon it. They were free of roads, free of mankind, and the same exhilaration at their freedom ran through them all.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":18}}} -->\n<p style=\"font-size:18px\">The ship was making her way steadily through small waves which slapped her and then fizzled like effervescing water, leaving a little border of bubbles and foam on either side. The colourless October sky above was thinly clouded as if by the trail of wood-fire smoke, and the air was wonderfully salt and brisk. Indeed it was too cold to stand still. Mrs. Ambrose drew her arm within her husband\'s, and as they moved off it could be seen from the way in which her sloping cheek turned up to his that she had something private to communicate.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\";}i:42;O:8:\"stdClass\":7:{s:2:\"id\";i:19;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:23:\"Two images side by side\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:572:\"\n<figure class=\"wp-block-gallery alignwide has-nested-images columns-default is-cropped wp-block-gallery-224 is-layout-flex wp-block-gallery-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/nature-above-01.jpg\" alt=\"An aerial view of waves crashing against a shore.\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/nature-above-02.jpg\" alt=\"An aerial view of a field. A road runs through the upper right corner.\" /></figure>\n</figure>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:41:\"An image gallery with two example images.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:23:\"core/gallery,core/image\";}s:14:\"category_slugs\";a:1:{i:0;s:7:\"gallery\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:704:\"<!-- wp:gallery {\"linkTo\":\"none\",\"align\":\"wide\"} -->\n<figure class=\"wp-block-gallery alignwide has-nested-images columns-default is-cropped\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/nature-above-01.jpg\" alt=\"An aerial view of waves crashing against a shore.\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/nature-above-02.jpg\" alt=\"An aerial view of a field. A road runs through the upper right corner.\" /></figure>\n<!-- /wp:image --></figure>\n<!-- /wp:gallery -->\";}}','no');
INSERT INTO `wp_options` VALUES (439,'_site_transient_timeout_wp_remote_block_patterns_44ab230ce09bcedb639b3d1925ad4576','1700341142','no');
INSERT INTO `wp_options` VALUES (440,'_site_transient_wp_remote_block_patterns_44ab230ce09bcedb639b3d1925ad4576','a:13:{i:0;O:8:\"stdClass\":7:{s:2:\"id\";i:207567;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:11:\"Link in Bio\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:6630:\"\n<div class=\"wp-block-group has-white-background-color has-background is-layout-flow wp-block-group-is-layout-flow\" style=\"padding-top:var(--wp--preset--spacing--80);padding-right:0;padding-bottom:var(--wp--preset--spacing--80);padding-left:0\"><h1 style=\"font-style:normal;font-weight:700;\" class=\"has-text-align-center wp-block-site-title has-medium-font-size\"><a href=\"https://wordpress.org/patterns\" target=\"_self\" rel=\"home\">Block Pattern Directory</a></h1>\n\n<p class=\"has-text-align-center wp-block-site-tagline\">Beautifully designed patterns ready to go with a simple copy/paste</p>\n\n\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-buttons is-content-justification-center is-layout-flex wp-container-1 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link wp-element-button\">Watch my latest videos</a></div>\n\n\n\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link wp-element-button\">Buy merch</a></div>\n\n\n\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link wp-element-button\">Support me on Patreon</a></div>\n\n\n\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100 is-style-fill\"><a class=\"wp-block-button__link wp-element-button\">Get tickets for my show</a></div>\n</div>\n\n\n\n<ul class=\"wp-block-social-links has-normal-icon-size has-icon-color has-icon-background-color is-content-justification-center is-layout-flex wp-container-2 wp-block-social-links-is-layout-flex\" style=\"padding-top:var(--wp--preset--spacing--60);padding-bottom:var(--wp--preset--spacing--60)\"><li style=\"color: #000000; background-color: #ffffff; \" class=\"wp-social-link wp-social-link-instagram has-black-color has-white-background-color wp-block-social-link\"><a href=\"https://wordpress.org/patterns/\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M12,4.622c2.403,0,2.688,0.009,3.637,0.052c0.877,0.04,1.354,0.187,1.671,0.31c0.42,0.163,0.72,0.358,1.035,0.673 c0.315,0.315,0.51,0.615,0.673,1.035c0.123,0.317,0.27,0.794,0.31,1.671c0.043,0.949,0.052,1.234,0.052,3.637 s-0.009,2.688-0.052,3.637c-0.04,0.877-0.187,1.354-0.31,1.671c-0.163,0.42-0.358,0.72-0.673,1.035 c-0.315,0.315-0.615,0.51-1.035,0.673c-0.317,0.123-0.794,0.27-1.671,0.31c-0.949,0.043-1.233,0.052-3.637,0.052 s-2.688-0.009-3.637-0.052c-0.877-0.04-1.354-0.187-1.671-0.31c-0.42-0.163-0.72-0.358-1.035-0.673 c-0.315-0.315-0.51-0.615-0.673-1.035c-0.123-0.317-0.27-0.794-0.31-1.671C4.631,14.688,4.622,14.403,4.622,12 s0.009-2.688,0.052-3.637c0.04-0.877,0.187-1.354,0.31-1.671c0.163-0.42,0.358-0.72,0.673-1.035 c0.315-0.315,0.615-0.51,1.035-0.673c0.317-0.123,0.794-0.27,1.671-0.31C9.312,4.631,9.597,4.622,12,4.622 M12,3 C9.556,3,9.249,3.01,8.289,3.054C7.331,3.098,6.677,3.25,6.105,3.472C5.513,3.702,5.011,4.01,4.511,4.511 c-0.5,0.5-0.808,1.002-1.038,1.594C3.25,6.677,3.098,7.331,3.054,8.289C3.01,9.249,3,9.556,3,12c0,2.444,0.01,2.751,0.054,3.711 c0.044,0.958,0.196,1.612,0.418,2.185c0.23,0.592,0.538,1.094,1.038,1.594c0.5,0.5,1.002,0.808,1.594,1.038 c0.572,0.222,1.227,0.375,2.185,0.418C9.249,20.99,9.556,21,12,21s2.751-0.01,3.711-0.054c0.958-0.044,1.612-0.196,2.185-0.418 c0.592-0.23,1.094-0.538,1.594-1.038c0.5-0.5,0.808-1.002,1.038-1.594c0.222-0.572,0.375-1.227,0.418-2.185 C20.99,14.751,21,14.444,21,12s-0.01-2.751-0.054-3.711c-0.044-0.958-0.196-1.612-0.418-2.185c-0.23-0.592-0.538-1.094-1.038-1.594 c-0.5-0.5-1.002-0.808-1.594-1.038c-0.572-0.222-1.227-0.375-2.185-0.418C14.751,3.01,14.444,3,12,3L12,3z M12,7.378 c-2.552,0-4.622,2.069-4.622,4.622S9.448,16.622,12,16.622s4.622-2.069,4.622-4.622S14.552,7.378,12,7.378z M12,15 c-1.657,0-3-1.343-3-3s1.343-3,3-3s3,1.343,3,3S13.657,15,12,15z M16.804,6.116c-0.596,0-1.08,0.484-1.08,1.08 s0.484,1.08,1.08,1.08c0.596,0,1.08-0.484,1.08-1.08S17.401,6.116,16.804,6.116z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Instagram</span></a></li>\n\n<li style=\"color: #000000; background-color: #ffffff; \" class=\"wp-social-link wp-social-link-bandcamp has-black-color has-white-background-color wp-block-social-link\"><a href=\"https://wordpress.org/patterns/\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M15.27 17.289 3 17.289 8.73 6.711 21 6.711 15.27 17.289\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Bandcamp</span></a></li>\n\n<li style=\"color: #000000; background-color: #ffffff; \" class=\"wp-social-link wp-social-link-twitter has-black-color has-white-background-color wp-block-social-link\"><a href=\"https://wordpress.org/patterns/\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M22.23,5.924c-0.736,0.326-1.527,0.547-2.357,0.646c0.847-0.508,1.498-1.312,1.804-2.27 c-0.793,0.47-1.671,0.812-2.606,0.996C18.324,4.498,17.257,4,16.077,4c-2.266,0-4.103,1.837-4.103,4.103 c0,0.322,0.036,0.635,0.106,0.935C8.67,8.867,5.647,7.234,3.623,4.751C3.27,5.357,3.067,6.062,3.067,6.814 c0,1.424,0.724,2.679,1.825,3.415c-0.673-0.021-1.305-0.206-1.859-0.513c0,0.017,0,0.034,0,0.052c0,1.988,1.414,3.647,3.292,4.023 c-0.344,0.094-0.707,0.144-1.081,0.144c-0.264,0-0.521-0.026-0.772-0.074c0.522,1.63,2.038,2.816,3.833,2.85 c-1.404,1.1-3.174,1.756-5.096,1.756c-0.331,0-0.658-0.019-0.979-0.057c1.816,1.164,3.973,1.843,6.29,1.843 c7.547,0,11.675-6.252,11.675-11.675c0-0.178-0.004-0.355-0.012-0.531C20.985,7.47,21.68,6.747,22.23,5.924z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Twitter</span></a></li>\n\n<li style=\"color: #000000; background-color: #ffffff; \" class=\"wp-social-link wp-social-link-twitch has-black-color has-white-background-color wp-block-social-link\"><a href=\"https://wordpress.org/patterns/\" class=\"wp-block-social-link-anchor\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M16.499,8.089h-1.636v4.91h1.636V8.089z M12,8.089h-1.637v4.91H12V8.089z M4.228,3.178L3,6.451v13.092h4.499V22h2.456 l2.454-2.456h3.681L21,14.636V3.178H4.228z M19.364,13.816l-2.864,2.865H12l-2.453,2.453V16.68H5.863V4.814h13.501V13.816z\"></path></svg><span class=\"wp-block-social-link-label screen-reader-text\">Twitch</span></a></li></ul>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:3:\"6.1\";s:25:\"wpop_contains_block_types\";s:116:\"core/button,core/buttons,core/group,core/site-tagline,core/site-title,core/social-link,core/social-links,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:14:\"call-to-action\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:2665:\"<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"var:preset|spacing|80\",\"right\":\"0\",\"bottom\":\"var:preset|spacing|80\",\"left\":\"0\"}}},\"backgroundColor\":\"white\",\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group has-white-background-color has-background\" style=\"padding-top:var(--wp--preset--spacing--80);padding-right:0;padding-bottom:var(--wp--preset--spacing--80);padding-left:0\"><!-- wp:site-title {\"textAlign\":\"center\",\"style\":{\"typography\":{\"fontStyle\":\"normal\",\"fontWeight\":\"700\"}},\"fontSize\":\"medium\"} /-->\n\n<!-- wp:site-tagline {\"textAlign\":\"center\"} /-->\n\n<!-- wp:spacer {\"height\":\"20px\"} -->\n<div style=\"height:20px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"width\":100} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link wp-element-button\">Watch my latest videos</a></div>\n<!-- /wp:button -->\n\n<!-- wp:button {\"width\":100} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link wp-element-button\">Buy merch</a></div>\n<!-- /wp:button -->\n\n<!-- wp:button {\"width\":100} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link wp-element-button\">Support me on Patreon</a></div>\n<!-- /wp:button -->\n\n<!-- wp:button {\"width\":100,\"className\":\"is-style-fill\"} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100 is-style-fill\"><a class=\"wp-block-button__link wp-element-button\">Get tickets for my show</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:social-links {\"iconColor\":\"black\",\"iconColorValue\":\"#000000\",\"iconBackgroundColor\":\"white\",\"iconBackgroundColorValue\":\"#ffffff\",\"size\":\"has-normal-icon-size\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"0\",\"left\":\"0\"},\"padding\":{\"top\":\"var:preset|spacing|60\",\"bottom\":\"var:preset|spacing|60\"}}},\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<ul class=\"wp-block-social-links has-normal-icon-size has-icon-color has-icon-background-color\" style=\"padding-top:var(--wp--preset--spacing--60);padding-bottom:var(--wp--preset--spacing--60)\"><!-- wp:social-link {\"url\":\"https://wordpress.org/patterns/\",\"service\":\"instagram\"} /-->\n\n<!-- wp:social-link {\"url\":\"https://wordpress.org/patterns/\",\"service\":\"bandcamp\"} /-->\n\n<!-- wp:social-link {\"url\":\"https://wordpress.org/patterns/\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"https://wordpress.org/patterns/\",\"service\":\"twitch\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group -->\";}i:1;O:8:\"stdClass\":7:{s:2:\"id\";i:732;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:21:\"Simple call to action\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:961:\"\n<div class=\"wp-block-group alignfull has-text-color has-background is-layout-flow wp-block-group-is-layout-flow\" style=\"background-color:#ffffff;color:#000000\">\n<div style=\"height:64px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-align-center has-small-font-size\" style=\"line-height:.9\"><strong>GET IN TOUCH</strong></p>\n\n\n\n<h2 class=\"has-text-align-center wp-block-heading\" id=\"schedule-a-visit\" style=\"font-size:59px;line-height:1.15\"><strong>Schedule a Visit</strong></h2>\n\n\n\n<div class=\"wp-block-buttons is-horizontal is-content-justification-center is-layout-flex wp-container-4 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-width wp-block-button__width-50\"><a class=\"wp-block-button__link has-text-color has-background\" style=\"border-radius:50px;background-color:#000000;color:#ffffff\">Contact us</a></div>\n</div>\n\n\n\n<div style=\"height:64px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:89:\"A container with a white background. Inside is a centered paragraph, heading, and button.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:75:\"core/button,core/buttons,core/group,core/heading,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:7:\"buttons\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:1506:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"color\":{\"text\":\"#000000\",\"background\":\"#ffffff\"}}} -->\n<div class=\"wp-block-group alignfull has-text-color has-background\" style=\"background-color:#ffffff;color:#000000\"><!-- wp:spacer {\"height\":64} -->\n<div style=\"height:64px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"style\":{\"typography\":{\"lineHeight\":\".9\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-text-align-center has-small-font-size\" style=\"line-height:.9\"><strong>GET IN TOUCH</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"style\":{\"typography\":{\"fontSize\":59,\"lineHeight\":\"1.15\"}}} -->\n<h2 class=\"has-text-align-center\" id=\"schedule-a-visit\" style=\"font-size:59px;line-height:1.15\"><strong>Schedule a Visit</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"orientation\":\"horizontal\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"width\":50,\"style\":{\"color\":{\"background\":\"#000000\",\"text\":\"#ffffff\"},\"border\":{\"radius\":\"50px\"}}} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-50\"><a class=\"wp-block-button__link has-text-color has-background\" style=\"border-radius:50px;background-color:#000000;color:#ffffff\">Contact us</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":64} -->\n<div style=\"height:64px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer --></div>\n<!-- /wp:group -->\";}i:2;O:8:\"stdClass\":7:{s:2:\"id\";i:678;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:26:\"Three column pricing table\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3717:\"\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-12 wp-block-columns-is-layout-flex\" style=\"margin-bottom:0\">\n<div class=\"wp-block-column has-text-color has-background has-link-color wp-elements-2ae1b943d87d6b5cbc827b8e7de5c343 is-layout-flow wp-block-column-is-layout-flow\" style=\"color:#000000;background-color:#ffe97d;padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\">\n<h2 class=\"wp-block-heading\" id=\"single\" style=\"font-size:40px\"><strong>Single</strong></h2>\n\n\n\n<p class=\"has-normal-font-size\" style=\"line-height:1.5\"><strong>Enrich our growing community.</strong> </p>\n\n\n\n<hr class=\"wp-block-separator has-text-color has-css-opacity has-background is-style-wide\" style=\"background-color:#000000;color:#000000\" />\n\n\n\n<ul class=\"has-normal-font-size\">\n<li>General admission and member discounts for one adult</li>\n\n\n\n<li>One free ticket per special exhibition</li>\n\n\n\n<li>Two single-use guest passes per year</li>\n</ul>\n\n\n\n<div class=\"wp-block-buttons alignfull is-horizontal is-content-justification-center is-layout-flex wp-container-6 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link has-white-color has-text-color has-background no-border-radius wp-element-button\" style=\"background-color:#000000\">$110 / year</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column has-text-color has-background has-link-color wp-elements-c860b6260b3b3b7bae640a65db9c9aec is-layout-flow wp-block-column-is-layout-flow\" style=\"color:#000000;background-color:#d1d1e1;padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\">\n<h2 class=\"wp-block-heading\" id=\"family\" style=\"font-size:40px\"><strong>Family</strong></h2>\n\n\n\n<p class=\"has-normal-font-size\" style=\"line-height:1.5\"><strong>Support special exhibitions.</strong></p>\n\n\n\n<hr class=\"wp-block-separator has-css-opacity is-style-wide\" />\n\n\n\n<ul class=\"has-normal-font-size\">\n<li>General admission and member discounts for two adults</li>\n\n\n\n<li>Four free tickets per special exhibition</li>\n\n\n\n<li>Four single-use guest passes per year</li>\n</ul>\n\n\n\n<div class=\"wp-block-buttons alignfull is-horizontal is-content-justification-center is-layout-flex wp-container-8 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100 is-style-fill\"><a class=\"wp-block-button__link has-white-color has-text-color has-background no-border-radius wp-element-button\" style=\"background-color:#000000\">$200 / year</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column has-text-color has-background has-link-color wp-elements-4a86cd4fa1de9230a73a90c7ad305893 is-layout-flow wp-block-column-is-layout-flow\" style=\"color:#000000;background-color:#c0ebf1;padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\">\n<h2 class=\"wp-block-heading\" id=\"patron\" style=\"font-size:40px\"><strong>Patron</strong></h2>\n\n\n\n<p class=\"has-normal-font-size\"><strong>Take support to the next level.</strong></p>\n\n\n\n<hr class=\"wp-block-separator has-css-opacity is-style-wide\" />\n\n\n\n<ul class=\"has-normal-font-size\">\n<li>General admission and member discounts for two adults</li>\n\n\n\n<li>Five free tickets per special exhibition</li>\n\n\n\n<li>Six single-use guest passes per year</li>\n</ul>\n\n\n\n<div class=\"wp-block-buttons alignfull is-horizontal is-content-justification-center is-layout-flex wp-container-10 wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link has-white-color has-text-color has-background no-border-radius wp-element-button\" style=\"background-color:#000000\">$400 / year</a></div>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:272:\"Three equal-width columns set up as a pricing table. The left column has a yellow background, the middle column has a light purple background, and the right column has a light blue background. Each column contains a heading, subheading, separator, list, and then a button.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:117:\"core/button,core/buttons,core/column,core/columns,core/heading,core/list,core/list-item,core/paragraph,core/separator\";}s:14:\"category_slugs\";a:2:{i:0;s:14:\"call-to-action\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:6125:\"<!-- wp:columns {\"align\":\"wide\",\"style\":{\"spacing\":{\"margin\":{\"bottom\":\"0\"}}}} -->\n<div class=\"wp-block-columns alignwide\" style=\"margin-bottom:0\"><!-- wp:column {\"style\":{\"color\":{\"background\":\"#ffe97d\",\"text\":\"#000000\"},\"elements\":{\"link\":{\"color\":{\"text\":\"#000000\"}}},\"spacing\":{\"padding\":{\"top\":\"2em\",\"right\":\"2em\",\"bottom\":\"2em\",\"left\":\"2em\"}}}} -->\n<div class=\"wp-block-column has-text-color has-background has-link-color\" style=\"color:#000000;background-color:#ffe97d;padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\"><!-- wp:heading {\"style\":{\"typography\":{\"fontSize\":\"40px\"}},\"anchor\":\"single\"} -->\n<h2 class=\"wp-block-heading\" id=\"single\" style=\"font-size:40px\"><strong>Single</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.5\"}},\"fontSize\":\"normal\"} -->\n<p class=\"has-normal-font-size\" style=\"line-height:1.5\"><strong>Enrich our growing community.</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\",\"style\":{\"color\":{\"background\":\"#000000\"}},\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-text-color has-css-opacity has-background is-style-wide\" style=\"background-color:#000000;color:#000000\" />\n<!-- /wp:separator -->\n\n<!-- wp:list {\"fontSize\":\"normal\"} -->\n<ul class=\"has-normal-font-size\"><!-- wp:list-item -->\n<li>General admission and member discounts for one adult</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>One free ticket per special exhibition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Two single-use guest passes per year</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:buttons {\"align\":\"full\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"orientation\":\"horizontal\"}} -->\n<div class=\"wp-block-buttons alignfull\"><!-- wp:button {\"textColor\":\"white\",\"width\":100,\"style\":{\"color\":{\"background\":\"#000000\"},\"border\":{\"radius\":0}}} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link has-white-color has-text-color has-background no-border-radius wp-element-button\" style=\"background-color:#000000\">$110 / year</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"style\":{\"color\":{\"background\":\"#d1d1e1\",\"text\":\"#000000\"},\"elements\":{\"link\":{\"color\":{\"text\":\"#000000\"}}},\"spacing\":{\"padding\":{\"top\":\"2em\",\"right\":\"2em\",\"bottom\":\"2em\",\"left\":\"2em\"}}}} -->\n<div class=\"wp-block-column has-text-color has-background has-link-color\" style=\"color:#000000;background-color:#d1d1e1;padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\"><!-- wp:heading {\"style\":{\"typography\":{\"fontSize\":\"40px\"}},\"anchor\":\"family\"} -->\n<h2 class=\"wp-block-heading\" id=\"family\" style=\"font-size:40px\"><strong>Family</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.5\"}},\"fontSize\":\"normal\"} -->\n<p class=\"has-normal-font-size\" style=\"line-height:1.5\"><strong>Support special exhibitions.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-css-opacity is-style-wide\" />\n<!-- /wp:separator -->\n\n<!-- wp:list {\"fontSize\":\"normal\"} -->\n<ul class=\"has-normal-font-size\"><!-- wp:list-item -->\n<li>General admission and member discounts for two adults</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Four free tickets per special exhibition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Four single-use guest passes per year</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:buttons {\"align\":\"full\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"orientation\":\"horizontal\"}} -->\n<div class=\"wp-block-buttons alignfull\"><!-- wp:button {\"textColor\":\"white\",\"width\":100,\"style\":{\"color\":{\"background\":\"#000000\"},\"border\":{\"radius\":0}},\"className\":\"is-style-fill\"} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100 is-style-fill\"><a class=\"wp-block-button__link has-white-color has-text-color has-background no-border-radius wp-element-button\" style=\"background-color:#000000\">$200 / year</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"style\":{\"color\":{\"background\":\"#c0ebf1\",\"text\":\"#000000\"},\"elements\":{\"link\":{\"color\":{\"text\":\"#000000\"}}},\"spacing\":{\"padding\":{\"top\":\"2em\",\"right\":\"2em\",\"bottom\":\"2em\",\"left\":\"2em\"}}}} -->\n<div class=\"wp-block-column has-text-color has-background has-link-color\" style=\"color:#000000;background-color:#c0ebf1;padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\"><!-- wp:heading {\"style\":{\"typography\":{\"fontSize\":\"40px\"}},\"anchor\":\"patron\"} -->\n<h2 class=\"wp-block-heading\" id=\"patron\" style=\"font-size:40px\"><strong>Patron</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"normal\"} -->\n<p class=\"has-normal-font-size\"><strong>Take support to the next level.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-css-opacity is-style-wide\" />\n<!-- /wp:separator -->\n\n<!-- wp:list {\"fontSize\":\"normal\"} -->\n<ul class=\"has-normal-font-size\"><!-- wp:list-item -->\n<li>General admission and member discounts for two adults</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Five free tickets per special exhibition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Six single-use guest passes per year</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:buttons {\"align\":\"full\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\",\"orientation\":\"horizontal\"}} -->\n<div class=\"wp-block-buttons alignfull\"><!-- wp:button {\"textColor\":\"white\",\"width\":100,\"style\":{\"color\":{\"background\":\"#000000\"},\"border\":{\"radius\":0}}} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link has-white-color has-text-color has-background no-border-radius wp-element-button\" style=\"background-color:#000000\">$400 / year</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\";}i:3;O:8:\"stdClass\":7:{s:2:\"id\";i:669;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:31:\"Image and quote on a background\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2281:\"\n<div class=\"wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center has-background\" style=\"background-color:#f1f5c7\"><figure class=\"wp-block-media-text__media\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://s.w.org/patterns/files/2021/06/pear-1-1024x1024.png\" alt=\"\" class=\"wp-image-5263 size-full\" srcset=\"https://s.w.org/patterns/files/2021/06/pear-1-1024x1024.png 1024w, https://s.w.org/patterns/files/2021/06/pear-1-300x300.png 300w, https://s.w.org/patterns/files/2021/06/pear-1-150x150.png 150w, https://s.w.org/patterns/files/2021/06/pear-1-768x768.png 768w, https://s.w.org/patterns/files/2021/06/pear-1.png 1300w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure><div class=\"wp-block-media-text__content\">\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\">\n<p style=\"font-size:36px;line-height:1.2\"><strong>Even the bitterest fruit has sugar in it.</strong></p>\n\n\n\n<p class=\"has-extra-small-font-size\">– Terry a O&#8217;Neal</p>\n</div>\n</div></div>\n\n\n\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile is-vertically-aligned-center has-background\" style=\"background-color:#fffdea\"><figure class=\"wp-block-media-text__media\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://s.w.org/patterns/files/2021/06/pear-half-1024x1024.png\" alt=\"\" class=\"wp-image-673 size-full\" srcset=\"https://s.w.org/patterns/files/2021/06/pear-half-1024x1024.png 1024w, https://s.w.org/patterns/files/2021/06/pear-half-300x300.png 300w, https://s.w.org/patterns/files/2021/06/pear-half-150x150.png 150w, https://s.w.org/patterns/files/2021/06/pear-half-768x768.png 768w, https://s.w.org/patterns/files/2021/06/pear-half.png 1300w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure><div class=\"wp-block-media-text__content\">\n<div class=\"wp-block-group is-layout-flow wp-block-group-is-layout-flow\" style=\"padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\">\n<p style=\"font-size:36px;line-height:1.2\"><strong>The trees that are slow to grow bear the best fruit.</strong></p>\n\n\n\n<p class=\"has-extra-small-font-size\">– Molière</p>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:221:\"Two media and text blocks. The top one has a pale green background. The text is on the left and contains a quote, and the image is on the right. The next block underneath has the image on the left, and quote on the right.\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:41:\"core/group,core/media-text,core/paragraph\";}s:14:\"category_slugs\";a:3:{i:0;s:8:\"featured\";i:1;s:6:\"images\";i:2;s:4:\"text\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:2404:\"<!-- wp:media-text {\"mediaPosition\":\"right\",\"mediaId\":5263,\"mediaLink\":\"https://wordpress.org/patterns/pattern/image-and-quote-on-a-background/pear-3/\",\"mediaType\":\"image\",\"verticalAlignment\":\"center\",\"style\":{\"color\":{\"background\":\"#f1f5c7\"}}} -->\n<div class=\"wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center has-background\" style=\"background-color:#f1f5c7\"><figure class=\"wp-block-media-text__media\"><img src=\"https://s.w.org/patterns/files/2021/06/pear-1-1024x1024.png\" alt=\"\" class=\"wp-image-5263 size-full\" /></figure><div class=\"wp-block-media-text__content\"><!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"2em\",\"right\":\"2em\",\"bottom\":\"2em\",\"left\":\"2em\"}}}} -->\n<div class=\"wp-block-group\" style=\"padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\"><!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.2\",\"fontSize\":\"36px\"}}} -->\n<p style=\"font-size:36px;line-height:1.2\"><strong>Even the bitterest fruit has sugar in it.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"fontSize\":\"extra-small\"} -->\n<p class=\"has-extra-small-font-size\">– Terry a O\'Neal</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:media-text {\"mediaId\":673,\"mediaLink\":\"https://wordpress.org/patterns/pear-half/\",\"mediaType\":\"image\",\"verticalAlignment\":\"center\",\"style\":{\"color\":{\"background\":\"#fffdea\"}}} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile is-vertically-aligned-center has-background\" style=\"background-color:#fffdea\"><figure class=\"wp-block-media-text__media\"><img src=\"https://s.w.org/patterns/files/2021/06/pear-half-1024x1024.png\" alt=\"\" class=\"wp-image-673 size-full\" /></figure><div class=\"wp-block-media-text__content\"><!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"2em\",\"right\":\"2em\",\"bottom\":\"2em\",\"left\":\"2em\"}}}} -->\n<div class=\"wp-block-group\" style=\"padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\"><!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.2\",\"fontSize\":\"36px\"}}} -->\n<p style=\"font-size:36px;line-height:1.2\"><strong>The trees that are slow to grow bear the best fruit.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"fontSize\":\"extra-small\"} -->\n<p class=\"has-extra-small-font-size\">– Molière</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div></div>\n<!-- /wp:media-text -->\";}i:4;O:8:\"stdClass\":7:{s:2:\"id\";i:591;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:5:\"Event\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1687:\"\n<div class=\"wp-block-media-text alignfull has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-top has-text-color has-background has-link-color wp-elements-5fce4e677a9b9d7d0cae0196c9d74d97\" style=\"color:#fffdc7;background-color:#121c1c;grid-template-columns:auto 60%\"><div class=\"wp-block-media-text__content\">\n<div class=\"wp-block-group has-link-color wp-elements-71b4a847bbd96313422a1303e9ba41f3 is-layout-flow wp-block-group-is-layout-flow\" style=\"padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\">\n<h2 class=\"wp-block-heading\" style=\"font-size:48px;font-weight:700;line-height:1.15\">Opening <br>Party</h2>\n\n\n\n<p class=\"has-text-color has-link-color wp-elements-0860918d5b16b9e1778b1966b333b980\" style=\"color:#fffdc7\"><strong><a href=\"#\">RSVP →</a></strong></p>\n</div>\n</div><figure class=\"wp-block-media-text__media\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-1024x1024.jpg\" alt=\"\" class=\"wp-image-590 size-full\" srcset=\"https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-1024x1024.jpg 1024w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-300x300.jpg 300w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-150x150.jpg 150w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-768x768.jpg 768w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-1536x1536.jpg 1536w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1.jpg 1572w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:0:\"\";s:19:\"wpop_viewport_width\";i:800;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:54:\"core/group,core/heading,core/media-text,core/paragraph\";}s:14:\"category_slugs\";a:3:{i:0;s:6:\"banner\";i:1;s:8:\"featured\";i:2;s:6:\"images\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:1617:\"<!-- wp:media-text {\"align\":\"full\",\"mediaPosition\":\"right\",\"mediaId\":590,\"mediaLink\":\"https://wordpress.org/patterns/image-from-rawpixel-id-430289-jpeg-1/\",\"mediaType\":\"image\",\"mediaWidth\":60,\"verticalAlignment\":\"top\",\"style\":{\"color\":{\"background\":\"#121c1c\",\"text\":\"#fffdc7\"},\"elements\":{\"link\":{\"color\":{\"text\":\"#fffdc7\"}}}}} -->\n<div class=\"wp-block-media-text alignfull has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-top has-text-color has-background has-link-color\" style=\"color:#fffdc7;background-color:#121c1c;grid-template-columns:auto 60%\"><div class=\"wp-block-media-text__content\"><!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"2em\",\"right\":\"2em\",\"bottom\":\"2em\",\"left\":\"2em\"}},\"elements\":{\"link\":{\"color\":{\"text\":\"#fffdc7\"}}}}} -->\n<div class=\"wp-block-group has-link-color\" style=\"padding-top:2em;padding-right:2em;padding-bottom:2em;padding-left:2em\"><!-- wp:heading {\"style\":{\"typography\":{\"fontWeight\":\"700\",\"fontSize\":\"48px\",\"lineHeight\":\"1.15\"}}} -->\n<h2 class=\"wp-block-heading\" style=\"font-size:48px;font-weight:700;line-height:1.15\">Opening <br>Party</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"#fffdc7\"}}},\"color\":{\"text\":\"#fffdc7\"}}} -->\n<p class=\"has-text-color has-link-color\" style=\"color:#fffdc7\"><strong><a href=\"#\">RSVP →</a></strong></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div><figure class=\"wp-block-media-text__media\"><img src=\"https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-430289-jpeg-1-1024x1024.jpg\" alt=\"\" class=\"wp-image-590 size-full\" /></figure></div>\n<!-- /wp:media-text -->\";}i:5;O:8:\"stdClass\":7:{s:2:\"id\";i:573;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:37:\"Image on solid color with description\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1830:\"\n<div class=\"wp-block-columns alignfull is-layout-flex wp-container-21 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:50%\">\n<div class=\"wp-block-cover has-background-dim\" style=\"background-color:#f6f6f6;min-height:600px\"><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-medium\"><img loading=\"lazy\" decoding=\"async\" width=\"263\" height=\"300\" src=\"https://s.w.org/patterns/files/2021/06/wire-sculpture-263x300.jpg\" alt=\"\" class=\"wp-image-571\" srcset=\"https://s.w.org/patterns/files/2021/06/wire-sculpture-263x300.jpg 263w, https://s.w.org/patterns/files/2021/06/wire-sculpture-898x1024.jpg 898w, https://s.w.org/patterns/files/2021/06/wire-sculpture-768x875.jpg 768w, https://s.w.org/patterns/files/2021/06/wire-sculpture-1347x1536.jpg 1347w, https://s.w.org/patterns/files/2021/06/wire-sculpture.jpg 1658w\" sizes=\"(max-width: 263px) 100vw, 263px\" /></figure></div>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-block-column is-vertically-aligned-center is-layout-flow wp-block-column-is-layout-flow\" style=\"padding-top:1em;padding-right:1em;padding-bottom:1em;padding-left:1em\">\n<div class=\"wp-block-columns is-layout-flex wp-container-19 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:320px\">\n<p class=\"has-small-font-size\" style=\"line-height:1.6\"><strong>Airplane</strong></p>\n\n\n\n<p class=\"has-small-font-size\" style=\"line-height:1.6\">Copper wire, wood base. I created this piece in late 2008. For this work, I aimed to convey both the industrial heaviness of an airplane, but also the cloudlike floating quality you feel when you’re in one.</p>\n</div>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:38:\"Image on solid color with description.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:61:\"core/column,core/columns,core/cover,core/image,core/paragraph\";}s:14:\"category_slugs\";a:3:{i:0;s:8:\"featured\";i:1;s:6:\"images\";i:2;s:4:\"text\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:1826:\"<!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"50%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:50%\"><!-- wp:cover {\"customOverlayColor\":\"#f6f6f6\",\"minHeight\":600} -->\n<div class=\"wp-block-cover has-background-dim\" style=\"background-color:#f6f6f6;min-height:600px\"><div class=\"wp-block-cover__inner-container\"><!-- wp:image {\"align\":\"center\",\"id\":571,\"sizeSlug\":\"medium\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-medium\"><img src=\"https://s.w.org/patterns/files/2021/06/wire-sculpture-263x300.jpg\" alt=\"\" class=\"wp-image-571\" /></figure></div>\n<!-- /wp:image --></div></div>\n<!-- /wp:cover --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"verticalAlignment\":\"center\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"1em\",\"right\":\"1em\",\"bottom\":\"1em\",\"left\":\"1em\"}}}} -->\n<div class=\"wp-block-column is-vertically-aligned-center\" style=\"padding-top:1em;padding-right:1em;padding-bottom:1em;padding-left:1em\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column {\"width\":\"320px\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:320px\"><!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.6\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"line-height:1.6\"><strong>Airplane</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"1.6\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"line-height:1.6\">Copper wire, wood base. I created this piece in late 2008. For this work, I aimed to convey both the industrial heaviness of an airplane, but also the cloudlike floating quality you feel when you’re in one.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\";}i:6;O:8:\"stdClass\":7:{s:2:\"id\";i:526;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:31:\"Offset images with descriptions\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:2907:\"\n<div class=\"wp-block-columns alignwide are-vertically-aligned-top is-layout-flex wp-container-31 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-vertically-aligned-top is-layout-flow wp-block-column-is-layout-flow\">\n<div class=\"wp-block-group wp-container-content-24 is-vertical is-content-justification-left is-nowrap is-layout-flex wp-container-25 wp-block-group-is-layout-flex\" style=\"margin-top:0;margin-bottom:0\">\n<figure class=\"wp-block-image size-large wp-container-content-22\"><img loading=\"lazy\" decoding=\"async\" width=\"793\" height=\"1024\" src=\"https://s.w.org/patterns/files/2021/06/Iris-793x1024.jpg\" alt=\"Beautiful photomechanical prints of White Irises (1887-1897) by Ogawa Kazumasa. Original from The Rijksmuseum. \" class=\"wp-image-525\" srcset=\"https://s.w.org/patterns/files/2021/06/Iris-793x1024.jpg 793w, https://s.w.org/patterns/files/2021/06/Iris-232x300.jpg 232w, https://s.w.org/patterns/files/2021/06/Iris-768x992.jpg 768w, https://s.w.org/patterns/files/2021/06/Iris-1189x1536.jpg 1189w, https://s.w.org/patterns/files/2021/06/Iris-1586x2048.jpg 1586w, https://s.w.org/patterns/files/2021/06/Iris.jpg 1920w\" sizes=\"(max-width: 793px) 100vw, 793px\" /></figure>\n\n\n\n<div class=\"wp-block-group is-vertical is-nowrap is-layout-flex wp-container-23 wp-block-group-is-layout-flex\">\n<p class=\"has-medium-font-size\"><strong>White Irises</strong></p>\n\n\n\n<p class=\"has-small-font-size\">Ogawa Kazumasa</p>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column is-vertically-aligned-top is-layout-flow wp-block-column-is-layout-flow\">\n<div class=\"wp-block-group wp-container-content-28 is-vertical is-layout-flex wp-container-29 wp-block-group-is-layout-flex\" style=\"margin-top:0;margin-bottom:0\">\n<div class=\"wp-block-group is-vertical is-nowrap is-layout-flex wp-container-27 wp-block-group-is-layout-flex\">\n<div style=\"height:80px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-medium-font-size\"><strong>Cherry Blossom</strong></p>\n\n\n\n<p class=\"has-small-font-size\">Ogawa Kazumasa</p>\n</div>\n\n\n\n<figure class=\"wp-block-image size-large\" style=\"font-size:14px\"><img loading=\"lazy\" decoding=\"async\" width=\"707\" height=\"1024\" src=\"https://s.w.org/patterns/files/2021/06/Cherry-Blossom-707x1024.jpg\" alt=\"Beautiful photomechanical prints of Cherry Blossom (1887-1897) by Ogawa Kazumasa. Original from The Rijksmuseum. \" class=\"wp-image-524\" srcset=\"https://s.w.org/patterns/files/2021/06/Cherry-Blossom-707x1024.jpg 707w, https://s.w.org/patterns/files/2021/06/Cherry-Blossom-207x300.jpg 207w, https://s.w.org/patterns/files/2021/06/Cherry-Blossom-768x1112.jpg 768w, https://s.w.org/patterns/files/2021/06/Cherry-Blossom-1061x1536.jpg 1061w, https://s.w.org/patterns/files/2021/06/Cherry-Blossom-1414x2048.jpg 1414w, https://s.w.org/patterns/files/2021/06/Cherry-Blossom-scaled.jpg 1768w\" sizes=\"(max-width: 707px) 100vw, 707px\" /></figure>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:58:\"Two offset columns with images and titles within each one.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:73:\"core/column,core/columns,core/group,core/image,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:3:{i:0;s:8:\"featured\";i:1;s:7:\"gallery\";i:2;s:6:\"images\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:2930:\"<!-- wp:columns {\"verticalAlignment\":\"top\",\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"var:preset|spacing|40\",\"left\":\"var:preset|spacing|40\"}}}} -->\n<div class=\"wp-block-columns alignwide are-vertically-aligned-top\"><!-- wp:column {\"verticalAlignment\":\"top\"} -->\n<div class=\"wp-block-column is-vertically-aligned-top\"><!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"480px\"},\"spacing\":{\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"left\"}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0;margin-bottom:0\"><!-- wp:image {\"id\":525,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"50%\"}}} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/patterns/files/2021/06/Iris-793x1024.jpg\" alt=\"Beautiful photomechanical prints of White Irises (1887-1897) by Ogawa Kazumasa. Original from The Rijksmuseum. \" class=\"wp-image-525\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\"><strong>White Irises</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\">Ogawa Kazumasa</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"verticalAlignment\":\"top\"} -->\n<div class=\"wp-block-column is-vertically-aligned-top\"><!-- wp:group {\"style\":{\"layout\":{\"selfStretch\":\"fixed\",\"flexSize\":\"480px\"},\"spacing\":{\"margin\":{\"top\":\"0\",\"bottom\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\"}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0;margin-bottom:0\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"0\"}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:spacer {\"height\":\"80px\"} -->\n<div style=\"height:80px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\"><strong>Cherry Blossom</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\">Ogawa Kazumasa</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:image {\"id\":524,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"typography\":{\"fontSize\":\"14px\"}}} -->\n<figure class=\"wp-block-image size-large\" style=\"font-size:14px\"><img src=\"https://s.w.org/patterns/files/2021/06/Cherry-Blossom-707x1024.jpg\" alt=\"Beautiful photomechanical prints of Cherry Blossom (1887-1897) by Ogawa Kazumasa. Original from The Rijksmuseum. \" class=\"wp-image-524\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\";}i:7;O:8:\"stdClass\":7:{s:2:\"id\";i:521;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:45:\"Image with description below and to the right\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1665:\"\n<div class=\"wp-block-columns is-layout-flex wp-container-36 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:10%\"></div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1-1024x1024.jpg\" alt=\"Vintage Cupid Illustration\" class=\"wp-image-522\" srcset=\"https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1-1024x1024.jpg 1024w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1-300x300.jpg 300w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1-150x150.jpg 150w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1-768x768.jpg 768w, https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1.jpg 1510w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\"></div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:10%\"></div>\n</div>\n\n\n\n<div class=\"wp-block-columns is-layout-flex wp-container-39 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\"></div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<p style=\"font-size:14px\"><strong>Cupid in Flight</strong><br>48” x 48” Giclee print on archival paper.</p>\n</div>\n</div>\n\n\n\n<p></p>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:46:\"Image with description below and to the right.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:50:\"core/column,core/columns,core/image,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:8:\"featured\";i:1;s:6:\"images\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:1241:\"<!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column {\"width\":\"10%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:10%\"></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"id\":522,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/patterns/files/2021/06/image-from-rawpixel-id-539759-jpeg-1-1024x1024.jpg\" alt=\"Vintage Cupid Illustration\" class=\"wp-image-522\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"10%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:10%\"></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"14px\"}}} -->\n<p style=\"font-size:14px\"><strong>Cupid in Flight</strong><br>48” x 48” Giclee print on archival paper.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\";}i:8;O:8:\"stdClass\":7:{s:2:\"id\";i:502;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:13:\"Event details\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1684:\"\n<figure class=\"wp-block-image alignwide size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"1227\" src=\"https://s.w.org/patterns/files/2021/06/Group-17-scaled.jpg\" alt=\"Image of a woman being carried through the air by swans.\" class=\"wp-image-501\" srcset=\"https://s.w.org/patterns/files/2021/06/Group-17-scaled.jpg 2560w, https://s.w.org/patterns/files/2021/06/Group-17-300x144.jpg 300w, https://s.w.org/patterns/files/2021/06/Group-17-1024x491.jpg 1024w, https://s.w.org/patterns/files/2021/06/Group-17-768x368.jpg 768w, https://s.w.org/patterns/files/2021/06/Group-17-1536x736.jpg 1536w, https://s.w.org/patterns/files/2021/06/Group-17-2048x981.jpg 2048w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" /></figure>\n\n\n\n<div class=\"wp-block-columns alignwide are-vertically-aligned-center is-layout-flex wp-container-44 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-vertically-aligned-center is-layout-flow wp-block-column-is-layout-flow\">\n<p style=\"line-height:2\"><strong>Location:</strong><br>82 Main St. Brooklyn, NY</p>\n</div>\n\n\n\n<div class=\"wp-block-column is-vertically-aligned-center is-layout-flow wp-block-column-is-layout-flow\">\n<p style=\"line-height:2\"><strong>Date:</strong><br>October 24, 2021</p>\n</div>\n\n\n\n<div class=\"wp-block-column is-vertically-aligned-center is-layout-flow wp-block-column-is-layout-flow\">\n<div class=\"wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex\">\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link has-text-color has-background wp-element-button\" style=\"color:#efefef;background-color:#262626\">Purchase Tickets</a></div>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:14:\"Event details.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:75:\"core/button,core/buttons,core/column,core/columns,core/image,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:14:\"call-to-action\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:1:{i:0;s:8:\"featured\";}s:15:\"pattern_content\";s:1642:\"<!-- wp:image {\"align\":\"wide\",\"id\":501,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image alignwide size-full\"><img src=\"https://s.w.org/patterns/files/2021/06/Group-17-scaled.jpg\" alt=\"Image of a woman being carried through the air by swans.\" class=\"wp-image-501\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:columns {\"verticalAlignment\":\"center\",\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide are-vertically-aligned-center\"><!-- wp:column {\"verticalAlignment\":\"center\"} -->\n<div class=\"wp-block-column is-vertically-aligned-center\"><!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"2\"}}} -->\n<p style=\"line-height:2\"><strong>Location:</strong><br>82 Main St. Brooklyn, NY</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"verticalAlignment\":\"center\"} -->\n<div class=\"wp-block-column is-vertically-aligned-center\"><!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"2\"}}} -->\n<p style=\"line-height:2\"><strong>Date:</strong><br>October 24, 2021</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"verticalAlignment\":\"center\"} -->\n<div class=\"wp-block-column is-vertically-aligned-center\"><!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"width\":100,\"style\":{\"color\":{\"background\":\"#262626\",\"text\":\"#efefef\"}}} -->\n<div class=\"wp-block-button has-custom-width wp-block-button__width-100\"><a class=\"wp-block-button__link has-text-color has-background wp-element-button\" style=\"color:#efefef;background-color:#262626\">Purchase Tickets</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\";}i:9;O:8:\"stdClass\":7:{s:2:\"id\";i:199;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:34:\"Three columns with images and text\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:3492:\"\n<div class=\"wp-block-group alignfull has-background is-layout-flow wp-block-group-is-layout-flow\" style=\"background-color:#f5eac1;padding-top:6vw;padding-right:6vw;padding-bottom:6vw;padding-left:6vw\">\n<div class=\"wp-block-group is-vertical is-nowrap is-layout-flex wp-container-45 wp-block-group-is-layout-flex\" style=\"padding-right:0;padding-left:0\">\n<h6 class=\"wp-block-heading has-text-color\" id=\"ecosystem\" style=\"color:#000000;font-size:16px\">ECOSYSTEM</h6>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:6vw;font-style:normal;font-weight:700;letter-spacing:0px;line-height:0.9;text-decoration:none;text-transform:none\">Positive growth.</p>\n</div>\n\n\n\n<div style=\"height:1vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<div class=\"wp-block-group alignwide is-vertical is-nowrap is-layout-flex wp-container-53 wp-block-group-is-layout-flex\" style=\"padding-top:0;padding-right:0;padding-bottom:0;padding-left:0\">\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-49 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33.38%\">\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\"><em>Nature</em>, in the common sense, refers to essences unchanged by man; space, the air, the river, the leaf.&nbsp;<em>Art</em>&nbsp;is applied to the mixture of his will with the same things, as in a house, a canal, a statue, a picture. </p>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">But his operations taken together are so insignificant, a little chipping, baking, patching, and washing, that in an impression so grand as that of the world on the human mind, they do not vary the result.</p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33%\">\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/outside-01.jpg\" alt=\"The sun setting through a dense forest.\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33.62%\">\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/outside-02.jpg\" alt=\"Wind turbines standing on a grassy plain, against a blue sky.\" /></figure>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-52 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:69%\">\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/outside-03.jpg\" alt=\"The sun shining over a ridge leading down into the shore. In the distance, a car drives down a road.\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-vertically-aligned-center is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:33%\">\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">Undoubtedly we have no questions to ask which are unanswerable. We must trust the perfection of the creation so far, as to believe that whatever curiosity the order of things has awakened in our minds, the order of things can satisfy. Every man&#8217;s condition is a solution in hieroglyphic to those inquiries he would put.</p>\n</div>\n</div>\n</div>\n</div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:77:\"Three columns with images and text, with vertical spacing for an offset look.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:86:\"core/column,core/columns,core/group,core/heading,core/image,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:5:{i:0;s:7:\"columns\";i:1;s:8:\"featured\";i:2;s:7:\"gallery\";i:3;s:6:\"images\";i:4;s:4:\"text\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:5124:\"<!-- wp:group {\"align\":\"full\",\"style\":{\"color\":{\"background\":\"#f5eac1\"},\"spacing\":{\"padding\":{\"top\":\"6vw\",\"bottom\":\"6vw\",\"left\":\"6vw\",\"right\":\"6vw\"}}},\"layout\":{\"type\":\"default\"}} -->\n<div class=\"wp-block-group alignfull has-background\" style=\"background-color:#f5eac1;padding-top:6vw;padding-right:6vw;padding-bottom:6vw;padding-left:6vw\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"16px\",\"padding\":{\"right\":\"0\",\"left\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\" style=\"padding-right:0;padding-left:0\"><!-- wp:heading {\"level\":6,\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"16px\"}},\"anchor\":\"ecosystem\"} -->\n<h6 class=\"wp-block-heading has-text-color\" id=\"ecosystem\" style=\"color:#000000;font-size:16px\">ECOSYSTEM</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"lineHeight\":\"0.9\",\"fontSize\":\"6vw\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textTransform\":\"none\",\"textDecoration\":\"none\",\"letterSpacing\":\"0px\"},\"color\":{\"text\":\"#000000\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:6vw;font-style:normal;font-weight:700;letter-spacing:0px;line-height:0.9;text-decoration:none;text-transform:none\">Positive growth.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"1vw\"} -->\n<div style=\"height:1vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":\"3vw\",\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}},\"layout\":{\"type\":\"flex\",\"orientation\":\"vertical\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group alignwide\" style=\"padding-top:0;padding-right:0;padding-bottom:0;padding-left:0\"><!-- wp:columns {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"3vw\",\"left\":\"3vw\"}}}} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"33.38%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33.38%\"><!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"17px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\"><em>Nature</em>, in the common sense, refers to essences unchanged by man; space, the air, the river, the leaf.&nbsp;<em>Art</em>&nbsp;is applied to the mixture of his will with the same things, as in a house, a canal, a statue, a picture. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"17px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">But his operations taken together are so insignificant, a little chipping, baking, patching, and washing, that in an impression so grand as that of the world on the human mind, they do not vary the result.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"33%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33%\"><!-- wp:spacer {\"height\":\"2vw\"} -->\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/outside-01.jpg\" alt=\"The sun setting through a dense forest.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"33.62%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33.62%\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/outside-02.jpg\" alt=\"Wind turbines standing on a grassy plain, against a blue sky.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:columns {\"align\":\"wide\",\"style\":{\"spacing\":{\"blockGap\":{\"left\":\"3vw\"}}}} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"69%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:69%\"><!-- wp:image {\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://s.w.org/images/core/5.8/outside-03.jpg\" alt=\"The sun shining over a ridge leading down into the shore. In the distance, a car drives down a road.\" /></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"verticalAlignment\":\"center\",\"width\":\"33%\"} -->\n<div class=\"wp-block-column is-vertically-aligned-center\" style=\"flex-basis:33%\"><!-- wp:spacer {\"height\":\"2vw\"} -->\n<div style=\"height:2vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#000000\"},\"typography\":{\"fontSize\":\"17px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#000000;font-size:17px\">Undoubtedly we have no questions to ask which are unanswerable. We must trust the perfection of the creation so far, as to believe that whatever curiosity the order of things has awakened in our minds, the order of things can satisfy. Every man\'s condition is a solution in hieroglyphic to those inquiries he would put.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\";}i:10;O:8:\"stdClass\":7:{s:2:\"id\";i:192;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:37:\"Media and text with image on the left\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:554:\"\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile is-vertically-aligned-center\"><figure class=\"wp-block-media-text__media\"><img decoding=\"async\" src=\"https://s.w.org/images/core/5.8/architecture-04.jpg\" alt=\"Close-up, abstract view of architecture.\" /></figure><div class=\"wp-block-media-text__content\">\n<h3 class=\"wp-block-heading has-text-align-center has-text-color\" style=\"color:#000000\"><strong>Open Spaces</strong></h3>\n\n\n\n<p class=\"has-text-align-center has-extra-small-font-size\"><a href=\"#\">See case study ↗</a></p>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:66:\"Media and text block with image to the left and text to the right.\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:43:\"core/heading,core/media-text,core/paragraph\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:844:\"<!-- wp:media-text {\"align\":\"full\",\"mediaType\":\"image\",\"verticalAlignment\":\"center\"} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile is-vertically-aligned-center\"><figure class=\"wp-block-media-text__media\"><img src=\"https://s.w.org/images/core/5.8/architecture-04.jpg\" alt=\"Close-up, abstract view of architecture.\" /></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":3,\"style\":{\"color\":{\"text\":\"#000000\"}}} -->\n<h3 class=\"wp-block-heading has-text-align-center has-text-color\" style=\"color:#000000\"><strong>Open Spaces</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"extra-small\"} -->\n<p class=\"has-text-align-center has-extra-small-font-size\"><a href=\"#\">See case study ↗</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\";}i:11;O:8:\"stdClass\":7:{s:2:\"id\";i:185;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:35:\"Large header with left-aligned text\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:1320:\"\n<div class=\"wp-block-cover alignfull\" style=\"min-height:800px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-60 has-background-dim\"></span><img decoding=\"async\" class=\"wp-block-cover__image-background\" alt=\"\" src=\"https://s.w.org/images/core/5.8/forest.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow\">\n<h2 class=\"wp-block-heading alignwide has-text-color\" style=\"color:#ffe074;font-size:64px\">Forest.</h2>\n\n\n\n<div class=\"wp-block-columns alignwide is-layout-flex wp-container-57 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\" style=\"flex-basis:55%\">\n<div style=\"height:330px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p class=\"has-text-color\" style=\"color:#ffe074;font-size:12px;line-height:1.3\"><em>Even a child knows how valuable the forest is. The fresh, breathtaking smell of trees. Echoing birds flying above that dense magnitude. A stable climate, a sustainable diverse life and a source of culture. Yet, forests and other ecosystems hang in the balance, threatened to become croplands, pasture, and plantations.</em></p>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\"></div>\n</div>\n</div></div>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:0:\"\";s:16:\"wpop_description\";s:29:\"Cover image with quote on top\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:0:{}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:75:\"core/column,core/columns,core/cover,core/heading,core/paragraph,core/spacer\";}s:14:\"category_slugs\";a:2:{i:0;s:6:\"banner\";i:1;s:8:\"featured\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:1698:\"<!-- wp:cover {\"url\":\"https://s.w.org/images/core/5.8/forest.jpg\",\"dimRatio\":60,\"minHeight\":800,\"align\":\"full\"} -->\n<div class=\"wp-block-cover alignfull\" style=\"min-height:800px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-60 has-background-dim\"></span><img class=\"wp-block-cover__image-background\" alt=\"\" src=\"https://s.w.org/images/core/5.8/forest.jpg\" data-object-fit=\"cover\" /><div class=\"wp-block-cover__inner-container\"><!-- wp:heading {\"align\":\"wide\",\"style\":{\"color\":{\"text\":\"#ffe074\"},\"typography\":{\"fontSize\":\"64px\"}}} -->\n<h2 class=\"wp-block-heading alignwide has-text-color\" style=\"color:#ffe074;font-size:64px\">Forest.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column {\"width\":\"55%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:55%\"><!-- wp:spacer {\"height\":\"330px\"} -->\n<div style=\"height:330px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:paragraph {\"style\":{\"color\":{\"text\":\"#ffe074\"},\"typography\":{\"lineHeight\":\"1.3\",\"fontSize\":\"12px\"}}} -->\n<p class=\"has-text-color\" style=\"color:#ffe074;font-size:12px;line-height:1.3\"><em>Even a child knows how valuable the forest is. The fresh, breathtaking smell of trees. Echoing birds flying above that dense magnitude. A stable climate, a sustainable diverse life and a source of culture. Yet, forests and other ecosystems hang in the balance, threatened to become croplands, pasture, and plantations.</em></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div></div>\n<!-- /wp:cover -->\";}i:12;O:8:\"stdClass\":7:{s:2:\"id\";i:184;s:5:\"title\";O:8:\"stdClass\":1:{s:8:\"rendered\";s:7:\"Heading\";}s:7:\"content\";O:8:\"stdClass\":2:{s:8:\"rendered\";s:526:\"\n<h2 class=\"alignwide wp-block-heading\" id=\"we-re-a-studio-in-berlin-with-an-international-practice-in-architecture-urban-planning-and-interior-design-we-believe-in-sharing-knowledge-and-promoting-dialogue-to-increase-the-creative-potential-of-collaboration\" style=\"font-size:48px;line-height:1.1\">We&#8217;re a studio in Berlin with an international practice in architecture, urban planning and interior design. We believe in sharing knowledge and promoting dialogue to increase the creative potential of collaboration.</h2>\n\";s:9:\"protected\";b:0;}s:4:\"meta\";O:8:\"stdClass\":7:{s:13:\"wpop_keywords\";s:17:\"large text, title\";s:16:\"wpop_description\";s:12:\"Heading text\";s:19:\"wpop_viewport_width\";i:1200;s:16:\"wpop_block_types\";a:1:{i:0;s:12:\"core/heading\";}s:11:\"wpop_locale\";s:5:\"en_US\";s:15:\"wpop_wp_version\";s:0:\"\";s:25:\"wpop_contains_block_types\";s:12:\"core/heading\";}s:14:\"category_slugs\";a:2:{i:0;s:8:\"featured\";i:1;s:4:\"text\";}s:13:\"keyword_slugs\";a:2:{i:0;s:4:\"core\";i:1;s:8:\"featured\";}s:15:\"pattern_content\";s:621:\"<!-- wp:heading {\"align\":\"wide\",\"style\":{\"typography\":{\"fontSize\":\"48px\",\"lineHeight\":\"1.1\"}}} -->\n<h2 class=\"alignwide\" id=\"we-re-a-studio-in-berlin-with-an-international-practice-in-architecture-urban-planning-and-interior-design-we-believe-in-sharing-knowledge-and-promoting-dialogue-to-increase-the-creative-potential-of-collaboration\" style=\"font-size:48px;line-height:1.1\">We\'re a studio in Berlin with an international practice in architecture, urban planning and interior design. We believe in sharing knowledge and promoting dialogue to increase the creative potential of collaboration.</h2>\n<!-- /wp:heading -->\";}}','no');
INSERT INTO `wp_options` VALUES (443,'_transient_doing_cron','1700431261.0630469322204589843750','yes');
INSERT INTO `wp_options` VALUES (444,'_transient_timeout_tsk_attachment_count','1700517665','no');
INSERT INTO `wp_options` VALUES (445,'_transient_tsk_attachment_count','14','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=464 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (1,2,'_wp_page_template','default');
INSERT INTO `wp_postmeta` VALUES (2,3,'_wp_page_template','default');
INSERT INTO `wp_postmeta` VALUES (3,10,'origin','theme');
INSERT INTO `wp_postmeta` VALUES (4,12,'origin','theme');
INSERT INTO `wp_postmeta` VALUES (5,15,'_wp_attached_file','2023/11/kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077.jpg');
INSERT INTO `wp_postmeta` VALUES (6,15,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:900;s:6:\"height\";i:520;s:4:\"file\";s:94:\"2023/11/kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077.jpg\";s:8:\"filesize\";i:35410;s:5:\"sizes\";a:3:{s:6:\"medium\";a:5:{s:4:\"file\";s:94:\"kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";s:8:\"filesize\";i:10730;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:94:\"kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";s:8:\"filesize\";i:6031;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:94:\"kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-768x444.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:444;s:9:\"mime-type\";s:10:\"image/jpeg\";s:8:\"filesize\";i:32503;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (7,16,'_wp_attached_file','2023/11/kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1.jpg');
INSERT INTO `wp_postmeta` VALUES (8,16,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:900;s:6:\"height\";i:520;s:4:\"file\";s:96:\"2023/11/kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1.jpg\";s:8:\"filesize\";i:35410;s:5:\"sizes\";a:3:{s:6:\"medium\";a:5:{s:4:\"file\";s:96:\"kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1-300x173.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:10:\"image/jpeg\";s:8:\"filesize\";i:10730;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:96:\"kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";s:8:\"filesize\";i:6031;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:96:\"kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1-768x444.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:444;s:9:\"mime-type\";s:10:\"image/jpeg\";s:8:\"filesize\";i:32503;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (9,18,'_wp_attached_file','2023/11/python.png');
INSERT INTO `wp_postmeta` VALUES (10,18,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:2000;s:6:\"height\";i:2000;s:4:\"file\";s:18:\"2023/11/python.png\";s:8:\"filesize\";i:187940;s:5:\"sizes\";a:5:{s:6:\"medium\";a:5:{s:4:\"file\";s:18:\"python-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:25597;}s:5:\"large\";a:5:{s:4:\"file\";s:20:\"python-1024x1024.png\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:99394;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:18:\"python-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:12274;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:18:\"python-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:71824;}s:9:\"1536x1536\";a:5:{s:4:\"file\";s:20:\"python-1536x1536.png\";s:5:\"width\";i:1536;s:6:\"height\";i:1536;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:166835;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (11,19,'_wp_attached_file','2023/11/c.png');
INSERT INTO `wp_postmeta` VALUES (12,19,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:4:\"file\";s:13:\"2023/11/c.png\";s:8:\"filesize\";i:348529;s:5:\"sizes\";a:3:{s:6:\"medium\";a:5:{s:4:\"file\";s:13:\"c-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:26649;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:13:\"c-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:10848;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:13:\"c-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:100014;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (13,20,'_wp_attached_file','2023/11/java.png');
INSERT INTO `wp_postmeta` VALUES (14,20,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:1280;s:6:\"height\";i:1280;s:4:\"file\";s:16:\"2023/11/java.png\";s:8:\"filesize\";i:88175;s:5:\"sizes\";a:4:{s:6:\"medium\";a:5:{s:4:\"file\";s:16:\"java-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:15678;}s:5:\"large\";a:5:{s:4:\"file\";s:18:\"java-1024x1024.png\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:68213;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:16:\"java-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:7052;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:16:\"java-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:47492;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (15,21,'_wp_attached_file','2023/11/png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template.png');
INSERT INTO `wp_postmeta` VALUES (16,21,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:900;s:6:\"height\";i:900;s:4:\"file\";s:140:\"2023/11/png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template.png\";s:8:\"filesize\";i:11054;s:5:\"sizes\";a:3:{s:6:\"medium\";a:5:{s:4:\"file\";s:140:\"png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:21196;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:140:\"png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:8411;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:140:\"png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:73050;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (17,22,'_wp_attached_file','2023/11/png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue.png');
INSERT INTO `wp_postmeta` VALUES (18,22,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:920;s:6:\"height\";i:920;s:4:\"file\";s:149:\"2023/11/png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue.png\";s:8:\"filesize\";i:11355;s:5:\"sizes\";a:3:{s:6:\"medium\";a:5:{s:4:\"file\";s:149:\"png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:27586;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:149:\"png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:11047;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:149:\"png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:76608;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (19,23,'origin','theme');
INSERT INTO `wp_postmeta` VALUES (20,25,'_wp_attached_file','2023/11/Python_logo_icon.png');
INSERT INTO `wp_postmeta` VALUES (21,25,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:5000;s:6:\"height\";i:4981;s:4:\"file\";s:28:\"2023/11/Python_logo_icon.png\";s:8:\"filesize\";i:830942;s:5:\"sizes\";a:6:{s:6:\"medium\";a:5:{s:4:\"file\";s:28:\"Python_logo_icon-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:12394;}s:5:\"large\";a:5:{s:4:\"file\";s:30:\"Python_logo_icon-1024x1020.png\";s:5:\"width\";i:1024;s:6:\"height\";i:1020;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:64550;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:28:\"Python_logo_icon-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:5519;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:28:\"Python_logo_icon-768x765.png\";s:5:\"width\";i:768;s:6:\"height\";i:765;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:44331;}s:9:\"1536x1536\";a:5:{s:4:\"file\";s:30:\"Python_logo_icon-1536x1530.png\";s:5:\"width\";i:1536;s:6:\"height\";i:1530;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:131306;}s:9:\"2048x2048\";a:5:{s:4:\"file\";s:30:\"Python_logo_icon-2048x2040.png\";s:5:\"width\";i:2048;s:6:\"height\";i:2040;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:191819;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (22,29,'_wp_attached_file','2023/11/Untitled16_20231114161848.png');
INSERT INTO `wp_postmeta` VALUES (23,29,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:768;s:6:\"height\";i:768;s:4:\"file\";s:37:\"2023/11/Untitled16_20231114161848.png\";s:8:\"filesize\";i:24745;s:5:\"sizes\";a:2:{s:6:\"medium\";a:5:{s:4:\"file\";s:37:\"Untitled16_20231114161848-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:8421;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:37:\"Untitled16_20231114161848-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:3769;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (24,31,'_wp_attached_file','2023/11/Untitled15_20231114161014.png');
INSERT INTO `wp_postmeta` VALUES (25,31,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:768;s:6:\"height\";i:768;s:4:\"file\";s:37:\"2023/11/Untitled15_20231114161014.png\";s:8:\"filesize\";i:55892;s:5:\"sizes\";a:2:{s:6:\"medium\";a:5:{s:4:\"file\";s:37:\"Untitled15_20231114161014-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:17548;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:37:\"Untitled15_20231114161014-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:7700;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (26,32,'_wp_attached_file','2023/11/Untitled15_20231114162359.png');
INSERT INTO `wp_postmeta` VALUES (27,32,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:768;s:6:\"height\";i:768;s:4:\"file\";s:37:\"2023/11/Untitled15_20231114162359.png\";s:8:\"filesize\";i:41398;s:5:\"sizes\";a:2:{s:6:\"medium\";a:5:{s:4:\"file\";s:37:\"Untitled15_20231114162359-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:10130;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:37:\"Untitled15_20231114162359-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:4483;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (28,33,'_wp_attached_file','2023/11/Untitled15_20231114162509.png');
INSERT INTO `wp_postmeta` VALUES (29,33,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:768;s:6:\"height\";i:768;s:4:\"file\";s:37:\"2023/11/Untitled15_20231114162509.png\";s:8:\"filesize\";i:30845;s:5:\"sizes\";a:2:{s:6:\"medium\";a:5:{s:4:\"file\";s:37:\"Untitled15_20231114162509-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:7572;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:37:\"Untitled15_20231114162509-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:3381;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (30,28,'_edit_lock','1700317157:1');
INSERT INTO `wp_postmeta` VALUES (31,37,'_wp_attached_file','2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png');
INSERT INTO `wp_postmeta` VALUES (32,37,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:695;s:6:\"height\";i:768;s:4:\"file\";s:44:\"2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\";s:8:\"filesize\";i:35773;s:5:\"sizes\";a:2:{s:6:\"medium\";a:5:{s:4:\"file\";s:44:\"6e46e7dbe2bb73dacc055e5dbd85c3ad-271x300.png\";s:5:\"width\";i:271;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:16998;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:44:\"6e46e7dbe2bb73dacc055e5dbd85c3ad-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:8254;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (33,38,'_wp_attached_file','2023/11/ISO_C_Logo.svg_.png');
INSERT INTO `wp_postmeta` VALUES (34,38,'_wp_attachment_metadata','a:6:{s:5:\"width\";i:911;s:6:\"height\";i:1024;s:4:\"file\";s:27:\"2023/11/ISO_C_Logo.svg_.png\";s:8:\"filesize\";i:50797;s:5:\"sizes\";a:3:{s:6:\"medium\";a:5:{s:4:\"file\";s:27:\"ISO_C_Logo.svg_-267x300.png\";s:5:\"width\";i:267;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:17289;}s:9:\"thumbnail\";a:5:{s:4:\"file\";s:27:\"ISO_C_Logo.svg_-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:8735;}s:12:\"medium_large\";a:5:{s:4:\"file\";s:27:\"ISO_C_Logo.svg_-768x863.png\";s:5:\"width\";i:768;s:6:\"height\";i:863;s:9:\"mime-type\";s:9:\"image/png\";s:8:\"filesize\";i:57146;}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (35,40,'origin','theme');
INSERT INTO `wp_postmeta` VALUES (36,1,'_edit_lock','1700045074:1');
INSERT INTO `wp_postmeta` VALUES (37,1,'_wp_trash_meta_status','publish');
INSERT INTO `wp_postmeta` VALUES (38,1,'_wp_trash_meta_time','1700045219');
INSERT INTO `wp_postmeta` VALUES (39,1,'_wp_desired_post_slug','hello-world');
INSERT INTO `wp_postmeta` VALUES (40,1,'_wp_trash_meta_comments_status','a:1:{i:1;s:1:\"1\";}');
INSERT INTO `wp_postmeta` VALUES (41,44,'_edit_lock','1700045102:1');
INSERT INTO `wp_postmeta` VALUES (42,45,'_wp_trash_meta_status','draft');
INSERT INTO `wp_postmeta` VALUES (43,45,'_wp_trash_meta_time','1700046012');
INSERT INTO `wp_postmeta` VALUES (44,45,'_wp_desired_post_slug','python-course');
INSERT INTO `wp_postmeta` VALUES (45,75,'_edit_lock','1700047677:1');
INSERT INTO `wp_postmeta` VALUES (46,101,'_wp_trash_meta_status','draft');
INSERT INTO `wp_postmeta` VALUES (47,101,'_wp_trash_meta_time','1700151508');
INSERT INTO `wp_postmeta` VALUES (48,101,'_wp_desired_post_slug','login-page');
INSERT INTO `wp_postmeta` VALUES (49,103,'_edit_lock','1700151373:1');
INSERT INTO `wp_postmeta` VALUES (50,104,'_wp_trash_meta_status','draft');
INSERT INTO `wp_postmeta` VALUES (51,104,'_wp_trash_meta_time','1700151542');
INSERT INTO `wp_postmeta` VALUES (52,104,'_wp_desired_post_slug','login');
INSERT INTO `wp_postmeta` VALUES (53,106,'_edit_lock','1700151527:1');
INSERT INTO `wp_postmeta` VALUES (54,106,'_wp_trash_meta_status','draft');
INSERT INTO `wp_postmeta` VALUES (55,106,'_wp_trash_meta_time','1700151681');
INSERT INTO `wp_postmeta` VALUES (56,106,'_wp_desired_post_slug','login-signup');
INSERT INTO `wp_postmeta` VALUES (57,76,'_edit_lock','1700322471:1');
INSERT INTO `wp_postmeta` VALUES (59,111,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (60,111,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (61,111,'_menu_item_object_id','111');
INSERT INTO `wp_postmeta` VALUES (62,111,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (63,111,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (64,111,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (65,111,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (66,111,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (67,111,'_menu_item_orphaned','1700151898');
INSERT INTO `wp_postmeta` VALUES (68,112,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (69,112,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (70,112,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (71,112,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (72,112,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (73,112,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (74,112,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (75,112,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (76,112,'_menu_item_orphaned','1700151898');
INSERT INTO `wp_postmeta` VALUES (77,113,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (78,113,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (79,113,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (80,113,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (81,113,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (82,113,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (83,113,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (84,113,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (85,113,'_menu_item_orphaned','1700151898');
INSERT INTO `wp_postmeta` VALUES (86,114,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (87,114,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (88,114,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (89,114,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (90,114,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (91,114,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (92,114,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (93,114,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (94,114,'_menu_item_orphaned','1700151898');
INSERT INTO `wp_postmeta` VALUES (95,115,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (96,115,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (97,115,'_menu_item_object_id','115');
INSERT INTO `wp_postmeta` VALUES (98,115,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (99,115,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (100,115,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (101,115,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (102,115,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (103,115,'_menu_item_orphaned','1700151931');
INSERT INTO `wp_postmeta` VALUES (104,116,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (105,116,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (106,116,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (107,116,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (108,116,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (109,116,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (110,116,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (111,116,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (112,116,'_menu_item_orphaned','1700151931');
INSERT INTO `wp_postmeta` VALUES (113,117,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (114,117,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (115,117,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (116,117,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (117,117,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (118,117,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (119,117,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (120,117,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (121,117,'_menu_item_orphaned','1700151931');
INSERT INTO `wp_postmeta` VALUES (122,118,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (123,118,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (124,118,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (125,118,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (126,118,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (127,118,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (128,118,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (129,118,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (130,118,'_menu_item_orphaned','1700151931');
INSERT INTO `wp_postmeta` VALUES (131,121,'_edit_lock','1700317504:1');
INSERT INTO `wp_postmeta` VALUES (132,119,'_edit_lock','1700317501:1');
INSERT INTO `wp_postmeta` VALUES (134,125,'_edit_lock','1700317508:1');
INSERT INTO `wp_postmeta` VALUES (135,132,'is_wp_suggestion','');
INSERT INTO `wp_postmeta` VALUES (136,76,'_edit_last','1');
INSERT INTO `wp_postmeta` VALUES (137,76,'_wp_page_template','wp-custom-template-courses');
INSERT INTO `wp_postmeta` VALUES (138,143,'is_wp_suggestion','');
INSERT INTO `wp_postmeta` VALUES (139,119,'_edit_last','1');
INSERT INTO `wp_postmeta` VALUES (140,119,'_wp_page_template','wp-custom-template-c-course');
INSERT INTO `wp_postmeta` VALUES (141,151,'is_wp_suggestion','');
INSERT INTO `wp_postmeta` VALUES (142,121,'_edit_last','1');
INSERT INTO `wp_postmeta` VALUES (143,121,'_wp_page_template','wp-custom-template-c-course-2');
INSERT INTO `wp_postmeta` VALUES (144,154,'is_wp_suggestion','');
INSERT INTO `wp_postmeta` VALUES (145,125,'_edit_last','1');
INSERT INTO `wp_postmeta` VALUES (146,125,'_wp_page_template','wp-custom-template-java-course');
INSERT INTO `wp_postmeta` VALUES (147,157,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (148,157,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (149,157,'_menu_item_object_id','157');
INSERT INTO `wp_postmeta` VALUES (150,157,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (151,157,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (152,157,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (153,157,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (154,157,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (155,157,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (156,158,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (157,158,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (158,158,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (159,158,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (160,158,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (161,158,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (162,158,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (163,158,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (164,158,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (165,159,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (166,159,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (167,159,'_menu_item_object_id','119');
INSERT INTO `wp_postmeta` VALUES (168,159,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (169,159,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (170,159,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (171,159,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (172,159,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (173,159,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (174,160,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (175,160,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (176,160,'_menu_item_object_id','121');
INSERT INTO `wp_postmeta` VALUES (177,160,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (178,160,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (179,160,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (180,160,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (181,160,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (182,160,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (183,161,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (184,161,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (185,161,'_menu_item_object_id','125');
INSERT INTO `wp_postmeta` VALUES (186,161,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (187,161,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (188,161,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (189,161,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (190,161,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (191,161,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (192,162,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (193,162,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (194,162,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (195,162,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (196,162,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (197,162,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (198,162,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (199,162,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (200,162,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (201,163,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (202,163,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (203,163,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (204,163,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (205,163,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (206,163,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (207,163,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (208,163,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (209,163,'_menu_item_orphaned','1700242260');
INSERT INTO `wp_postmeta` VALUES (210,164,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (211,164,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (212,164,'_menu_item_object_id','164');
INSERT INTO `wp_postmeta` VALUES (213,164,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (214,164,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (215,164,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (216,164,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (217,164,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (218,164,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (219,165,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (220,165,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (221,165,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (222,165,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (223,165,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (224,165,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (225,165,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (226,165,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (227,165,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (228,166,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (229,166,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (230,166,'_menu_item_object_id','119');
INSERT INTO `wp_postmeta` VALUES (231,166,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (232,166,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (233,166,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (234,166,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (235,166,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (236,166,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (237,167,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (238,167,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (239,167,'_menu_item_object_id','121');
INSERT INTO `wp_postmeta` VALUES (240,167,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (241,167,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (242,167,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (243,167,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (244,167,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (245,167,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (246,168,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (247,168,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (248,168,'_menu_item_object_id','125');
INSERT INTO `wp_postmeta` VALUES (249,168,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (250,168,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (251,168,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (252,168,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (253,168,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (254,168,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (255,169,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (256,169,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (257,169,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (258,169,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (259,169,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (260,169,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (261,169,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (262,169,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (263,169,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (264,170,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (265,170,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (266,170,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (267,170,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (268,170,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (269,170,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (270,170,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (271,170,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (272,170,'_menu_item_orphaned','1700242292');
INSERT INTO `wp_postmeta` VALUES (275,304,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (276,304,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (277,304,'_menu_item_object_id','304');
INSERT INTO `wp_postmeta` VALUES (278,304,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (279,304,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (280,304,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (281,304,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (282,304,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (283,304,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (284,305,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (285,305,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (286,305,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (287,305,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (288,305,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (289,305,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (290,305,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (291,305,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (292,305,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (293,306,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (294,306,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (295,306,'_menu_item_object_id','119');
INSERT INTO `wp_postmeta` VALUES (296,306,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (297,306,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (298,306,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (299,306,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (300,306,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (301,306,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (302,307,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (303,307,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (304,307,'_menu_item_object_id','121');
INSERT INTO `wp_postmeta` VALUES (305,307,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (306,307,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (307,307,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (308,307,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (309,307,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (310,307,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (311,308,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (312,308,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (313,308,'_menu_item_object_id','125');
INSERT INTO `wp_postmeta` VALUES (314,308,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (315,308,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (316,308,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (317,308,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (318,308,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (319,308,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (320,309,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (321,309,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (322,309,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (323,309,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (324,309,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (325,309,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (326,309,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (327,309,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (328,309,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (329,310,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (330,310,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (331,310,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (332,310,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (333,310,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (334,310,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (335,310,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (336,310,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (337,310,'_menu_item_orphaned','1700338525');
INSERT INTO `wp_postmeta` VALUES (338,311,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (339,311,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (340,311,'_menu_item_object_id','311');
INSERT INTO `wp_postmeta` VALUES (341,311,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (342,311,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (343,311,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (344,311,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (345,311,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (346,311,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (347,312,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (348,312,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (349,312,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (350,312,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (351,312,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (352,312,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (353,312,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (354,312,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (355,312,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (356,313,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (357,313,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (358,313,'_menu_item_object_id','119');
INSERT INTO `wp_postmeta` VALUES (359,313,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (360,313,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (361,313,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (362,313,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (363,313,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (364,313,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (365,314,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (366,314,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (367,314,'_menu_item_object_id','121');
INSERT INTO `wp_postmeta` VALUES (368,314,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (369,314,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (370,314,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (371,314,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (372,314,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (373,314,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (374,315,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (375,315,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (376,315,'_menu_item_object_id','125');
INSERT INTO `wp_postmeta` VALUES (377,315,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (378,315,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (379,315,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (380,315,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (381,315,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (382,315,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (383,316,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (384,316,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (385,316,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (386,316,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (387,316,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (388,316,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (389,316,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (390,316,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (391,316,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (392,317,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (393,317,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (394,317,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (395,317,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (396,317,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (397,317,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (398,317,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (399,317,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (400,317,'_menu_item_orphaned','1700338552');
INSERT INTO `wp_postmeta` VALUES (401,318,'_menu_item_type','custom');
INSERT INTO `wp_postmeta` VALUES (402,318,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (403,318,'_menu_item_object_id','318');
INSERT INTO `wp_postmeta` VALUES (404,318,'_menu_item_object','custom');
INSERT INTO `wp_postmeta` VALUES (405,318,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (406,318,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (407,318,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (408,318,'_menu_item_url','https://simplelearn.local/');
INSERT INTO `wp_postmeta` VALUES (409,318,'_menu_item_orphaned','1700338554');
INSERT INTO `wp_postmeta` VALUES (410,319,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (411,319,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (412,319,'_menu_item_object_id','28');
INSERT INTO `wp_postmeta` VALUES (413,319,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (414,319,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (415,319,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (416,319,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (417,319,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (418,319,'_menu_item_orphaned','1700338554');
INSERT INTO `wp_postmeta` VALUES (419,320,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (420,320,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (421,320,'_menu_item_object_id','119');
INSERT INTO `wp_postmeta` VALUES (422,320,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (423,320,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (424,320,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (425,320,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (426,320,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (427,320,'_menu_item_orphaned','1700338554');
INSERT INTO `wp_postmeta` VALUES (428,321,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (429,321,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (430,321,'_menu_item_object_id','121');
INSERT INTO `wp_postmeta` VALUES (431,321,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (432,321,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (433,321,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (434,321,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (435,321,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (436,321,'_menu_item_orphaned','1700338554');
INSERT INTO `wp_postmeta` VALUES (437,322,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (438,322,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (439,322,'_menu_item_object_id','125');
INSERT INTO `wp_postmeta` VALUES (440,322,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (441,322,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (442,322,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (443,322,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (444,322,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (445,322,'_menu_item_orphaned','1700338554');
INSERT INTO `wp_postmeta` VALUES (446,323,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (447,323,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (448,323,'_menu_item_object_id','76');
INSERT INTO `wp_postmeta` VALUES (449,323,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (450,323,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (451,323,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (452,323,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (453,323,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (454,323,'_menu_item_orphaned','1700338554');
INSERT INTO `wp_postmeta` VALUES (455,324,'_menu_item_type','post_type');
INSERT INTO `wp_postmeta` VALUES (456,324,'_menu_item_menu_item_parent','0');
INSERT INTO `wp_postmeta` VALUES (457,324,'_menu_item_object_id','2');
INSERT INTO `wp_postmeta` VALUES (458,324,'_menu_item_object','page');
INSERT INTO `wp_postmeta` VALUES (459,324,'_menu_item_target','');
INSERT INTO `wp_postmeta` VALUES (460,324,'_menu_item_classes','a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (461,324,'_menu_item_xfn','');
INSERT INTO `wp_postmeta` VALUES (462,324,'_menu_item_url','');
INSERT INTO `wp_postmeta` VALUES (463,324,'_menu_item_orphaned','1700338554');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=325 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (1,1,'2023-11-14 13:16:36','2023-11-14 13:16:36','<!-- wp:paragraph -->\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\n<!-- /wp:paragraph -->','Hello world!','','trash','open','open','','hello-world__trashed','','','2023-11-15 10:46:59','2023-11-15 10:46:59','',0,'http://simplelearn.local/?p=1',0,'post','',1);
INSERT INTO `wp_posts` VALUES (2,1,'2023-11-14 13:16:36','2023-11-14 13:16:36','<!-- wp:paragraph -->\n<p>This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like piña coladas. (And gettin\' caught in the rain.)</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>...or something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>As a new WordPress user, you should go to <a href=\"http://simplelearn.local/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!</p>\n<!-- /wp:paragraph -->','Sample Page','','publish','closed','open','','sample-page','','','2023-11-18 10:39:42','2023-11-18 10:39:42','',0,'http://simplelearn.local/?page_id=2',0,'page','',0);
INSERT INTO `wp_posts` VALUES (3,1,'2023-11-14 13:16:36','2023-11-14 13:16:36','<!-- wp:heading --><h2>Who we are</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>Our website address is: http://simplelearn.local.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Comments</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Media</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Cookies</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Embedded content from other websites</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Who we share your data with</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>If you request a password reset, your IP address will be included in the reset email.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>How long we retain your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What rights you have over your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Where your data is sent</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">Suggested text: </strong>Visitor comments may be checked through an automated spam detection service.</p><!-- /wp:paragraph -->','Privacy Policy','','draft','closed','open','','privacy-policy','','','2023-11-14 13:16:36','2023-11-14 13:16:36','',0,'http://simplelearn.local/?page_id=3',0,'page','',0);
INSERT INTO `wp_posts` VALUES (5,1,'2023-11-14 13:17:30','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2023-11-14 13:17:30','0000-00-00 00:00:00','',0,'http://simplelearn.local/?p=5',0,'post','',0);
INSERT INTO `wp_posts` VALUES (6,1,'2023-11-14 13:25:02','2023-11-14 13:25:02','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','publish','closed','closed','','wp-global-styles-raft','','','2023-11-18 19:59:04','2023-11-18 19:59:04','',0,'http://simplelearn.local/wp-global-styles-raft/',0,'wp_global_styles','',0);
INSERT INTO `wp_posts` VALUES (8,1,'2023-11-14 13:35:31','2023-11-14 13:35:31','{\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-14 13:35:31','2023-11-14 13:35:31','',6,'http://simplelearn.local/?p=8',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (9,1,'2023-11-14 13:39:08','2023-11-14 13:39:08','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"http://simplelearn.local/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"https://simplelearn.local/courses/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"right\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"github.com\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links -->','Navigation','','publish','closed','closed','','header-navigation-2','','','2023-11-15 11:42:45','2023-11-15 11:42:45','',0,'http://simplelearn.local/?p=9',0,'wp_navigation','',0);
INSERT INTO `wp_posts` VALUES (10,1,'2023-11-14 13:39:07','2023-11-14 13:39:07','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:image {\"align\":\"center\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Python Courses</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For novice programmers, just looking to start out their programming journey and learn to code.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">C/C++</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For intermediate programmers, looking to expand their knowledge and build high performance applications.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Java </a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For advanced programmers, looking to learn a high-level language and more about Object Orientation.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','publish','closed','closed','','front-page','','','2023-11-17 17:39:10','2023-11-17 17:39:10','',0,'http://simplelearn.local/front-page/',0,'wp_template','',0);
INSERT INTO `wp_posts` VALUES (11,1,'2023-11-14 13:39:07','2023-11-14 13:39:07','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-14 13:39:07','2023-11-14 13:39:07','',6,'http://simplelearn.local/?p=11',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (12,1,'2023-11-14 13:39:08','2023-11-14 13:39:08','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":55,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#292E29\"]}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','publish','closed','closed','','header','','','2023-11-18 20:12:37','2023-11-18 20:12:37','',0,'http://simplelearn.local/header/',0,'wp_template_part','',0);
INSERT INTO `wp_posts` VALUES (13,1,'2023-11-14 13:39:08','2023-11-14 13:39:08','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->','Header navigation 2','','inherit','closed','closed','','9-revision-v1','','','2023-11-14 13:39:08','2023-11-14 13:39:08','',9,'http://simplelearn.local/?p=13',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (14,1,'2023-11-14 13:47:15','2023-11-14 13:47:15','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">Our mission is to help novice developers learn code easier.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/shape-05.svg\" alt=\"Illustration\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/shape-06.svg\" alt=\"Illustration\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/shape-04.svg\" alt=\"Illustration\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Lorem ipsum sit dolor!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Lorem ipsum</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-14 13:47:15','2023-11-14 13:47:15','',10,'http://simplelearn.local/?p=14',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (15,1,'2023-11-14 13:49:18','2023-11-14 13:49:18','','kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077','','inherit','open','closed','','kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1-7494578715215330832077','','','2023-11-14 13:49:18','2023-11-14 13:49:18','',0,'http://simplelearn.local/wp-content/uploads/2023/11/kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077.jpg',0,'attachment','image/jpeg',0);
INSERT INTO `wp_posts` VALUES (16,1,'2023-11-14 13:49:52','2023-11-14 13:49:52','','kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1','','inherit','open','closed','','kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1-7494578715215330832077-1','','','2023-11-14 13:49:52','2023-11-14 13:49:52','',0,'http://simplelearn.local/wp-content/uploads/2023/11/kisspng-angle-text-symbol-brand-other-python-5ab0c09b32b4d1.7494578715215330832077-1.jpg',0,'attachment','image/jpeg',0);
INSERT INTO `wp_posts` VALUES (17,1,'2023-11-14 13:56:45','2023-11-14 13:56:45','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/shape-05.svg\" alt=\"Illustration\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/shape-06.svg\" alt=\"Illustration\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/shape-04.svg\" alt=\"Illustration\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your programming journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-14 13:56:45','2023-11-14 13:56:45','',10,'http://simplelearn.local/?p=17',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (18,1,'2023-11-14 14:01:19','2023-11-14 14:01:19','','python','','inherit','open','closed','','python','','','2023-11-14 14:01:19','2023-11-14 14:01:19','',0,'https://simplelearn.local/wp-content/uploads/2023/11/python.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (19,1,'2023-11-14 14:01:32','2023-11-14 14:01:32','','c','','inherit','open','closed','','c','','','2023-11-14 14:01:32','2023-11-14 14:01:32','',0,'https://simplelearn.local/wp-content/uploads/2023/11/c.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (20,1,'2023-11-14 14:01:39','2023-11-14 14:01:39','','java','','inherit','open','closed','','java','','','2023-11-14 14:01:39','2023-11-14 14:01:39','',0,'https://simplelearn.local/wp-content/uploads/2023/11/java.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (21,1,'2023-11-14 14:03:22','2023-11-14 14:03:22','','png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template','','inherit','open','closed','','png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template','','','2023-11-14 14:03:22','2023-11-14 14:03:22','',0,'https://simplelearn.local/wp-content/uploads/2023/11/png-clipart-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (22,1,'2023-11-14 14:04:01','2023-11-14 14:04:01','','png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue','','inherit','open','closed','','png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue','','','2023-11-14 14:04:01','2023-11-14 14:04:01','',0,'https://simplelearn.local/wp-content/uploads/2023/11/png-transparent-c-logo-the-c-programming-language-computer-icons-computer-programming-source-code-programming-miscellaneous-template-blue.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (23,1,'2023-11-14 14:05:06','2023-11-14 14:05:06','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"24px\",\"bottom\":\"24px\",\"right\":\"24px\",\"left\":\"24px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"textColor\":\"raft-fg\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-fg-color has-raft-bg-alt-background-color has-text-color has-background\" style=\"padding-top:24px;padding-right:24px;padding-bottom:24px;padding-left:24px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\">Copyright 2024 - P2019214 / P2020132</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"overlayMenu\":\"never\",\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}},\"fontSize\":\"small\"} -->\n<!-- wp:navigation-link {\"label\":\"Privacy Policy\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n<!-- /wp:navigation --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Footer','','publish','closed','closed','','footer','','','2023-11-14 14:12:36','2023-11-14 14:12:36','',0,'https://simplelearn.local/footer/',0,'wp_template_part','',0);
INSERT INTO `wp_posts` VALUES (24,1,'2023-11-14 14:05:06','2023-11-14 14:05:06','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-large size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/python-1024x1024.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"id\":19,\"width\":\"304px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:304px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image size-large size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-14 14:05:06','2023-11-14 14:05:06','',10,'https://simplelearn.local/?p=24',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (25,1,'2023-11-14 14:10:53','2023-11-14 14:10:53','','Python_logo_icon','','inherit','open','closed','','python_logo_icon','','','2023-11-14 14:10:53','2023-11-14 14:10:53','',0,'https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (26,1,'2023-11-14 14:12:36','2023-11-14 14:12:36','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"24px\",\"bottom\":\"24px\",\"right\":\"24px\",\"left\":\"24px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"textColor\":\"raft-fg\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-fg-color has-raft-bg-alt-background-color has-text-color has-background\" style=\"padding-top:24px;padding-right:24px;padding-bottom:24px;padding-left:24px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph {\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\">Copyright 2024 - P2019214 / P2020132</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"overlayMenu\":\"never\",\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}},\"fontSize\":\"small\"} -->\n<!-- wp:navigation-link {\"label\":\"Privacy Policy\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n<!-- /wp:navigation --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Footer','','inherit','closed','closed','','23-revision-v1','','','2023-11-14 14:12:36','2023-11-14 14:12:36','',23,'https://simplelearn.local/?p=26',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (27,1,'2023-11-14 14:12:36','2023-11-14 14:12:36','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-14 14:12:36','2023-11-14 14:12:36','',10,'https://simplelearn.local/?p=27',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (28,1,'2023-11-15 10:44:46','2023-11-15 10:44:46','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','publish','closed','closed','','courses','','','2023-11-18 14:31:36','2023-11-18 14:31:36','',0,'https://simplelearn.local/?page_id=28',0,'page','',0);
INSERT INTO `wp_posts` VALUES (29,1,'2023-11-14 14:19:58','2023-11-14 14:19:58','','Untitled16_20231114161848','','inherit','open','closed','','untitled16_20231114161848','','','2023-11-14 14:19:58','2023-11-14 14:19:58','',0,'https://simplelearn.local/wp-content/uploads/2023/11/Untitled16_20231114161848.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (30,1,'2023-11-14 14:21:53','2023-11-14 14:21:53','<!-- wp:social-link {\"url\":\"#\",\"service\":\"instagram\"} /-->','Github','','publish','closed','closed','','github','','','2023-11-14 14:21:53','2023-11-14 14:21:53','',0,'https://simplelearn.local/github/',0,'wp_template_part','',0);
INSERT INTO `wp_posts` VALUES (31,1,'2023-11-14 14:22:30','2023-11-14 14:22:30','','Untitled15_20231114161014','','inherit','open','closed','','untitled15_20231114161014','','','2023-11-14 14:22:30','2023-11-14 14:22:30','',0,'https://simplelearn.local/wp-content/uploads/2023/11/Untitled15_20231114161014.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (32,1,'2023-11-14 14:24:36','2023-11-14 14:24:36','','Untitled15_20231114162359','','inherit','open','closed','','untitled15_20231114162359','','','2023-11-14 14:24:36','2023-11-14 14:24:36','',0,'https://simplelearn.local/wp-content/uploads/2023/11/Untitled15_20231114162359.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (33,1,'2023-11-14 14:25:42','2023-11-14 14:25:42','','Untitled15_20231114162509','','inherit','open','closed','','untitled15_20231114162509','','','2023-11-14 14:25:42','2023-11-14 14:25:42','',0,'https://simplelearn.local/wp-content/uploads/2023/11/Untitled15_20231114162509.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (34,1,'2023-11-14 14:26:44','2023-11-14 14:26:44','','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-14 14:26:44','2023-11-14 14:26:44','',28,'https://simplelearn.local/?p=34',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (35,1,'2023-11-14 14:26:44','2023-11-14 14:26:44','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"facebook\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"instagram\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-14 14:26:44','2023-11-14 14:26:44','',12,'https://simplelearn.local/?p=35',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (36,1,'2023-11-15 10:36:30','2023-11-15 10:36:30','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 10:36:30','2023-11-15 10:36:30','',12,'https://simplelearn.local/?p=36',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (37,1,'2023-11-15 10:39:30','2023-11-15 10:39:30','','6e46e7dbe2bb73dacc055e5dbd85c3ad','','inherit','open','closed','','6e46e7dbe2bb73dacc055e5dbd85c3ad','','','2023-11-15 10:39:30','2023-11-15 10:39:30','',0,'https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (38,1,'2023-11-15 10:39:36','2023-11-15 10:39:36','','ISO_C++_Logo.svg','','inherit','open','closed','','iso_c_logo-svg','','','2023-11-15 10:39:36','2023-11-15 10:39:36','',0,'https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png',0,'attachment','image/png',0);
INSERT INTO `wp_posts` VALUES (39,1,'2023-11-15 10:44:11','2023-11-15 10:44:11','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Programming Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 10:44:11','2023-11-15 10:44:11','',28,'https://simplelearn.local/?p=39',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (40,1,'2023-11-15 10:44:14','2023-11-15 10:44:14','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Pages','Display all static pages unless a custom template has been applied or a dedicated template exists.','publish','closed','closed','','page','','','2023-11-16 16:34:28','2023-11-16 16:34:28','',0,'https://simplelearn.local/page/',0,'wp_template','',0);
INSERT INTO `wp_posts` VALUES (41,1,'2023-11-15 10:44:29','2023-11-15 10:44:29','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 10:44:29','2023-11-15 10:44:29','',28,'https://simplelearn.local/?p=41',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (42,1,'2023-11-15 10:45:04','2023-11-15 10:45:04','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"https://simplelearn.local/courses/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->','Header navigation 2','','inherit','closed','closed','','9-revision-v1','','','2023-11-15 10:45:04','2023-11-15 10:45:04','',9,'https://simplelearn.local/?p=42',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (43,1,'2023-11-15 10:46:59','2023-11-15 10:46:59','<!-- wp:paragraph -->\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\n<!-- /wp:paragraph -->','Hello world!','','inherit','closed','closed','','1-revision-v1','','','2023-11-15 10:46:59','2023-11-15 10:46:59','',1,'https://simplelearn.local/?p=43',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (44,1,'2023-11-15 10:47:19','0000-00-00 00:00:00','','Auto Draft','','auto-draft','closed','closed','','','','','2023-11-15 10:47:19','0000-00-00 00:00:00','',0,'https://simplelearn.local/?page_id=44',0,'page','',0);
INSERT INTO `wp_posts` VALUES (45,1,'2023-11-15 11:00:12','2023-11-15 11:00:12','','Python Course','','trash','closed','closed','','python-course__trashed','','','2023-11-15 11:00:12','2023-11-15 11:00:12','',0,'https://simplelearn.local/?page_id=45',0,'page','',0);
INSERT INTO `wp_posts` VALUES (46,1,'2023-11-15 11:00:12','2023-11-15 11:00:12','','Python Course','','inherit','closed','closed','','45-revision-v1','','','2023-11-15 11:00:12','2023-11-15 11:00:12','',45,'https://simplelearn.local/?p=46',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (47,1,'2023-11-15 11:02:57','2023-11-15 11:02:57','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"SimpleLearn Slogan\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses Offered\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"Sign up / Log in Button\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:02:57','2023-11-15 11:02:57','',10,'https://simplelearn.local/?p=47',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (49,1,'2023-11-15 11:05:48','2023-11-15 11:05:48','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 11:05:48','2023-11-15 11:05:48','',28,'https://simplelearn.local/?p=49',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (50,1,'2023-11-15 11:07:49','2023-11-15 11:07:49','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"http://simplelearn.local/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"https://simplelearn.local/courses/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->','Header navigation 2','','inherit','closed','closed','','9-revision-v1','','','2023-11-15 11:07:49','2023-11-15 11:07:49','',9,'https://simplelearn.local/?p=50',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (51,1,'2023-11-15 11:10:57','2023-11-15 11:10:57','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"http://simplelearn.local/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"https://simplelearn.local/courses/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->','Navigation','','inherit','closed','closed','','9-revision-v1','','','2023-11-15 11:10:57','2023-11-15 11:10:57','',9,'https://simplelearn.local/?p=51',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (52,1,'2023-11-15 11:11:34','2023-11-15 11:11:34','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:11:34','2023-11-15 11:11:34','',6,'https://simplelearn.local/?p=52',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (53,1,'2023-11-15 11:11:53','2023-11-15 11:11:53','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#232323\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#5C40CA\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:11:53','2023-11-15 11:11:53','',6,'https://simplelearn.local/?p=53',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (54,1,'2023-11-15 11:12:21','2023-11-15 11:12:21','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFFFFF\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.05)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#f6f6f6\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#202220\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:12:21','2023-11-15 11:12:21','',6,'https://simplelearn.local/?p=54',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (55,1,'2023-11-15 11:12:27','2023-11-15 11:12:27','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:12:27','2023-11-15 11:12:27','',6,'https://simplelearn.local/?p=55',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (56,1,'2023-11-15 11:14:32','2023-11-15 11:14:32','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:14:32','2023-11-15 11:14:32','',6,'https://simplelearn.local/?p=56',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (57,1,'2023-11-15 11:15:05','2023-11-15 11:15:05','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--figtree)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFF0E9\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#2A359E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:05','2023-11-15 11:15:05','',6,'https://simplelearn.local/?p=57',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (58,1,'2023-11-15 11:15:17','2023-11-15 11:15:17','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFFFFF\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.05)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#f6f6f6\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#202220\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:17','2023-11-15 11:15:17','',6,'https://simplelearn.local/?p=58',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (59,1,'2023-11-15 11:15:27','2023-11-15 11:15:27','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--figtree)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFF0E9\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#2A359E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:27','2023-11-15 11:15:27','',6,'https://simplelearn.local/?p=59',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (60,1,'2023-11-15 11:15:41','2023-11-15 11:15:41','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#1B1818\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.05)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#417E61\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:41','2023-11-15 11:15:41','',6,'https://simplelearn.local/?p=60',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (61,1,'2023-11-15 11:15:49','2023-11-15 11:15:49','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#232323\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#5C40CA\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:49','2023-11-15 11:15:49','',6,'https://simplelearn.local/?p=61',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (62,1,'2023-11-15 11:15:56','2023-11-15 11:15:56','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--source-serif-pro)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#DFE2ED\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202020\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#202020\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:56','2023-11-15 11:15:56','',6,'https://simplelearn.local/?p=62',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (63,1,'2023-11-15 11:15:59','2023-11-15 11:15:59','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--figtree)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFF0E9\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#2A359E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:15:59','2023-11-15 11:15:59','',6,'https://simplelearn.local/?p=63',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (64,1,'2023-11-15 11:16:04','2023-11-15 11:16:04','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:16:04','2023-11-15 11:16:04','',6,'https://simplelearn.local/?p=64',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (65,1,'2023-11-15 11:17:09','2023-11-15 11:17:09','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"https://github.com\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:17:09','2023-11-15 11:17:09','',12,'https://simplelearn.local/?p=65',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (66,1,'2023-11-15 11:19:02','2023-11-15 11:19:02','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:19:02','2023-11-15 11:19:02','',12,'https://simplelearn.local/?p=66',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (67,1,'2023-11-15 11:19:02','2023-11-15 11:19:02','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses Offered\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"Log in - Sign up\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:19:02','2023-11-15 11:19:02','',10,'https://simplelearn.local/?p=67',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (68,1,'2023-11-15 11:24:54','2023-11-15 11:24:54','{\"styles\":{\"color\":{\"gradient\":\"linear-gradient(253deg,rgb(0,135,242) 0%,rgb(131,61,196) 100%)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:24:54','2023-11-15 11:24:54','',6,'https://simplelearn.local/?p=68',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (69,1,'2023-11-15 11:25:58','2023-11-15 11:25:58','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"SimpleLearn Slogan\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"3vw\"} -->\n<div style=\"height:3vw\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"Login-Signup Redirect\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:25:58','2023-11-15 11:25:58','',10,'https://simplelearn.local/?p=69',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (70,1,'2023-11-15 11:26:34','2023-11-15 11:26:34','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"right\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"left\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"github.com\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:26:34','2023-11-15 11:26:34','',12,'https://simplelearn.local/?p=70',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (71,1,'2023-11-15 11:28:19','2023-11-15 11:28:19','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"SimpleLearn Slogan\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"Login-Signup Redirect\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:28:19','2023-11-15 11:28:19','',10,'https://simplelearn.local/?p=71',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (72,1,'2023-11-15 11:28:54','2023-11-15 11:28:54','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"SimpleLearn Slogan\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"79px\"} -->\n<div style=\"height:79px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"Login-Signup Redirect\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:28:54','2023-11-15 11:28:54','',10,'https://simplelearn.local/?p=72',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (73,1,'2023-11-15 11:29:28','2023-11-15 11:29:28','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:29:28','2023-11-15 11:29:28','',6,'https://simplelearn.local/?p=73',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (74,1,'2023-11-15 11:29:28','2023-11-15 11:29:28','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"SimpleLearn Slogan\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"},\"metadata\":{\"name\":\"Login-Signup Redirect\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:29:28','2023-11-15 11:29:28','',10,'https://simplelearn.local/?p=74',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (75,1,'2023-11-15 11:30:17','0000-00-00 00:00:00','','Auto Draft','','auto-draft','closed','closed','','','','','2023-11-15 11:30:17','0000-00-00 00:00:00','',0,'https://simplelearn.local/?page_id=75',0,'page','',0);
INSERT INTO `wp_posts` VALUES (76,1,'2023-11-16 16:22:10','2023-11-16 16:22:10','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1. Basic Concepts:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2. Functions &amp; Modules:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">4. More Types:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6. Regular Expressions:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\n# Building a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n\n# Distributing Python Code\n# Using tools like pip to install and distribute packages\n# pip install package_name\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','publish','closed','closed','','python-course','','','2023-11-18 14:25:12','2023-11-18 14:25:12','',28,'https://simplelearn.local/?page_id=76',0,'page','',0);
INSERT INTO `wp_posts` VALUES (77,1,'2023-11-15 11:39:28','2023-11-15 11:39:28','<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Basic Concepts</h4>\n<!-- /wp:heading -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-15 11:39:28','2023-11-15 11:39:28','',76,'https://simplelearn.local/?p=77',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (78,1,'2023-11-15 11:39:28','2023-11-15 11:39:28','{\"styles\":{\"spacing\":{\"blockGap\":\"0px\",\"padding\":{\"top\":\"0px\",\"right\":\"0px\",\"bottom\":\"0px\",\"left\":\"0px\"}}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:39:28','2023-11-15 11:39:28','',6,'https://simplelearn.local/?p=78',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (79,1,'2023-11-15 11:41:46','2023-11-15 11:41:46','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"http://simplelearn.local/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"https://simplelearn.local/courses/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link /-->','Navigation','','inherit','closed','closed','','9-revision-v1','','','2023-11-15 11:41:46','2023-11-15 11:41:46','',9,'https://simplelearn.local/?p=79',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (80,1,'2023-11-15 11:41:46','2023-11-15 11:41:46','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /-->\n\n<!-- wp:spacer {\"width\":\"0px\",\"style\":{\"layout\":{\"flexSize\":\"0px\",\"selfStretch\":\"fixed\"}}} -->\n<div style=\"height:100px;width:0px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"right\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"github.com\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:41:46','2023-11-15 11:41:46','',12,'https://simplelearn.local/?p=80',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (81,1,'2023-11-15 11:42:45','2023-11-15 11:42:45','<!-- wp:navigation-link {\"label\":\"Home\",\"url\":\"http://simplelearn.local/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Courses\",\"url\":\"https://simplelearn.local/courses/\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Blog\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:navigation-link {\"label\":\"Contact\",\"url\":\"#\",\"kind\":\"custom\",\"isTopLevelLink\":true} /-->\n\n<!-- wp:social-links {\"iconColor\":\"raft-fg\",\"iconColorValue\":\"var(\\u002d\\u002dwp\\u002d\\u002dpreset\\u002d\\u002dcolor\\u002d\\u002draft-fg)\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"20px\",\"left\":\"20px\"}}},\"className\":\"is-style-logos-only\",\"layout\":{\"type\":\"flex\",\"justifyContent\":\"right\",\"orientation\":\"horizontal\",\"flexWrap\":\"wrap\"}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"github.com\",\"service\":\"github\"} /--></ul>\n<!-- /wp:social-links -->','Navigation','','inherit','closed','closed','','9-revision-v1','','','2023-11-15 11:42:45','2023-11-15 11:42:45','',9,'https://simplelearn.local/?p=81',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (82,1,'2023-11-15 11:42:45','2023-11-15 11:42:45','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":57,\"shouldSyncIcon\":true} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:42:45','2023-11-15 11:42:45','',12,'https://simplelearn.local/?p=82',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (83,1,'2023-11-15 11:43:36','2023-11-15 11:43:36','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":50,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":\"unset\"}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:43:36','2023-11-15 11:43:36','',12,'https://simplelearn.local/?p=83',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (84,1,'2023-11-15 11:44:57','2023-11-15 11:44:57','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":54,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#292E29\"]}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:44:57','2023-11-15 11:44:57','',12,'https://simplelearn.local/?p=84',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (85,1,'2023-11-15 11:46:44','2023-11-15 11:46:44','{\"styles\":{\"spacing\":{\"blockGap\":\"0px\",\"padding\":{\"top\":\"0px\",\"right\":\"0px\",\"bottom\":\"0px\",\"left\":\"0px\"}},\"blocks\":{\"core\\/button\":{\"color\":{\"text\":\"var:preset|color|raft-fg-alt\"}}}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:46:44','2023-11-15 11:46:44','',6,'https://simplelearn.local/?p=85',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (86,1,'2023-11-15 11:46:44','2023-11-15 11:46:44','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"Hero Illustration\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:46:44','2023-11-15 11:46:44','',10,'https://simplelearn.local/?p=86',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (87,1,'2023-11-15 11:48:31','2023-11-15 11:48:31','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:48:31','2023-11-15 11:48:31','',10,'https://simplelearn.local/?p=87',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (88,1,'2023-11-15 11:48:53','2023-11-15 11:48:53','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"676px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px;width:676px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:48:53','2023-11-15 11:48:53','',10,'https://simplelearn.local/?p=88',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (89,1,'2023-11-15 11:49:11','2023-11-15 11:49:11','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"37px\"} -->\n<div style=\"height:37px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"730px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px;width:730px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learning to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 11:49:11','2023-11-15 11:49:11','',10,'https://simplelearn.local/?p=89',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (90,1,'2023-11-15 11:50:32','2023-11-15 11:50:32','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-15 11:50:32','2023-11-15 11:50:32','',6,'https://simplelearn.local/?p=90',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (91,1,'2023-11-15 11:50:47','2023-11-15 11:50:47','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":54,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":\"unset\"}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:50:47','2023-11-15 11:50:47','',12,'https://simplelearn.local/?p=91',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (92,1,'2023-11-15 11:51:33','2023-11-15 11:51:33','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":54,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#eaeefd\"]}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-15 11:51:33','2023-11-15 11:51:33','',12,'https://simplelearn.local/?p=92',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (93,1,'2023-11-15 11:56:21','2023-11-15 11:56:21','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"30px\",\"top\":\"30px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:30px;padding-bottom:30px\"><!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Pages','Display all static pages unless a custom template has been applied or a dedicated template exists.','inherit','closed','closed','','40-revision-v1','','','2023-11-15 11:56:21','2023-11-15 11:56:21','',40,'https://simplelearn.local/?p=93',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (94,1,'2023-11-15 12:02:55','2023-11-15 12:02:55','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"19px\"} -->\n<div style=\"height:19px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"697px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px;width:697px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Python Courses</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For novice programmers, just looking to start out their programming journey and learn to code.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">C/C++</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For intermediate programmers, looking to expand their knowledge and build high performance applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\">Java </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For advanced programmers, looking to learn a high-level language and more about Object Orientation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-15 12:02:55','2023-11-15 12:02:55','',10,'https://simplelearn.local/?p=94',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (95,1,'2023-11-15 12:04:30','2023-11-15 12:04:30','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 12:04:30','2023-11-15 12:04:30','',28,'https://simplelearn.local/?p=95',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (96,1,'2023-11-15 12:05:40','2023-11-15 12:05:40','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 12:05:40','2023-11-15 12:05:40','',28,'https://simplelearn.local/?p=96',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (97,1,'2023-11-15 12:08:51','2023-11-15 12:08:51','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 12:08:51','2023-11-15 12:08:51','',28,'https://simplelearn.local/?p=97',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (98,1,'2023-11-15 12:08:51','2023-11-15 12:08:51','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Pages','Display all static pages unless a custom template has been applied or a dedicated template exists.','inherit','closed','closed','','40-revision-v1','','','2023-11-15 12:08:51','2023-11-15 12:08:51','',40,'https://simplelearn.local/?p=98',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (99,1,'2023-11-15 15:24:34','2023-11-15 15:24:34','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-15 15:24:34','2023-11-15 15:24:34','',28,'https://simplelearn.local/?p=99',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (100,1,'2023-11-15 15:28:39','2023-11-15 15:28:39','<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Basic Concepts</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-15 15:28:39','2023-11-15 15:28:39','',76,'https://simplelearn.local/?p=100',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (101,1,'2023-11-16 16:18:28','2023-11-16 16:18:28','','Login Page','','trash','closed','closed','','login-page__trashed','','','2023-11-16 16:18:28','2023-11-16 16:18:28','',0,'https://simplelearn.local/?page_id=101',0,'page','',0);
INSERT INTO `wp_posts` VALUES (102,1,'2023-11-16 16:18:28','2023-11-16 16:18:28','','Login Page','','inherit','closed','closed','','101-revision-v1','','','2023-11-16 16:18:28','2023-11-16 16:18:28','',101,'https://simplelearn.local/?p=102',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (103,1,'2023-11-16 16:18:34','0000-00-00 00:00:00','','Auto Draft','','auto-draft','closed','closed','','','','','2023-11-16 16:18:34','0000-00-00 00:00:00','',0,'https://simplelearn.local/?page_id=103',0,'page','',0);
INSERT INTO `wp_posts` VALUES (104,1,'2023-11-16 16:19:02','2023-11-16 16:19:02','','Login','','trash','closed','closed','','login__trashed','','','2023-11-16 16:19:02','2023-11-16 16:19:02','',0,'https://simplelearn.local/?page_id=104',0,'page','',0);
INSERT INTO `wp_posts` VALUES (105,1,'2023-11-16 16:19:02','2023-11-16 16:19:02','','Login','','inherit','closed','closed','','104-revision-v1','','','2023-11-16 16:19:02','2023-11-16 16:19:02','',104,'https://simplelearn.local/?p=105',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (106,1,'2023-11-16 16:21:21','2023-11-16 16:21:21','','Login Signup','','trash','closed','closed','','login-signup__trashed','','','2023-11-16 16:21:21','2023-11-16 16:21:21','',0,'https://simplelearn.local/?page_id=106',0,'page','',0);
INSERT INTO `wp_posts` VALUES (107,1,'2023-11-16 16:21:21','2023-11-16 16:21:21','','Login Signup','','inherit','closed','closed','','106-revision-v1','','','2023-11-16 16:21:21','2023-11-16 16:21:21','',106,'https://simplelearn.local/?p=107',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (108,1,'2023-11-16 16:23:09','2023-11-16 16:23:09','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-16 16:23:09','2023-11-16 16:23:09','',28,'https://simplelearn.local/?p=108',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (109,1,'2023-11-16 16:23:39','2023-11-16 16:23:39','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"http://python\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-16 16:23:39','2023-11-16 16:23:39','',28,'https://simplelearn.local/?p=109',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (110,1,'2023-11-16 16:23:57','2023-11-16 16:23:57','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p>Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-16 16:23:57','2023-11-16 16:23:57','',28,'https://simplelearn.local/?p=110',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (111,1,'2023-11-16 16:24:58','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-16 16:24:58','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=111',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (112,1,'2023-11-16 16:24:58','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-16 16:24:58','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=112',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (113,1,'2023-11-16 16:24:58','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-16 16:24:58','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=113',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (114,1,'2023-11-16 16:24:58','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-16 16:24:58','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=114',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (115,1,'2023-11-16 16:25:31','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-16 16:25:31','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=115',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (116,1,'2023-11-16 16:25:31','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-16 16:25:31','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=116',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (117,1,'2023-11-16 16:25:31','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-16 16:25:31','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=117',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (118,1,'2023-11-16 16:25:31','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-16 16:25:31','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=118',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (119,1,'2023-11-16 16:28:04','2023-11-16 16:28:04','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\nprintf(\"Enter a number: \");\nscanf(\"%d\", &amp;num);\nprintf(\"You entered: %d\", num);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h&gt;  // Header file for standard input/output\n\nint main() {\n    printf(\"Hello, C Programming!\");\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\nif (x &gt; 0) {\n    printf(\"x is positive\");\n} else if (x == 0) {\n    printf(\"x is zero\");\n} else {\n    printf(\"x is negative\");\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\nswitch (choice) {\n    case 1:\n        printf(\"Option 1 selected\");\n        break;\n    case 2:\n        printf(\"Option 2 selected\");\n        break;\n    default:\n        printf(\"Invalid option\");\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\nfor (int i = 0; i &lt; 5; i++) {\n    printf(\"%d \", i);\n}\n\n// While loop\nint count = 0;\nwhile (count &lt; 5) {\n    printf(\"%d \", count);\n    count++;\n}\n\n// Do-while loop\nint num = 0;\ndo {\n    printf(\"%d \", num);\n    num++;\n} while (num &lt; 5);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\nint add(int a, int b) {\n    return a + b;\n}\n\n// Function invocation\nint result = add(3, 5); // Result: 8\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\nvoid square(int num) {\n    num = num * num;\n}\nint x = 5;\nsquare(x);  // x remains unchanged\n\n// Pass by reference\nvoid increment(int *ptr) {\n    (*ptr)++;\n}\nint y = 10;\nincrement(&amp;y);  // y is incremented to 11\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\nint multiply(int a, int b) {\n    return a * b;\n}\n\n// Recursion\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\n\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\nint *ptr;  // Pointer declaration\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\n\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\n\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\nchar name&#91;10] = \"Alice\";\n\n// Concatenating strings\nstrcat(greeting, \" \");  // Appending a space\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\n    printf(\"Hello!\\n\");\n}\n\nvoid say_hi(void (*function_ptr)()) {\n    function_ptr();  // Invoking function using function pointer\n}\n\nint main() {\n    void (*ptr)() = greet;  // Assigning function address to pointer\n    say_hi(ptr);  // Passing function pointer as an argument\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\nstruct Person {\n    char name&#91;50];\n    int age;\n    float height;\n};\n\n// Structure initialization\nstruct Person person1 = {\"Alice\", 25, 5.8};\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\nstruct Address {\n    char city&#91;50];\n    int postal_code;\n};\n\nstruct Employee {\n    char name&#91;50];\n    int emp_id;\n    struct Address address;  // Nested structure\n};\n\n// Union\nunion Data {\n    int num;\n    float decimal;\n    char letter;\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\n\n// Reallocating memory\narr = (int *)realloc(arr, 10 * sizeof(int));\n\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files \\u0026 Error Handling\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File operations involve opening, reading, writing, and closing files.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Standard library functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, <code>fscanf()</code>, <code>fgets()</code>, and <code>fputs()</code> are used.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\nfile_ptr = fopen(\"example.txt\", \"w\"); // Opening file in write mode\nif (file_ptr != NULL) {\n    fprintf(file_ptr, \"Writing to file\\n\");\n    fclose(file_ptr); // Closing the file\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Error Handling and Debugging Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Error handling involves checking for errors during file operations and handling them gracefully.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques include checking return values of file operations and using conditional statements to handle errors.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\nfile_ptr = fopen(\"nonexistent.txt\", \"r\"); // Attempting to open a non-existent file\nif (file_ptr == NULL) {\n    printf(\"Error opening file\\n\");\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling is essential for input/output operations in C programming. Effective error handling ensures robustness and reliability in file operations, preventing unexpected errors during file handling processes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"The Preprocessor\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Macros and <code>#define</code></strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#define</code> directive is used to define macros, which are symbolic constants or short functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#define PI 3.14159\n#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#ifdef</code> checks if a macro is defined, <code>#ifndef</code> checks if a macro is not defined, and <code>#endif</code> denotes the end of a conditional block.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#ifndef DEBUG\n#define DEBUG\n#endif\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The preprocessor in C is a powerful tool for code manipulation before compilation. It allows defining constants, creating macros, and conditional compilation, enabling better code organization and portability. Understanding and utilizing the preprocessor directives contribute to writing efficient and maintainable C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our C Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through the fundamental aspects of C programming, we\'ve delved into the intricacies of variables, control structures, functions, memory management, file handling, and more. This course has equipped you with a solid foundation in C, a language renowned for its efficiency and versatility. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, mastering C programming is a continuous learning process. Practicing coding challenges, exploring real-world applications, and diving deeper into advanced concepts will further solidify your expertise. Congratulations on completing this course, and may your coding journey with C be both rewarding and full of innovation!</p>\n<!-- /wp:paragraph -->','C Course','','publish','closed','closed','','c-course','','','2023-11-18 14:25:01','2023-11-18 14:25:01','',28,'https://simplelearn.local/?page_id=119',0,'page','',0);
INSERT INTO `wp_posts` VALUES (120,1,'2023-11-16 16:26:13','2023-11-16 16:26:13','','C Programming Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-16 16:26:13','2023-11-16 16:26:13','',119,'https://simplelearn.local/?p=120',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (121,1,'2023-11-16 16:27:11','2023-11-16 16:27:11','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Inheritance \\u0026 Polymorphism\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheriting Classes and Base-Derived Relationships</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance allows a new class (derived class) to inherit properties and behavior from an existing class (base class).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for inheriting classes:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Vehicle {\r\n    // ... (attributes and methods)\r\n};\r\n\r\n// Derived class\r\nclass Car : public Vehicle {\r\n    // ... (additional attributes and methods)\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Polymorphism: Function Overriding and Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overriding redefines a base class function in a derived class.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Virtual functions allow dynamic binding and late binding.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Shape {\r\n    public:\r\n        virtual void draw() {\r\n            std::cout &lt;&lt; \"Drawing a shape\";\r\n        }\r\n};\r\n\r\n// Derived class\r\nclass Circle : public Shape {\r\n    public:\r\n        void draw() override {\r\n            std::cout &lt;&lt; \"Drawing a circle\";\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Pure Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain at least one pure virtual function (virtual function with no implementation).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cannot be instantiated, used as base classes.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Abstract class\r\nclass Animal {\r\n    public:\r\n        virtual void makeSound() = 0; // Pure virtual function\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Inheritance and polymorphism are core concepts in object-oriented programming. Inheritance allows the creation of new classes based on existing ones, facilitating code reuse and structure. Polymorphism enables the use of a single interface for different data types and behaviors, enhancing flexibility and extensibility in software design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Templates\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Generic Programming with Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Templates allow writing generic classes and functions that work with any data type.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function templates:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT maximum(T x, T y) {\r\n    return (x > y) ? x : y;\r\n}\r\n\r\n// Using the template function\r\nint maxInt = maximum(5, 10);\r\nfloat maxFloat = maximum(3.5, 7.8);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Templates and Class Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function templates define generic functions that can accept multiple data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Class templates define generic classes that can handle various data types.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT add(T x, T y) {\r\n    return x + y;\r\n}\r\n\r\n// Class template\r\ntemplate&lt;typename T>\r\nclass Container {\r\n    T value;\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Specialization and Explicit Instantiation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Template specialization allows customizing templates for specific data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Explicit instantiation provides control over template instantiation.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Template specialization\r\ntemplate&lt;>\r\nclass Container&lt;int> {\r\n    int value;\r\n};\r\n\r\n// Explicit instantiation\r\ntemplate class Container&lt;float>; // Explicit instantiation for float\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Templates in C++ enable generic programming, where algorithms and data structures can work with various data types. Function templates and class templates provide flexibility in creating reusable code that adapts to different data types without sacrificing type safety.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exception Handling (try-catch blocks)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try</code>, <code>catch</code>, and <code>throw</code> for handling exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>try</code> block encloses the code that might generate an exception.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>catch</code> block catches and handles the thrown exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>throw</code> statement generates exceptions explicitly.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that might throw an exception\r\n    if (condition) {\r\n        throw \"Some error occurred\";\r\n    }\r\n}\r\ncatch (const char* error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exceptions can be thrown of various types (int, char*, custom types).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Catch blocks can handle different types of exceptions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    if (condition) {\r\n        throw 404; // Throwing an integer exception\r\n    }\r\n}\r\ncatch (int error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Handling exceptions in C++ provides a mechanism to deal with errors or exceptional scenarios during program execution, enabling the code to gracefully recover from unexpected issues.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling (Reading, Writing, and Closing)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use file streams (<code>ifstream</code>, <code>ofstream</code>, <code>fstream</code>) for file operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>ifstream</code> for reading from files, <code>ofstream</code> for writing to files, and <code>fstream</code> for both.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Open files using file stream objects, perform read/write operations, and close files.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Writing to a file\r\nstd::ofstream outFile(\"file.txt\");\r\noutFile &lt;&lt; \"Hello, File!\";\r\n\r\n// Reading from a file\r\nstd::ifstream inFile(\"file.txt\");\r\nstd::string content;\r\ngetline(inFile, content);\r\nstd::cout &lt;&lt; \"Content: \" &lt;&lt; content;\r\n\r\n// Closing files\r\noutFile.close();\r\ninFile.close();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Streams and File I/O Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File streams use insertion (<code>&lt;&lt;</code>) and extraction (<code>&gt;&gt;</code>) operators similar to standard I/O.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File open modes (<code>ios::in</code>, <code>ios::out</code>, <code>ios::app</code>, <code>ios::binary</code>, etc.) control file operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>std::fstream file(\"data.txt\", std::ios::out | std::ios::app);\r\nif (file.is_open()) {\r\n    file &lt;&lt; \"New data\\n\";\r\n    file.close();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in C++ involves working with file streams to perform reading, writing, and manipulation of files. Understanding file stream operations and file open modes is crucial for managing file I/O effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our C++ Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Congratulations on completing the C++ course! You\'ve covered essential topics, from fundamental concepts like variables and loops to advanced topics such as inheritance, templates, and file handling. Mastery of these concepts forms a solid foundation for creating robust and efficient C++ applications. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, practice and experimentation are key to mastering any programming language. Keep exploring, building, and refining your skills to unlock the full potential of C++ programming. Whether you\'re diving deeper into software development or exploring new domains, the knowledge gained from this course will undoubtedly be invaluable. Good luck on your programming journey!</p>\n<!-- /wp:paragraph -->','C++ Course','','publish','closed','closed','','cplusplus-course','','','2023-11-18 14:25:04','2023-11-18 14:25:04','',28,'https://simplelearn.local/?page_id=121',0,'page','',0);
INSERT INTO `wp_posts` VALUES (122,1,'2023-11-16 16:27:11','2023-11-16 16:27:11','','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-16 16:27:11','2023-11-16 16:27:11','',121,'https://simplelearn.local/?p=122',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (123,1,'2023-11-16 16:28:04','2023-11-16 16:28:04','','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-16 16:28:04','2023-11-16 16:28:04','',119,'https://simplelearn.local/?p=123',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (125,1,'2023-11-16 16:28:55','2023-11-16 16:28:55','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Lists\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Lists:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists in Java are part of the Collections Framework, providing dynamic-sized, ordered collections of elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Collections Framework (ArrayList, LinkedList)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ArrayList: Resizable array implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\r\n\r\n// Creating an ArrayList\r\nArrayList&lt;String> names = new ArrayList&lt;>();\r\n\r\n// Adding elements\r\nnames.add(\"Alice\");\r\nnames.add(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>LinkedList: Doubly-linked list implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.LinkedList;\r\n\r\n// Creating a LinkedList\r\nLinkedList&lt;Integer> numbers = new LinkedList&lt;>();\r\n\r\n// Adding elements\r\nnumbers.add(10);\r\nnumbers.add(20);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>List Interface and Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Common List interface operations (applicable to both ArrayList and LinkedList):</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Accessing elements by index\r\nString name = names.get(0);\r\n\r\n// Removing elements\r\nnames.remove(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Lists and Manipulating Elements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Iterating through a list using enhanced for loop:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>for (String name : names) {\r\n    System.out.println(name);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists offer flexibility and various operations for managing collections of elements. The List interface provides methods to add, access, remove, and manipulate elements in different ways. ArrayList and LinkedList are commonly used implementations that allow efficient handling of dynamic lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Threads \\u0026 Concurrency\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. Threads &amp; Concurrency:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Threads in Java allow programs to execute multiple tasks concurrently, enhancing performance and responsiveness.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Multithreading Basics</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creating a thread by extending the Thread class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println(\"MyThread running\");\r\n    }\r\n}\r\n\r\n// Starting the thread\r\nMyThread thread = new MyThread();\r\nthread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Implementing a thread using the Runnable interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyRunnable implements Runnable {\r\n    public void run() {\r\n        System.out.println(\"MyRunnable running\");\r\n    }\r\n}\r\n\r\n// Creating a thread using Runnable\r\nThread runnableThread = new Thread(new MyRunnable());\r\nrunnableThread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Synchronization and Thread Safety</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Synchronizing threads to avoid data inconsistency:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Counter {\r\n    private int count = 0;\r\n\r\n    public synchronized void increment() {\r\n        count++;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread Management and Interaction</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Joining threads to wait for their completion:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Thread t1 = new Thread(() -> {\r\n    // Thread t1 logic\r\n});\r\nThread t2 = new Thread(() -> {\r\n    // Thread t2 logic\r\n});\r\n\r\nt1.start();\r\nt2.start();\r\n\r\ntry {\r\n    t1.join();\r\n    t2.join();\r\n} catch (InterruptedException e) {\r\n    // Handle interrupted exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Java\'s concurrency features allow multiple tasks to run concurrently, improving program performance. Understanding multithreading basics, synchronization, and thread interaction is crucial for developing applications that benefit from concurrent execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java involves reading from and writing to files, allowing data persistence and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>File Handling (Reading, Writing, and Closing)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from a file using FileReader and BufferedReader:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"))) {\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        System.out.println(line);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Writing to a file using FileWriter and BufferedWriter:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"))) {\r\n    writer.write(\"Hello, Java Files!\");\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input and Output Streams</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading and writing binary data using InputStream and OutputStream:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\ntry (FileInputStream inputStream = new FileInputStream(\"input.jpg\");\r\n     FileOutputStream outputStream = new FileOutputStream(\"output.jpg\")) {\r\n    byte&#91;] buffer = new byte&#91;1024];\r\n    int bytesRead;\r\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\r\n        outputStream.write(buffer, 0, bytesRead);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java allows for various operations like reading, writing, and manipulating files. Using classes like FileReader, FileWriter, InputStream, and OutputStream, Java provides a rich set of tools for file input and output operations, enabling efficient data handling with external files.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Java Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As you conclude your journey through Java programming, you\'ve delved into its fundamental concepts and explored various advanced topics. Equipped with knowledge about classes, objects, exceptions, collections, threads, and file handling, you\'ve gained a solid understanding of Java\'s capabilities in developing robust applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Continuing to explore and practice these concepts will enhance your proficiency in Java development. Remember, Java\'s versatility makes it applicable in diverse domains, from web and mobile applications to enterprise systems and beyond.</p>\n<!-- /wp:paragraph -->','Java Course','','publish','closed','closed','','java-course','','','2023-11-18 14:25:08','2023-11-18 14:25:08','',28,'https://simplelearn.local/?page_id=125',0,'page','',0);
INSERT INTO `wp_posts` VALUES (126,1,'2023-11-16 16:28:55','2023-11-16 16:28:55','','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-16 16:28:55','2023-11-16 16:28:55','',125,'https://simplelearn.local/?p=126',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (127,1,'2023-11-16 16:29:09','2023-11-16 16:29:09','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-16 16:29:09','2023-11-16 16:29:09','',28,'https://simplelearn.local/?p=127',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (128,1,'2023-11-16 16:33:54','2023-11-16 16:33:54','<!-- wp:image {\"id\":20,\"width\":\"120px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:120px;height:auto\"/></figure>\n<!-- /wp:image -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-16 16:33:54','2023-11-16 16:33:54','',125,'https://simplelearn.local/?p=128',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (129,1,'2023-11-16 16:33:54','2023-11-16 16:33:54','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Pages','Display all static pages unless a custom template has been applied or a dedicated template exists.','inherit','closed','closed','','40-revision-v1','','','2023-11-16 16:33:54','2023-11-16 16:33:54','',40,'https://simplelearn.local/?p=129',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (130,1,'2023-11-16 16:34:28','2023-11-16 16:34:28','<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-16 16:34:28','2023-11-16 16:34:28','',125,'https://simplelearn.local/?p=130',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (131,1,'2023-11-16 16:34:28','2023-11-16 16:34:28','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Pages','Display all static pages unless a custom template has been applied or a dedicated template exists.','inherit','closed','closed','','40-revision-v1','','','2023-11-16 16:34:28','2023-11-16 16:34:28','',40,'https://simplelearn.local/?p=131',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (132,1,'2023-11-16 16:34:57','2023-11-16 16:34:57','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}}} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','publish','closed','closed','','wp-custom-template-courses','','','2023-11-16 20:33:14','2023-11-16 20:33:14','',0,'https://simplelearn.local/wp-custom-template-courses/',0,'wp_template','',0);
INSERT INTO `wp_posts` VALUES (133,1,'2023-11-16 16:36:33','2023-11-16 16:36:33','<!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-16 16:36:33','2023-11-16 16:36:33','',125,'https://simplelearn.local/?p=133',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (134,1,'2023-11-16 16:36:33','2023-11-16 16:36:33','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Courses','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 16:36:33','2023-11-16 16:36:33','',132,'https://simplelearn.local/?p=134',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (135,1,'2023-11-16 18:35:36','2023-11-16 18:35:36','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:spacer {\"height\":\"19px\"} -->\n<div style=\"height:19px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"697px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px;width:697px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Python Courses</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For novice programmers, just looking to start out their programming journey and learn to code.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">C/C++</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For intermediate programmers, looking to expand their knowledge and build high performance applications.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Java </a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For advanced programmers, looking to learn a high-level language and more about Object Orientation.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-16 18:35:36','2023-11-16 18:35:36','',10,'https://simplelearn.local/?p=135',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (136,1,'2023-11-16 18:41:13','2023-11-16 18:41:13','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Courses','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:41:13','2023-11-16 18:41:13','',132,'https://simplelearn.local/?p=136',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (137,1,'2023-11-16 18:42:14','2023-11-16 18:42:14','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:42:14','2023-11-16 18:42:14','',132,'https://simplelearn.local/?p=137',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (138,1,'2023-11-16 18:42:54','2023-11-16 18:42:54','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:42:54','2023-11-16 18:42:54','',132,'https://simplelearn.local/?p=138',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (139,1,'2023-11-16 18:45:13','2023-11-16 18:45:13','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1,\"isLink\":true} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:45:13','2023-11-16 18:45:13','',132,'https://simplelearn.local/?p=139',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (140,1,'2023-11-16 18:46:06','2023-11-16 18:46:06','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1,\"isLink\":true} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:46:06','2023-11-16 18:46:06','',132,'https://simplelearn.local/?p=140',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (141,1,'2023-11-16 18:46:33','2023-11-16 18:46:33','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"right\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1,\"isLink\":true} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:46:33','2023-11-16 18:46:33','',132,'https://simplelearn.local/?p=141',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (142,1,'2023-11-16 18:47:34','2023-11-16 18:47:34','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 18:47:34','2023-11-16 18:47:34','',132,'https://simplelearn.local/?p=142',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (143,1,'2023-11-16 18:48:36','2023-11-16 18:48:36','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":37,\"width\":\"103px\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37\" style=\"width:103px\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','C Course','','publish','closed','closed','','wp-custom-template-c-course','','','2023-11-17 16:49:57','2023-11-17 16:49:57','',0,'https://simplelearn.local/wp-custom-template-c-course/',0,'wp_template','',0);
INSERT INTO `wp_posts` VALUES (144,1,'2023-11-16 18:49:09','2023-11-16 18:49:09','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":37,\"width\":\"100px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37\" style=\"width:100px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','C Course','','inherit','closed','closed','','143-revision-v1','','','2023-11-16 18:49:09','2023-11-16 18:49:09','',143,'https://simplelearn.local/?p=144',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (145,1,'2023-11-16 19:58:35','2023-11-16 19:58:35','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFFFFF\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.05)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#f6f6f6\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#202220\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-16 19:58:35','2023-11-16 19:58:35','',6,'https://simplelearn.local/?p=145',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (146,1,'2023-11-16 19:58:35','2023-11-16 19:58:35','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"697px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px;width:697px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Python Courses</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For novice programmers, just looking to start out their programming journey and learn to code.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">C/C++</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For intermediate programmers, looking to expand their knowledge and build high performance applications.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Java </a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For advanced programmers, looking to learn a high-level language and more about Object Orientation.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-16 19:58:35','2023-11-16 19:58:35','',10,'https://simplelearn.local/?p=146',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (147,1,'2023-11-16 19:58:35','2023-11-16 19:58:35','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":54,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#202220\"]}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-16 19:58:35','2023-11-16 19:58:35','',12,'https://simplelearn.local/?p=147',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (148,1,'2023-11-16 19:59:17','2023-11-16 19:59:17','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-16 19:59:17','2023-11-16 19:59:17','',6,'https://simplelearn.local/?p=148',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (149,1,'2023-11-16 19:59:17','2023-11-16 19:59:17','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":54,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#eaeefd\"]}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-16 19:59:17','2023-11-16 19:59:17','',12,'https://simplelearn.local/?p=149',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (150,1,'2023-11-16 20:33:14','2023-11-16 20:33:14','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":25,\"width\":\"103px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}}} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:103px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Python Course','','inherit','closed','closed','','132-revision-v1','','','2023-11-16 20:33:14','2023-11-16 20:33:14','',132,'https://simplelearn.local/?p=150',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (151,1,'2023-11-17 16:49:05','2023-11-17 16:49:05','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":38,\"width\":\"103px\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38\" style=\"width:103px\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','C++ Course','','publish','closed','closed','','wp-custom-template-c-course-2','','','2023-11-17 16:50:00','2023-11-17 16:50:00','',0,'https://simplelearn.local/wp-custom-template-c-course-2/',0,'wp_template','',0);
INSERT INTO `wp_posts` VALUES (152,1,'2023-11-17 16:49:57','2023-11-17 16:49:57','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":37,\"width\":\"103px\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37\" style=\"width:103px\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','C Course','','inherit','closed','closed','','143-revision-v1','','','2023-11-17 16:49:57','2023-11-17 16:49:57','',143,'https://simplelearn.local/?p=152',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (153,1,'2023-11-17 16:50:00','2023-11-17 16:50:00','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":38,\"width\":\"103px\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38\" style=\"width:103px\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','C++ Course','','inherit','closed','closed','','151-revision-v1','','','2023-11-17 16:50:00','2023-11-17 16:50:00','',151,'https://simplelearn.local/?p=153',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (154,1,'2023-11-17 16:51:15','2023-11-17 16:51:15','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":20,\"width\":\"103px\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:103px\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Java Course','','publish','closed','closed','','wp-custom-template-java-course','','','2023-11-17 16:51:40','2023-11-17 16:51:40','',0,'https://simplelearn.local/wp-custom-template-java-course/',0,'wp_template','',0);
INSERT INTO `wp_posts` VALUES (155,1,'2023-11-17 16:51:40','2023-11-17 16:51:40','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"bottom\":\"20px\",\"top\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\"><!-- wp:image {\"id\":20,\"width\":\"103px\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:103px\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":1} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"},\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"}}},\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:post-content {\"layout\":{\"inherit\":true}} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Java Course','','inherit','closed','closed','','154-revision-v1','','','2023-11-17 16:51:40','2023-11-17 16:51:40','',154,'https://simplelearn.local/?p=155',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (156,1,'2023-11-17 17:28:22','2023-11-17 17:28:22','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":\"697px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px;width:697px;height:auto\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Python Courses</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For novice programmers, just looking to start out their programming journey and learn to code.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">C/C++</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For intermediate programmers, looking to expand their knowledge and build high performance applications.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Java </a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For advanced programmers, looking to learn a high-level language and more about Object Orientation.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-17 17:28:22','2023-11-17 17:28:22','',10,'https://simplelearn.local/?p=156',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (157,1,'2023-11-17 17:31:00','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=157',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (158,1,'2023-11-17 17:31:00','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=158',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (159,1,'2023-11-17 17:31:00','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=159',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (160,1,'2023-11-17 17:31:00','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=160',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (161,1,'2023-11-17 17:31:00','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=161',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (162,1,'2023-11-17 17:31:00','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=162',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (163,1,'2023-11-17 17:31:00','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:00','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=163',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (164,1,'2023-11-17 17:31:32','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=164',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (165,1,'2023-11-17 17:31:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=165',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (166,1,'2023-11-17 17:31:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=166',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (167,1,'2023-11-17 17:31:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=167',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (168,1,'2023-11-17 17:31:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=168',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (169,1,'2023-11-17 17:31:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=169',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (170,1,'2023-11-17 17:31:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-17 17:31:32','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=170',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (171,1,'2023-11-17 17:39:10','2023-11-17 17:39:10','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"></h2>\n<!-- /wp:heading -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 17:39:10','2023-11-17 17:39:10','',76,'https://simplelearn.local/?p=171',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (172,1,'2023-11-17 17:39:10','2023-11-17 17:39:10','<!-- wp:template-part {\"slug\":\"header\",\"theme\":\"raft\",\"tagName\":\"header\"} /-->\n\n<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"24px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"level\":1,\"fontSize\":\"huge\"} -->\n<h1 class=\"wp-block-heading has-text-align-center has-huge-font-size\">SimpleLearn</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"medium\"} -->\n<p class=\"has-text-align-center has-medium-font-size\">Learning code, made simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\"} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\" href=\"https://simplelearn.local/courses/\">Learn More</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:image {\"align\":\"center\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"style\":{\"border\":{\"radius\":\"0px\",\"width\":\"0px\",\"style\":\"none\"}},\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image aligncenter size-large has-custom-border is-style-rounded\"><img src=\"http://simplelearn.local/wp-content/themes/raft/assets/img/raft-illustration.svg\" alt=\"SimpleLearn Actor\" style=\"border-style:none;border-width:0px;border-radius:0px\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Courses\"}} -->\n<div class=\"wp-block-group alignfull\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:columns {\"align\":\"wide\"} -->\n<div class=\"wp-block-columns alignwide\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":25,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Python Courses</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For novice programmers, just looking to start out their programming journey and learn to code.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":19,\"width\":\"168px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/c.png\" alt=\"\" class=\"wp-image-19\" style=\"width:168px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">C/C++</a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For intermediate programmers, looking to expand their knowledge and build high performance applications.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"align\":\"center\",\"id\":20,\"width\":\"170px\",\"height\":\"auto\",\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"size-full\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized size-full\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20\" style=\"width:170px;height:auto\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"textAlign\":\"center\",\"level\":3} -->\n<h3 class=\"wp-block-heading has-text-align-center\"><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">Java </a></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://simplelearn.local/courses/\" data-type=\"page\" data-id=\"28\">For advanced programmers, looking to learn a high-level language and more about Object Orientation.</a></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"blockGap\":\"40px\",\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-accent\",\"textColor\":\"raft-fg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-fg-alt-color has-raft-accent-background-color has-text-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:heading {\"textAlign\":\"center\",\"textColor\":\"raft-fg-alt\"} -->\n<h2 class=\"wp-block-heading has-text-align-center has-raft-fg-alt-color has-text-color\">Begin your journey today.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:buttons {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"textColor\":\"raft-fg-alt\",\"className\":\"is-style-outline\"} -->\n<div class=\"wp-block-button is-style-outline\"><a class=\"wp-block-button__link has-raft-fg-alt-color has-text-color wp-element-button\">Sign up / Log in</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons --></div>\n<!-- /wp:group -->\n\n<!-- wp:template-part {\"slug\":\"footer\",\"theme\":\"raft\",\"tagName\":\"footer\"} /-->','Front Page','Displays your site\'s homepage, whether it is set to display latest posts or a static page. The Front Page template takes precedence over all templates.','inherit','closed','closed','','10-revision-v1','','','2023-11-17 17:39:10','2023-11-17 17:39:10','',10,'https://simplelearn.local/?p=172',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (173,1,'2023-11-17 17:39:39','2023-11-17 17:39:39','<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 17:39:39','2023-11-17 17:39:39','',119,'https://simplelearn.local/?p=173',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (174,1,'2023-11-17 17:40:06','2023-11-17 17:40:06','<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-17 17:40:06','2023-11-17 17:40:06','',121,'https://simplelearn.local/?p=174',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (175,1,'2023-11-17 17:40:30','2023-11-17 17:40:30','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#FFFFFF\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#202220\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.05)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#f6f6f6\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#202220\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-17 17:40:30','2023-11-17 17:40:30','',6,'https://simplelearn.local/?p=175',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (176,1,'2023-11-17 17:43:07','2023-11-17 17:43:07','<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</strong></p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 17:43:07','2023-11-17 17:43:07','',119,'https://simplelearn.local/?p=176',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (177,1,'2023-11-17 17:43:39','2023-11-17 17:43:39','<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 17:43:39','2023-11-17 17:43:39','',119,'https://simplelearn.local/?p=177',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (179,1,'2023-11-17 17:44:09','2023-11-17 17:44:09','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#232323\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#5C40CA\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-17 17:44:09','2023-11-17 17:44:09','',6,'https://simplelearn.local/?p=179',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (180,1,'2023-11-17 17:44:39','2023-11-17 17:44:39','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-17 17:44:39','2023-11-17 17:44:39','',6,'https://simplelearn.local/?p=180',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (181,1,'2023-11-17 17:53:17','2023-11-17 17:53:17','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"70px\"} -->\n<div style=\"height:70px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Variables and Data Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Variables are containers for storing data values. They are used to label and reference data in a program. Data types define the type of data that a variable can hold, such as strings (text), integers (whole numbers), floats (decimal numbers), and booleans (true/false values).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# Printing values\r\nprint(name)         # Print the value of \'name\'\r\nprint(age)          # Print the value of \'age\'\r\nprint(height)       # Print the value of \'height\'\r\nprint(is_student)   # Print the value of \'is_student\'\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Control Structures (if statements):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Control structures, like <code>if</code>, <code>elif</code>, and <code>else</code>, enable the execution of specific code blocks based on certain conditions. They allow a program to make decisions and perform different actions depending on whether certain conditions are met.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Loops (for loop):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Loops, like <code>for</code> loops, are used to execute a block of code repeatedly. They iterate over a sequence (like a list or range) and perform an action for each item in that sequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. Functions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Functions are blocks of reusable code that perform a specific task. They allow you to break down your code into manageable parts, making it easier to read, maintain, and debug. Functions take inputs (arguments) and may return an output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. Lists (mutable arrays):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists are ordered collections of items. They are mutable, meaning their elements can be changed after creation. Lists can contain various data types and are accessed using indices. They are versatile and widely used for storing multiple items in a single variable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Dictionaries (key-value pairs):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dictionaries are collections of data that are unordered and indexed by keys. Each key-value pair in a dictionary allows you to store and retrieve data based on a unique key. They provide a way to organize data in a more structured manner.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Classes and Objects (OOP):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes are blueprints for creating objects in object-oriented programming (OOP). They encapsulate data (attributes) and behaviors (methods) into objects. Objects are instances of classes, and they allow for the organization of code into reusable and modular structures.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 17:53:17','2023-11-17 17:53:17','',76,'https://simplelearn.local/?p=181',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (182,1,'2023-11-17 17:55:34','2023-11-17 17:55:34','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Variables and Data Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Variables are containers for storing data values. They are used to label and reference data in a program. Data types define the type of data that a variable can hold, such as strings (text), integers (whole numbers), floats (decimal numbers), and booleans (true/false values).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# Printing values\r\nprint(name)         # Print the value of \'name\'\r\nprint(age)          # Print the value of \'age\'\r\nprint(height)       # Print the value of \'height\'\r\nprint(is_student)   # Print the value of \'is_student\'\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Control Structures (if statements):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Control structures, like <code>if</code>, <code>elif</code>, and <code>else</code>, enable the execution of specific code blocks based on certain conditions. They allow a program to make decisions and perform different actions depending on whether certain conditions are met.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Loops (for loop):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Loops, like <code>for</code> loops, are used to execute a block of code repeatedly. They iterate over a sequence (like a list or range) and perform an action for each item in that sequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. Functions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Functions are blocks of reusable code that perform a specific task. They allow you to break down your code into manageable parts, making it easier to read, maintain, and debug. Functions take inputs (arguments) and may return an output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. Lists (mutable arrays):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists are ordered collections of items. They are mutable, meaning their elements can be changed after creation. Lists can contain various data types and are accessed using indices. They are versatile and widely used for storing multiple items in a single variable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Dictionaries (key-value pairs):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dictionaries are collections of data that are unordered and indexed by keys. Each key-value pair in a dictionary allows you to store and retrieve data based on a unique key. They provide a way to organize data in a more structured manner.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Classes and Objects (OOP):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes are blueprints for creating objects in object-oriented programming (OOP). They encapsulate data (attributes) and behaviors (methods) into objects. Objects are instances of classes, and they allow for the organization of code into reusable and modular structures.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 17:55:34','2023-11-17 17:55:34','',76,'https://simplelearn.local/?p=182',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (183,1,'2023-11-17 18:01:06','2023-11-17 18:01:06','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"></h2>\n<!-- /wp:heading -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:01:06','2023-11-17 18:01:06','',76,'https://simplelearn.local/?p=183',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (184,1,'2023-11-17 18:03:11','2023-11-17 18:03:11','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"></h2>\n<!-- /wp:heading -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:03:11','2023-11-17 18:03:11','',76,'https://simplelearn.local/?p=184',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (185,1,'2023-11-17 18:09:05','2023-11-17 18:09:05','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:09:05','2023-11-17 18:09:05','',76,'https://simplelearn.local/?p=185',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (186,1,'2023-11-17 18:11:13','2023-11-17 18:11:13','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# String Manipulation\r\ngreeting = \"Hello\"\r\nname = \"Alice\"\r\n\r\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\r\nsubstring = message&#91;6:]  # Slicing\r\nformatted = f\"{greeting}, {name}!\"  # String formatting\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\r\nx = 10\r\ny = 5\r\n\r\nif x > y:\r\n    print(\"x is greater than y\")\r\nelif x == y:\r\n    print(\"x and y are equal\")\r\nelse:\r\n    print(\"y is greater than x\")\r\n\r\n# Loops\r\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\r\n\r\n# For loop\r\nfor fruit in fruits:\r\n    print(fruit)\r\n\r\n# While loop\r\ncount = 0\r\nwhile count &lt; 5:\r\n    print(count)\r\n    count += 1\r</code></pre>\n<!-- /wp:code -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:11:13','2023-11-17 18:11:13','',76,'https://simplelearn.local/?p=186',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (187,1,'2023-11-17 18:14:38','2023-11-17 18:14:38','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# String Manipulation\r\ngreeting = \"Hello\"\r\nname = \"Alice\"\r\n\r\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\r\nsubstring = message&#91;6:]  # Slicing\r\nformatted = f\"{greeting}, {name}!\"  # String formatting\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x > y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:14:38','2023-11-17 18:14:38','',76,'https://simplelearn.local/?p=187',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (188,1,'2023-11-17 18:16:58','2023-11-17 18:16:58','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# String Manipulation\r\ngreeting = \"Hello\"\r\nname = \"Alice\"\r\n\r\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\r\nsubstring = message&#91;6:]  # Slicing\r\nformatted = f\"{greeting}, {name}!\"  # String formatting\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x > y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:16:58','2023-11-17 18:16:58','',76,'https://simplelearn.local/?p=188',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (189,1,'2023-11-17 18:19:49','2023-11-17 18:19:49','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# String Manipulation\r\ngreeting = \"Hello\"\r\nname = \"Alice\"\r\n\r\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\r\nsubstring = message&#91;6:]  # Slicing\r\nformatted = f\"{greeting}, {name}!\"  # String formatting\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x > y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Control Structures:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>If Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional execution based on <code>if</code>, <code>elif</code>, and <code>else</code> conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\r\nx = 10\r\ny = 5\r\n\r\nif x > y:\r\n    print(\"x is greater than y\")\r\nelif x == y:\r\n    print(\"x and y are equal\")\r\nelse:\r\n    print(\"y is greater than x\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Loops</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop: Iterating over a sequence of elements.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop: Executing code while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Simulating a <code>do-while</code> equivalent using a <code>while</code> loop and <code>break</code> statement.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Loops\r\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\r\n\r\n# For loop\r\nfor fruit in fruits:\r\n    print(fruit)\r\n\r\n# While loop\r\ncount = 0\r\nwhile count &lt; 5:\r\n    print(count)\r\n    count += 1\r\n\r\n# Do-while equivalent using a while loop and break\r\ncount = 0\r\nwhile True:\r\n    print(count)\r\n    count += 1\r\n    if count >= 5:\r\n        break\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Control structures like <code>if</code> statements allow the program to make decisions based on conditions, while loops enable repetitive execution of code blocks until certain conditions are met. These structures form the backbone of program flow control in Python.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:19:49','2023-11-17 18:19:49','',76,'https://simplelearn.local/?p=189',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (190,1,'2023-11-17 18:20:02','2023-11-17 18:20:02','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# String Manipulation\r\ngreeting = \"Hello\"\r\nname = \"Alice\"\r\n\r\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\r\nsubstring = message&#91;6:]  # Slicing\r\nformatted = f\"{greeting}, {name}!\"  # String formatting\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x > y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Control Structures\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Control Structures:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>If Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional execution based on <code>if</code>, <code>elif</code>, and <code>else</code> conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\r\nx = 10\r\ny = 5\r\n\r\nif x > y:\r\n    print(\"x is greater than y\")\r\nelif x == y:\r\n    print(\"x and y are equal\")\r\nelse:\r\n    print(\"y is greater than x\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Loops</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop: Iterating over a sequence of elements.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop: Executing code while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Simulating a <code>do-while</code> equivalent using a <code>while</code> loop and <code>break</code> statement.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Loops\r\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\r\n\r\n# For loop\r\nfor fruit in fruits:\r\n    print(fruit)\r\n\r\n# While loop\r\ncount = 0\r\nwhile count &lt; 5:\r\n    print(count)\r\n    count += 1\r\n\r\n# Do-while equivalent using a while loop and break\r\ncount = 0\r\nwhile True:\r\n    print(count)\r\n    count += 1\r\n    if count >= 5:\r\n        break\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Control structures like <code>if</code> statements allow the program to make decisions based on conditions, while loops enable repetitive execution of code blocks until certain conditions are met. These structures form the backbone of program flow control in Python.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:20:02','2023-11-17 18:20:02','',76,'https://simplelearn.local/?p=190',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (191,1,'2023-11-17 18:21:01','2023-11-17 18:21:01','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\r\nname = \"Alice\"  # String\r\nage = 25        # Integer\r\nheight = 5.8    # Float\r\nis_student = True  # Boolean\r\n\r\n# String Manipulation\r\ngreeting = \"Hello\"\r\nname = \"Alice\"\r\n\r\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\r\nsubstring = message&#91;6:]  # Slicing\r\nformatted = f\"{greeting}, {name}!\"  # String formatting\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x > y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Control Structures\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Control Structures:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>If Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional execution based on <code>if</code>, <code>elif</code>, and <code>else</code> conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\r\nx = 10\r\ny = 5\r\n\r\nif x > y:\r\n    print(\"x is greater than y\")\r\nelif x == y:\r\n    print(\"x and y are equal\")\r\nelse:\r\n    print(\"y is greater than x\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Loops</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop: Iterating over a sequence of elements.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop: Executing code while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Simulating a <code>do-while</code> equivalent using a <code>while</code> loop and <code>break</code> statement.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Loops\r\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\r\n\r\n# For loop\r\nfor fruit in fruits:\r\n    print(fruit)\r\n\r\n# While loop\r\ncount = 0\r\nwhile count &lt; 5:\r\n    print(count)\r\n    count += 1\r\n\r\n# Do-while equivalent using a while loop and break\r\ncount = 0\r\nwhile True:\r\n    print(count)\r\n    count += 1\r\n    if count >= 5:\r\n        break\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Control structures like <code>if</code> statements allow the program to make decisions based on conditions, while loops enable repetitive execution of code blocks until certain conditions are met. These structures form the backbone of program flow control in Python.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:21:01','2023-11-17 18:21:01','',76,'https://simplelearn.local/?p=191',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (192,1,'2023-11-17 18:22:39','2023-11-17 18:22:39','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#232323\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#5C40CA\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-17 18:22:39','2023-11-17 18:22:39','',6,'https://simplelearn.local/?p=192',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (193,1,'2023-11-17 18:27:45','2023-11-17 18:27:45','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Strings \\u0026 Variables, Control Structures\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:27:45','2023-11-17 18:27:45','',76,'https://simplelearn.local/?p=193',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (194,1,'2023-11-17 18:28:30','2023-11-17 18:28:30','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Strings \\u0026 Variables, Control Structures\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:28:30','2023-11-17 18:28:30','',76,'https://simplelearn.local/?p=194',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (195,1,'2023-11-17 18:29:53','2023-11-17 18:29:53','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:29:53','2023-11-17 18:29:53','',76,'https://simplelearn.local/?p=195',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (196,1,'2023-11-17 18:31:31','2023-11-17 18:31:31','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\r\nwith open(\"example.txt\", \"r\") as file:\r\n    data = file.read()\r\n    print(data)\r\n\r\n# File Handling - Writing to a file\r\nwith open(\"output.txt\", \"w\") as file:\r\n    file.write(\"This is a test.\")\r</code></pre>\n<!-- /wp:code -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:31:31','2023-11-17 18:31:31','',76,'https://simplelearn.local/?p=196',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (197,1,'2023-11-17 18:31:48','2023-11-17 18:31:48','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\r\nwith open(\"example.txt\", \"r\") as file:\r\n    data = file.read()\r\n    print(data)\r\n\r\n# File Handling - Writing to a file\r\nwith open(\"output.txt\", \"w\") as file:\r\n    file.write(\"This is a test.\")\r</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:31:48','2023-11-17 18:31:48','',76,'https://simplelearn.local/?p=197',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (198,1,'2023-11-17 18:33:30','2023-11-17 18:33:30','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\r\nwith open(\"example.txt\", \"r\") as file:\r\n    data = file.read()\r\n    print(data)\r\n\r\n# File Handling - Writing to a file\r\nwith open(\"output.txt\", \"w\") as file:\r\n    file.write(\"This is a test.\")\r</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:33:30','2023-11-17 18:33:30','',76,'https://simplelearn.local/?p=198',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (199,1,'2023-11-17 18:34:39','2023-11-17 18:34:39','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:34:39','2023-11-17 18:34:39','',76,'https://simplelearn.local/?p=199',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (200,1,'2023-11-17 18:36:35','2023-11-17 18:36:35','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\r\n# Lists - Mutable collections\r\nnumbers = &#91;1, 2, 3, 4, 5]\r\n\r\n# Accessing elements\r\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\r\n\r\n# Dictionaries - Key-value pairs\r\nperson = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"city\": \"New York\"\r\n}\r\n\r\n# Accessing values\r\nprint(person&#91;\"name\"])\r\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\r\n# Tuples - Immutable collections\r\ncoordinates = (10, 20)\r\n\r\n# Sets - Unordered unique collections\r\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:36:35','2023-11-17 18:36:35','',76,'https://simplelearn.local/?p=200',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (201,1,'2023-11-17 18:38:26','2023-11-17 18:38:26','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":7} -->\n<ol start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":9} -->\n<ol start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":11} -->\n<ol start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true,\"start\":12} -->\n<ol start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\r\n# Lists - Mutable collections\r\nnumbers = &#91;1, 2, 3, 4, 5]\r\n\r\n# Accessing elements\r\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\r\n\r\n# Dictionaries - Key-value pairs\r\nperson = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"city\": \"New York\"\r\n}\r\n\r\n# Accessing values\r\nprint(person&#91;\"name\"])\r\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\r\n# Tuples - Immutable collections\r\ncoordinates = (10, 20)\r\n\r\n# Sets - Unordered unique collections\r\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:38:26','2023-11-17 18:38:26','',76,'https://simplelearn.local/?p=201',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (202,1,'2023-11-17 18:40:25','2023-11-17 18:40:25','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\r\n# Lists - Mutable collections\r\nnumbers = &#91;1, 2, 3, 4, 5]\r\n\r\n# Accessing elements\r\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\r\n\r\n# Dictionaries - Key-value pairs\r\nperson = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"city\": \"New York\"\r\n}\r\n\r\n# Accessing values\r\nprint(person&#91;\"name\"])\r\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\r\n# Tuples - Immutable collections\r\ncoordinates = (10, 20)\r\n\r\n# Sets - Unordered unique collections\r\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:40:25','2023-11-17 18:40:25','',76,'https://simplelearn.local/?p=202',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (203,1,'2023-11-17 18:42:49','2023-11-17 18:42:49','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\r\n# Lists - Mutable collections\r\nnumbers = &#91;1, 2, 3, 4, 5]\r\n\r\n# Accessing elements\r\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\r\n\r\n# Dictionaries - Key-value pairs\r\nperson = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"city\": \"New York\"\r\n}\r\n\r\n# Accessing values\r\nprint(person&#91;\"name\"])\r\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\r\n# Tuples - Immutable collections\r\ncoordinates = (10, 20)\r\n\r\n# Sets - Unordered unique collections\r\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\r\nclass Dog:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def bark(self):\r\n        print(\"Woof!\")\r\n\r\n# Creating an object (instance of the Dog class)\r\nmy_dog = Dog(\"Buddy\", 3)\r\n\r\n# Accessing object attributes\r\nprint(my_dog.name)\r\nprint(my_dog.age)\r\n\r\n# Calling object methods\r\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\r\nclass Animal:\r\n    def sound(self):\r\n        pass  # Placeholder method\r\n\r\nclass Dog(Animal):\r\n    def sound(self):\r\n        print(\"Woof!\")\r\n\r\nclass Cat(Animal):\r\n    def sound(self):\r\n        print(\"Meow!\")\r\n\r\n# Polymorphic behavior\r\ndef make_sound(animal):\r\n    animal.sound()\r\n\r\nmake_sound(Dog())  # Output: Woof!\r\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:42:49','2023-11-17 18:42:49','',76,'https://simplelearn.local/?p=203',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (204,1,'2023-11-17 18:43:17','2023-11-17 18:43:17','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\r\n# Lists - Mutable collections\r\nnumbers = &#91;1, 2, 3, 4, 5]\r\n\r\n# Accessing elements\r\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\r\n\r\n# Dictionaries - Key-value pairs\r\nperson = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"city\": \"New York\"\r\n}\r\n\r\n# Accessing values\r\nprint(person&#91;\"name\"])\r\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\r\n# Tuples - Immutable collections\r\ncoordinates = (10, 20)\r\n\r\n# Sets - Unordered unique collections\r\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\r\nclass Dog:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def bark(self):\r\n        print(\"Woof!\")\r\n\r\n# Creating an object (instance of the Dog class)\r\nmy_dog = Dog(\"Buddy\", 3)\r\n\r\n# Accessing object attributes\r\nprint(my_dog.name)\r\nprint(my_dog.age)\r\n\r\n# Calling object methods\r\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\r\nclass Animal:\r\n    def sound(self):\r\n        pass  # Placeholder method\r\n\r\nclass Dog(Animal):\r\n    def sound(self):\r\n        print(\"Woof!\")\r\n\r\nclass Cat(Animal):\r\n    def sound(self):\r\n        print(\"Meow!\")\r\n\r\n# Polymorphic behavior\r\ndef make_sound(animal):\r\n    animal.sound()\r\n\r\nmake_sound(Dog())  # Output: Woof!\r\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:43:17','2023-11-17 18:43:17','',76,'https://simplelearn.local/?p=204',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (205,1,'2023-11-17 18:44:46','2023-11-17 18:44:46','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\r\ndef greet(name):\r\n    print(\"Hello,\", name)\r\n\r\ngreet(\"Alice\")\r\ngreet(\"Bob\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\r\nimport math  # Importing a module\r\n\r\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\r\n\r\n# Creating a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\r\ntry:\r\n    result = 10 / 0  # Trying to divide by zero, which raises an error\r\nexcept ZeroDivisionError:\r\n    print(\"Error: Division by zero is not allowed\")\r\nelse:\r\n    print(\"No error occurred\")\r\nfinally:\r\n    print(\"This will always execute\")\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\r\n# Lists - Mutable collections\r\nnumbers = &#91;1, 2, 3, 4, 5]\r\n\r\n# Accessing elements\r\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\r\n\r\n# Dictionaries - Key-value pairs\r\nperson = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"city\": \"New York\"\r\n}\r\n\r\n# Accessing values\r\nprint(person&#91;\"name\"])\r\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\r\n# Tuples - Immutable collections\r\ncoordinates = (10, 20)\r\n\r\n# Sets - Unordered unique collections\r\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\r\nclass Dog:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def bark(self):\r\n        print(\"Woof!\")\r\n\r\n# Creating an object (instance of the Dog class)\r\nmy_dog = Dog(\"Buddy\", 3)\r\n\r\n# Accessing object attributes\r\nprint(my_dog.name)\r\nprint(my_dog.age)\r\n\r\n# Calling object methods\r\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\r\nclass Animal:\r\n    def sound(self):\r\n        pass  # Placeholder method\r\n\r\nclass Dog(Animal):\r\n    def sound(self):\r\n        print(\"Woof!\")\r\n\r\nclass Cat(Animal):\r\n    def sound(self):\r\n        print(\"Meow!\")\r\n\r\n# Polymorphic behavior\r\ndef make_sound(animal):\r\n    animal.sound()\r\n\r\nmake_sound(Dog())  # Output: Woof!\r\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\r\n\r\n# Regular Expression Basics\r\ntext = \"Hello, my email is example@email.com\"\r\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\r\n\r\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\r\n\r\nif match:\r\n    print(\"Found:\", match.group())  # Output: example@email.com\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:44:46','2023-11-17 18:44:46','',76,'https://simplelearn.local/?p=205',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (206,1,'2023-11-17 18:45:36','2023-11-17 18:45:36','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:45:36','2023-11-17 18:45:36','',76,'https://simplelearn.local/?p=206',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (207,1,'2023-11-17 18:46:14','2023-11-17 18:46:14','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:46:14','2023-11-17 18:46:14','',76,'https://simplelearn.local/?p=207',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (208,1,'2023-11-17 18:50:32','2023-11-17 18:50:32','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:50:32','2023-11-17 18:50:32','',76,'https://simplelearn.local/?p=208',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (209,1,'2023-11-17 18:51:16','2023-11-17 18:51:16','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:51:16','2023-11-17 18:51:16','',76,'https://simplelearn.local/?p=209',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (210,1,'2023-11-17 18:53:14','2023-11-17 18:53:14','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:53:14','2023-11-17 18:53:14','',76,'https://simplelearn.local/?p=210',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (211,1,'2023-11-17 18:53:39','2023-11-17 18:53:39','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:53:39','2023-11-17 18:53:39','',76,'https://simplelearn.local/?p=211',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (212,1,'2023-11-17 18:56:03','2023-11-17 18:56:03','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:56:03','2023-11-17 18:56:03','',76,'https://simplelearn.local/?p=212',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (213,1,'2023-11-17 18:56:56','2023-11-17 18:56:56','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:56:56','2023-11-17 18:56:56','',76,'https://simplelearn.local/?p=213',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (214,1,'2023-11-17 18:58:04','2023-11-17 18:58:04','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 18:58:04','2023-11-17 18:58:04','',76,'https://simplelearn.local/?p=214',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (215,1,'2023-11-17 19:00:53','2023-11-17 19:00:53','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:00:53','2023-11-17 19:00:53','',76,'https://simplelearn.local/?p=215',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (216,1,'2023-11-17 19:02:39','2023-11-17 19:02:39','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:02:39','2023-11-17 19:02:39','',76,'https://simplelearn.local/?p=216',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (217,1,'2023-11-17 19:03:20','2023-11-17 19:03:20','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:03:20','2023-11-17 19:03:20','',76,'https://simplelearn.local/?p=217',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (218,1,'2023-11-17 19:03:29','2023-11-17 19:03:29','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:03:29','2023-11-17 19:03:29','',76,'https://simplelearn.local/?p=218',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (219,1,'2023-11-17 19:03:59','2023-11-17 19:03:59','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:03:59','2023-11-17 19:03:59','',76,'https://simplelearn.local/?p=219',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (220,1,'2023-11-17 19:05:36','2023-11-17 19:05:36','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:05:36','2023-11-17 19:05:36','',76,'https://simplelearn.local/?p=220',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (221,1,'2023-11-17 19:05:46','2023-11-17 19:05:46','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Functions &amp; Modules:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. More Types:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Regular Expressions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\r\n# Building a package structure\r\n# my_package/\r\n# ├── __init__.py\r\n# ├── module1.py\r\n# └── module2.py\r\n\r\n# Distributing Python Code\r\n# Using tools like pip to install and distribute packages\r\n# pip install package_name\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:05:46','2023-11-17 19:05:46','',76,'https://simplelearn.local/?p=221',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (223,1,'2023-11-17 19:12:32','2023-11-17 19:12:32','<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:paragraph {\"placeholder\":\"Type / to add a hidden block\"} -->\n<p></p>\n<!-- /wp:paragraph --></details>\n<!-- /wp:details -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 19:12:32','2023-11-17 19:12:32','',119,'https://simplelearn.local/?p=223',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (224,1,'2023-11-17 19:15:38','2023-11-17 19:15:38','<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Basic Concepts</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Conditionals and Loops</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Functions</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Arrays &amp; Pointers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Strings &amp; Function Pointers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Structures &amp; Unions</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Memory Management</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Files &amp; Error Handling</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>The Preprocessor</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 19:15:38','2023-11-17 19:15:38','',119,'https://simplelearn.local/?p=224',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (225,1,'2023-11-17 19:18:31','2023-11-17 19:18:31','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Basic Concepts</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Conditionals and Loops</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Functions</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Arrays &amp; Pointers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Strings &amp; Function Pointers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Structures &amp; Unions</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Memory Management</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Files &amp; Error Handling</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>The Preprocessor</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 19:18:31','2023-11-17 19:18:31','',119,'https://simplelearn.local/?p=225',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (226,1,'2023-11-17 19:20:40','2023-11-17 19:20:40','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1. Basic Concepts:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2. Functions &amp; Modules:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">4. More Types:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6. Regular Expressions:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\n# Building a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n\n# Distributing Python Code\n# Using tools like pip to install and distribute packages\n# pip install package_name\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-17 19:20:40','2023-11-17 19:20:40','',76,'https://simplelearn.local/?p=226',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (227,1,'2023-11-17 19:21:18','2023-11-17 19:21:18','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Basic Concepts</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Conditionals and Loops</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Functions</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Arrays &amp; Pointers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Strings &amp; Function Pointers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Structures &amp; Unions</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Memory Management</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Files &amp; Error Handling</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>The Preprocessor</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-17 19:21:18','2023-11-17 19:21:18','',119,'https://simplelearn.local/?p=227',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (228,1,'2023-11-18 08:18:49','2023-11-18 08:18:49','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:18:49','2023-11-18 08:18:49','',119,'https://simplelearn.local/?p=228',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (229,1,'2023-11-18 08:19:00','2023-11-18 08:19:00','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 08:19:00','2023-11-18 08:19:00','',6,'https://simplelearn.local/?p=229',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (230,1,'2023-11-18 08:25:50','2023-11-18 08:25:50','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"full\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignfull has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:25:50','2023-11-18 08:25:50','',119,'https://simplelearn.local/?p=230',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (231,1,'2023-11-18 08:26:21','2023-11-18 08:26:21','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:26:21','2023-11-18 08:26:21','',119,'https://simplelearn.local/?p=231',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (232,1,'2023-11-18 08:29:56','2023-11-18 08:29:56','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:29:56','2023-11-18 08:29:56','',119,'https://simplelearn.local/?p=232',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (233,1,'2023-11-18 08:32:23','2023-11-18 08:32:23','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:32:23','2023-11-18 08:32:23','',119,'https://simplelearn.local/?p=233',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (234,1,'2023-11-18 08:32:57','2023-11-18 08:32:57','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"></h2>\n<!-- /wp:heading -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:32:57','2023-11-18 08:32:57','',119,'https://simplelearn.local/?p=234',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (235,1,'2023-11-18 08:34:26','2023-11-18 08:34:26','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:34:26','2023-11-18 08:34:26','',119,'https://simplelearn.local/?p=235',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (236,1,'2023-11-18 08:34:51','2023-11-18 08:34:51','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:34:51','2023-11-18 08:34:51','',119,'https://simplelearn.local/?p=236',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (237,1,'2023-11-18 08:35:03','2023-11-18 08:35:03','{\"styles\":[],\"settings\":[],\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 08:35:03','2023-11-18 08:35:03','',6,'https://simplelearn.local/?p=237',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (238,1,'2023-11-18 08:37:44','2023-11-18 08:37:44','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"></h2>\n<!-- /wp:heading -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:37:44','2023-11-18 08:37:44','',119,'https://simplelearn.local/?p=238',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (239,1,'2023-11-18 08:38:56','2023-11-18 08:38:56','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:38:56','2023-11-18 08:38:56','',119,'https://simplelearn.local/?p=239',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (240,1,'2023-11-18 08:39:54','2023-11-18 08:39:54','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:39:54','2023-11-18 08:39:54','',119,'https://simplelearn.local/?p=240',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (241,1,'2023-11-18 08:40:17','2023-11-18 08:40:17','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:40:17','2023-11-18 08:40:17','',119,'https://simplelearn.local/?p=241',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (242,1,'2023-11-18 08:40:41','2023-11-18 08:40:41','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:40:41','2023-11-18 08:40:41','',119,'https://simplelearn.local/?p=242',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (243,1,'2023-11-18 08:41:19','2023-11-18 08:41:19','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:41:19','2023-11-18 08:41:19','',119,'https://simplelearn.local/?p=243',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (244,1,'2023-11-18 08:42:35','2023-11-18 08:42:35','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\r\n\r\n// Reallocating memory\r\narr = (int *)realloc(arr, 10 * sizeof(int));\r\n\r\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><br>Certainly! Here\'s the breakdown for \"Memory Management\" in C programming:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Dynamic Memory Allocation</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Example:cCopy code<code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array // Reallocating memory arr = (int *)realloc(arr, 10 * sizeof(int)); free(arr); // Deallocating memory when done using it</code></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Memory Leaks and Management Techniques</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:42:35','2023-11-18 08:42:35','',119,'https://simplelearn.local/?p=244',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (245,1,'2023-11-18 08:43:50','2023-11-18 08:43:50','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\r\n\r\n// Reallocating memory\r\narr = (int *)realloc(arr, 10 * sizeof(int));\r\n\r\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:43:50','2023-11-18 08:43:50','',119,'https://simplelearn.local/?p=245',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (246,1,'2023-11-18 08:45:33','2023-11-18 08:45:33','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\r\n\r\n// Reallocating memory\r\narr = (int *)realloc(arr, 10 * sizeof(int));\r\n\r\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files \\u0026 Error Handling\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File operations involve opening, reading, writing, and closing files.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Standard library functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, <code>fscanf()</code>, <code>fgets()</code>, and <code>fputs()</code> are used.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"example.txt\", \"w\"); // Opening file in write mode\r\nif (file_ptr != NULL) {\r\n    fprintf(file_ptr, \"Writing to file\\n\");\r\n    fclose(file_ptr); // Closing the file\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Error Handling and Debugging Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Error handling involves checking for errors during file operations and handling them gracefully.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques include checking return values of file operations and using conditional statements to handle errors.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"nonexistent.txt\", \"r\"); // Attempting to open a non-existent file\r\nif (file_ptr == NULL) {\r\n    printf(\"Error opening file\\n\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling is essential for input/output operations in C programming. Effective error handling ensures robustness and reliability in file operations, preventing unexpected errors during file handling processes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:45:33','2023-11-18 08:45:33','',119,'https://simplelearn.local/?p=246',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (247,1,'2023-11-18 08:48:08','2023-11-18 08:48:08','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\r\n\r\n// Reallocating memory\r\narr = (int *)realloc(arr, 10 * sizeof(int));\r\n\r\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files \\u0026 Error Handling\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File operations involve opening, reading, writing, and closing files.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Standard library functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, <code>fscanf()</code>, <code>fgets()</code>, and <code>fputs()</code> are used.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"example.txt\", \"w\"); // Opening file in write mode\r\nif (file_ptr != NULL) {\r\n    fprintf(file_ptr, \"Writing to file\\n\");\r\n    fclose(file_ptr); // Closing the file\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Error Handling and Debugging Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Error handling involves checking for errors during file operations and handling them gracefully.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques include checking return values of file operations and using conditional statements to handle errors.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"nonexistent.txt\", \"r\"); // Attempting to open a non-existent file\r\nif (file_ptr == NULL) {\r\n    printf(\"Error opening file\\n\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling is essential for input/output operations in C programming. Effective error handling ensures robustness and reliability in file operations, preventing unexpected errors during file handling processes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"The Preprocessor\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Macros and <code>#define</code></strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#define</code> directive is used to define macros, which are symbolic constants or short functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#define PI 3.14159\r\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#ifdef</code> checks if a macro is defined, <code>#ifndef</code> checks if a macro is not defined, and <code>#endif</code> denotes the end of a conditional block.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#ifndef DEBUG\r\n#define DEBUG\r\n#endif\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The preprocessor in C is a powerful tool for code manipulation before compilation. It allows defining constants, creating macros, and conditional compilation, enabling better code organization and portability. Understanding and utilizing the preprocessor directives contribute to writing efficient and maintainable C programs.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:48:08','2023-11-18 08:48:08','',119,'https://simplelearn.local/?p=247',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (248,1,'2023-11-18 08:49:15','2023-11-18 08:49:15','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\r\n\r\n// Reallocating memory\r\narr = (int *)realloc(arr, 10 * sizeof(int));\r\n\r\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files \\u0026 Error Handling\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File operations involve opening, reading, writing, and closing files.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Standard library functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, <code>fscanf()</code>, <code>fgets()</code>, and <code>fputs()</code> are used.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"example.txt\", \"w\"); // Opening file in write mode\r\nif (file_ptr != NULL) {\r\n    fprintf(file_ptr, \"Writing to file\\n\");\r\n    fclose(file_ptr); // Closing the file\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Error Handling and Debugging Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Error handling involves checking for errors during file operations and handling them gracefully.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques include checking return values of file operations and using conditional statements to handle errors.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"nonexistent.txt\", \"r\"); // Attempting to open a non-existent file\r\nif (file_ptr == NULL) {\r\n    printf(\"Error opening file\\n\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling is essential for input/output operations in C programming. Effective error handling ensures robustness and reliability in file operations, preventing unexpected errors during file handling processes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"The Preprocessor\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Macros and <code>#define</code></strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#define</code> directive is used to define macros, which are symbolic constants or short functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#define PI 3.14159\r\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#ifdef</code> checks if a macro is defined, <code>#ifndef</code> checks if a macro is not defined, and <code>#endif</code> denotes the end of a conditional block.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#ifndef DEBUG\r\n#define DEBUG\r\n#endif\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The preprocessor in C is a powerful tool for code manipulation before compilation. It allows defining constants, creating macros, and conditional compilation, enabling better code organization and portability. Understanding and utilizing the preprocessor directives contribute to writing efficient and maintainable C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our C Course</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through the fundamental aspects of C programming, we\'ve delved into the intricacies of variables, control structures, functions, memory management, file handling, and more. This course has equipped you with a solid foundation in C, a language renowned for its efficiency and versatility. Remember, mastering C programming is a continuous learning process. Practicing coding challenges, exploring real-world applications, and diving deeper into advanced concepts will further solidify your expertise. Congratulations on completing this course, and may your coding journey with C be both rewarding and full of innovation!</p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:49:15','2023-11-18 08:49:15','',119,'https://simplelearn.local/?p=248',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (249,1,'2023-11-18 08:50:03','2023-11-18 08:50:03','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nprintf(\"Enter a number: \");\r\nscanf(\"%d\", &amp;num);\r\nprintf(\"You entered: %d\", num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h>  // Header file for standard input/output\r\n\r\nint main() {\r\n    printf(\"Hello, C Programming!\");\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    printf(\"x is positive\");\r\n} else if (x == 0) {\r\n    printf(\"x is zero\");\r\n} else {\r\n    printf(\"x is negative\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        printf(\"Option 1 selected\");\r\n        break;\r\n    case 2:\r\n        printf(\"Option 2 selected\");\r\n        break;\r\n    default:\r\n        printf(\"Invalid option\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    printf(\"%d \", i);\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    printf(\"%d \", count);\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    printf(\"%d \", num);\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(3, 5); // Result: 8\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\r\nvoid square(int num) {\r\n    num = num * num;\r\n}\r\nint x = 5;\r\nsquare(x);  // x remains unchanged\r\n\r\n// Pass by reference\r\nvoid increment(int *ptr) {\r\n    (*ptr)++;\r\n}\r\nint y = 10;\r\nincrement(&amp;y);  // y is incremented to 11\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\r\nint multiply(int a, int b) {\r\n    return a * b;\r\n}\r\n\r\n// Recursion\r\nint factorial(int n) {\r\n    if (n == 0 || n == 1) {\r\n        return 1;\r\n    } else {\r\n        return n * factorial(n - 1);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr;  // Pointer declaration\r\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\r\n\r\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\r\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\r\n\r\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\r\nchar name&#91;10] = \"Alice\";\r\n\r\n// Concatenating strings\r\nstrcat(greeting, \" \");  // Appending a space\r\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\r\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\r\n    printf(\"Hello!\\n\");\r\n}\r\n\r\nvoid say_hi(void (*function_ptr)()) {\r\n    function_ptr();  // Invoking function using function pointer\r\n}\r\n\r\nint main() {\r\n    void (*ptr)() = greet;  // Assigning function address to pointer\r\n    say_hi(ptr);  // Passing function pointer as an argument\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\r\nstruct Person {\r\n    char name&#91;50];\r\n    int age;\r\n    float height;\r\n};\r\n\r\n// Structure initialization\r\nstruct Person person1 = {\"Alice\", 25, 5.8};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\r\nstruct Address {\r\n    char city&#91;50];\r\n    int postal_code;\r\n};\r\n\r\nstruct Employee {\r\n    char name&#91;50];\r\n    int emp_id;\r\n    struct Address address;  // Nested structure\r\n};\r\n\r\n// Union\r\nunion Data {\r\n    int num;\r\n    float decimal;\r\n    char letter;\r\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\r\n\r\n// Reallocating memory\r\narr = (int *)realloc(arr, 10 * sizeof(int));\r\n\r\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files \\u0026 Error Handling\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File operations involve opening, reading, writing, and closing files.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Standard library functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, <code>fscanf()</code>, <code>fgets()</code>, and <code>fputs()</code> are used.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"example.txt\", \"w\"); // Opening file in write mode\r\nif (file_ptr != NULL) {\r\n    fprintf(file_ptr, \"Writing to file\\n\");\r\n    fclose(file_ptr); // Closing the file\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Error Handling and Debugging Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Error handling involves checking for errors during file operations and handling them gracefully.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques include checking return values of file operations and using conditional statements to handle errors.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\r\nfile_ptr = fopen(\"nonexistent.txt\", \"r\"); // Attempting to open a non-existent file\r\nif (file_ptr == NULL) {\r\n    printf(\"Error opening file\\n\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling is essential for input/output operations in C programming. Effective error handling ensures robustness and reliability in file operations, preventing unexpected errors during file handling processes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"The Preprocessor\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Macros and <code>#define</code></strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#define</code> directive is used to define macros, which are symbolic constants or short functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#define PI 3.14159\r\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#ifdef</code> checks if a macro is defined, <code>#ifndef</code> checks if a macro is not defined, and <code>#endif</code> denotes the end of a conditional block.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#ifndef DEBUG\r\n#define DEBUG\r\n#endif\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The preprocessor in C is a powerful tool for code manipulation before compilation. It allows defining constants, creating macros, and conditional compilation, enabling better code organization and portability. Understanding and utilizing the preprocessor directives contribute to writing efficient and maintainable C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our C Course</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through the fundamental aspects of C programming, we\'ve delved into the intricacies of variables, control structures, functions, memory management, file handling, and more. This course has equipped you with a solid foundation in C, a language renowned for its efficiency and versatility. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, mastering C programming is a continuous learning process. Practicing coding challenges, exploring real-world applications, and diving deeper into advanced concepts will further solidify your expertise. Congratulations on completing this course, and may your coding journey with C be both rewarding and full of innovation!</p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 08:50:03','2023-11-18 08:50:03','',119,'https://simplelearn.local/?p=249',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (250,1,'2023-11-18 09:22:42','2023-11-18 09:22:42','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:22:42','2023-11-18 09:22:42','',121,'https://simplelearn.local/?p=250',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (251,1,'2023-11-18 09:24:00','2023-11-18 09:24:00','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:24:00','2023-11-18 09:24:00','',121,'https://simplelearn.local/?p=251',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (252,1,'2023-11-18 09:24:43','2023-11-18 09:24:43','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:24:43','2023-11-18 09:24:43','',121,'https://simplelearn.local/?p=252',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (253,1,'2023-11-18 09:27:01','2023-11-18 09:27:01','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:27:01','2023-11-18 09:27:01','',121,'https://simplelearn.local/?p=253',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (254,1,'2023-11-18 09:29:11','2023-11-18 09:29:11','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:29:11','2023-11-18 09:29:11','',121,'https://simplelearn.local/?p=254',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (255,1,'2023-11-18 09:30:02','2023-11-18 09:30:02','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code></code></pre>\n<!-- /wp:code -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:30:02','2023-11-18 09:30:02','',121,'https://simplelearn.local/?p=255',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (256,1,'2023-11-18 09:32:40','2023-11-18 09:32:40','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:32:40','2023-11-18 09:32:40','',121,'https://simplelearn.local/?p=256',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (257,1,'2023-11-18 09:32:58','2023-11-18 09:32:58','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:32:58','2023-11-18 09:32:58','',121,'https://simplelearn.local/?p=257',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (258,1,'2023-11-18 09:35:24','2023-11-18 09:35:24','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:35:24','2023-11-18 09:35:24','',121,'https://simplelearn.local/?p=258',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (259,1,'2023-11-18 09:35:57','2023-11-18 09:35:57','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:35:57','2023-11-18 09:35:57','',121,'https://simplelearn.local/?p=259',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (260,1,'2023-11-18 09:38:25','2023-11-18 09:38:25','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:38:25','2023-11-18 09:38:25','',121,'https://simplelearn.local/?p=260',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (261,1,'2023-11-18 09:40:38','2023-11-18 09:40:38','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:40:38','2023-11-18 09:40:38','',121,'https://simplelearn.local/?p=261',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (262,1,'2023-11-18 09:43:46','2023-11-18 09:43:46','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:43:46','2023-11-18 09:43:46','',121,'https://simplelearn.local/?p=262',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (263,1,'2023-11-18 09:45:19','2023-11-18 09:45:19','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Inheritance \\u0026 Polymorphism\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheriting Classes and Base-Derived Relationships</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance allows a new class (derived class) to inherit properties and behavior from an existing class (base class).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for inheriting classes:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Vehicle {\r\n    // ... (attributes and methods)\r\n};\r\n\r\n// Derived class\r\nclass Car : public Vehicle {\r\n    // ... (additional attributes and methods)\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Polymorphism: Function Overriding and Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overriding redefines a base class function in a derived class.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Virtual functions allow dynamic binding and late binding.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Shape {\r\n    public:\r\n        virtual void draw() {\r\n            std::cout &lt;&lt; \"Drawing a shape\";\r\n        }\r\n};\r\n\r\n// Derived class\r\nclass Circle : public Shape {\r\n    public:\r\n        void draw() override {\r\n            std::cout &lt;&lt; \"Drawing a circle\";\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Pure Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain at least one pure virtual function (virtual function with no implementation).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cannot be instantiated, used as base classes.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Abstract class\r\nclass Animal {\r\n    public:\r\n        virtual void makeSound() = 0; // Pure virtual function\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Inheritance and polymorphism are core concepts in object-oriented programming. Inheritance allows the creation of new classes based on existing ones, facilitating code reuse and structure. Polymorphism enables the use of a single interface for different data types and behaviors, enhancing flexibility and extensibility in software design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:45:19','2023-11-18 09:45:19','',121,'https://simplelearn.local/?p=263',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (264,1,'2023-11-18 09:49:50','2023-11-18 09:49:50','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Inheritance \\u0026 Polymorphism\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheriting Classes and Base-Derived Relationships</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance allows a new class (derived class) to inherit properties and behavior from an existing class (base class).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for inheriting classes:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Vehicle {\r\n    // ... (attributes and methods)\r\n};\r\n\r\n// Derived class\r\nclass Car : public Vehicle {\r\n    // ... (additional attributes and methods)\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Polymorphism: Function Overriding and Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overriding redefines a base class function in a derived class.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Virtual functions allow dynamic binding and late binding.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Shape {\r\n    public:\r\n        virtual void draw() {\r\n            std::cout &lt;&lt; \"Drawing a shape\";\r\n        }\r\n};\r\n\r\n// Derived class\r\nclass Circle : public Shape {\r\n    public:\r\n        void draw() override {\r\n            std::cout &lt;&lt; \"Drawing a circle\";\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Pure Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain at least one pure virtual function (virtual function with no implementation).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cannot be instantiated, used as base classes.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Abstract class\r\nclass Animal {\r\n    public:\r\n        virtual void makeSound() = 0; // Pure virtual function\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Inheritance and polymorphism are core concepts in object-oriented programming. Inheritance allows the creation of new classes based on existing ones, facilitating code reuse and structure. Polymorphism enables the use of a single interface for different data types and behaviors, enhancing flexibility and extensibility in software design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Templates\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Generic Programming with Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Templates allow writing generic classes and functions that work with any data type.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function templates:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT maximum(T x, T y) {\r\n    return (x > y) ? x : y;\r\n}\r\n\r\n// Using the template function\r\nint maxInt = maximum(5, 10);\r\nfloat maxFloat = maximum(3.5, 7.8);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Templates and Class Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function templates define generic functions that can accept multiple data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Class templates define generic classes that can handle various data types.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT add(T x, T y) {\r\n    return x + y;\r\n}\r\n\r\n// Class template\r\ntemplate&lt;typename T>\r\nclass Container {\r\n    T value;\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Specialization and Explicit Instantiation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Template specialization allows customizing templates for specific data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Explicit instantiation provides control over template instantiation.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Template specialization\r\ntemplate&lt;>\r\nclass Container&lt;int> {\r\n    int value;\r\n};\r\n\r\n// Explicit instantiation\r\ntemplate class Container&lt;float>; // Explicit instantiation for float\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Templates in C++ enable generic programming, where algorithms and data structures can work with various data types. Function templates and class templates provide flexibility in creating reusable code that adapts to different data types without sacrificing type safety.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:49:50','2023-11-18 09:49:50','',121,'https://simplelearn.local/?p=264',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (265,1,'2023-11-18 09:51:30','2023-11-18 09:51:30','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Inheritance \\u0026 Polymorphism\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheriting Classes and Base-Derived Relationships</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance allows a new class (derived class) to inherit properties and behavior from an existing class (base class).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for inheriting classes:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Vehicle {\r\n    // ... (attributes and methods)\r\n};\r\n\r\n// Derived class\r\nclass Car : public Vehicle {\r\n    // ... (additional attributes and methods)\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Polymorphism: Function Overriding and Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overriding redefines a base class function in a derived class.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Virtual functions allow dynamic binding and late binding.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Shape {\r\n    public:\r\n        virtual void draw() {\r\n            std::cout &lt;&lt; \"Drawing a shape\";\r\n        }\r\n};\r\n\r\n// Derived class\r\nclass Circle : public Shape {\r\n    public:\r\n        void draw() override {\r\n            std::cout &lt;&lt; \"Drawing a circle\";\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Pure Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain at least one pure virtual function (virtual function with no implementation).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cannot be instantiated, used as base classes.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Abstract class\r\nclass Animal {\r\n    public:\r\n        virtual void makeSound() = 0; // Pure virtual function\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Inheritance and polymorphism are core concepts in object-oriented programming. Inheritance allows the creation of new classes based on existing ones, facilitating code reuse and structure. Polymorphism enables the use of a single interface for different data types and behaviors, enhancing flexibility and extensibility in software design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Templates\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Generic Programming with Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Templates allow writing generic classes and functions that work with any data type.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function templates:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT maximum(T x, T y) {\r\n    return (x > y) ? x : y;\r\n}\r\n\r\n// Using the template function\r\nint maxInt = maximum(5, 10);\r\nfloat maxFloat = maximum(3.5, 7.8);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Templates and Class Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function templates define generic functions that can accept multiple data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Class templates define generic classes that can handle various data types.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT add(T x, T y) {\r\n    return x + y;\r\n}\r\n\r\n// Class template\r\ntemplate&lt;typename T>\r\nclass Container {\r\n    T value;\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Specialization and Explicit Instantiation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Template specialization allows customizing templates for specific data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Explicit instantiation provides control over template instantiation.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Template specialization\r\ntemplate&lt;>\r\nclass Container&lt;int> {\r\n    int value;\r\n};\r\n\r\n// Explicit instantiation\r\ntemplate class Container&lt;float>; // Explicit instantiation for float\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Templates in C++ enable generic programming, where algorithms and data structures can work with various data types. Function templates and class templates provide flexibility in creating reusable code that adapts to different data types without sacrificing type safety.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exception Handling (try-catch blocks)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try</code>, <code>catch</code>, and <code>throw</code> for handling exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>try</code> block encloses the code that might generate an exception.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>catch</code> block catches and handles the thrown exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>throw</code> statement generates exceptions explicitly.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that might throw an exception\r\n    if (condition) {\r\n        throw \"Some error occurred\";\r\n    }\r\n}\r\ncatch (const char* error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exceptions can be thrown of various types (int, char*, custom types).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Catch blocks can handle different types of exceptions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    if (condition) {\r\n        throw 404; // Throwing an integer exception\r\n    }\r\n}\r\ncatch (int error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Handling exceptions in C++ provides a mechanism to deal with errors or exceptional scenarios during program execution, enabling the code to gracefully recover from unexpected issues.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:51:30','2023-11-18 09:51:30','',121,'https://simplelearn.local/?p=265',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (266,1,'2023-11-18 09:53:04','2023-11-18 09:53:04','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Inheritance \\u0026 Polymorphism\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheriting Classes and Base-Derived Relationships</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance allows a new class (derived class) to inherit properties and behavior from an existing class (base class).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for inheriting classes:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Vehicle {\r\n    // ... (attributes and methods)\r\n};\r\n\r\n// Derived class\r\nclass Car : public Vehicle {\r\n    // ... (additional attributes and methods)\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Polymorphism: Function Overriding and Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overriding redefines a base class function in a derived class.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Virtual functions allow dynamic binding and late binding.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Shape {\r\n    public:\r\n        virtual void draw() {\r\n            std::cout &lt;&lt; \"Drawing a shape\";\r\n        }\r\n};\r\n\r\n// Derived class\r\nclass Circle : public Shape {\r\n    public:\r\n        void draw() override {\r\n            std::cout &lt;&lt; \"Drawing a circle\";\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Pure Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain at least one pure virtual function (virtual function with no implementation).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cannot be instantiated, used as base classes.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Abstract class\r\nclass Animal {\r\n    public:\r\n        virtual void makeSound() = 0; // Pure virtual function\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Inheritance and polymorphism are core concepts in object-oriented programming. Inheritance allows the creation of new classes based on existing ones, facilitating code reuse and structure. Polymorphism enables the use of a single interface for different data types and behaviors, enhancing flexibility and extensibility in software design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Templates\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Generic Programming with Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Templates allow writing generic classes and functions that work with any data type.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function templates:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT maximum(T x, T y) {\r\n    return (x > y) ? x : y;\r\n}\r\n\r\n// Using the template function\r\nint maxInt = maximum(5, 10);\r\nfloat maxFloat = maximum(3.5, 7.8);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Templates and Class Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function templates define generic functions that can accept multiple data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Class templates define generic classes that can handle various data types.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT add(T x, T y) {\r\n    return x + y;\r\n}\r\n\r\n// Class template\r\ntemplate&lt;typename T>\r\nclass Container {\r\n    T value;\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Specialization and Explicit Instantiation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Template specialization allows customizing templates for specific data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Explicit instantiation provides control over template instantiation.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Template specialization\r\ntemplate&lt;>\r\nclass Container&lt;int> {\r\n    int value;\r\n};\r\n\r\n// Explicit instantiation\r\ntemplate class Container&lt;float>; // Explicit instantiation for float\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Templates in C++ enable generic programming, where algorithms and data structures can work with various data types. Function templates and class templates provide flexibility in creating reusable code that adapts to different data types without sacrificing type safety.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exception Handling (try-catch blocks)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try</code>, <code>catch</code>, and <code>throw</code> for handling exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>try</code> block encloses the code that might generate an exception.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>catch</code> block catches and handles the thrown exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>throw</code> statement generates exceptions explicitly.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that might throw an exception\r\n    if (condition) {\r\n        throw \"Some error occurred\";\r\n    }\r\n}\r\ncatch (const char* error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exceptions can be thrown of various types (int, char*, custom types).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Catch blocks can handle different types of exceptions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    if (condition) {\r\n        throw 404; // Throwing an integer exception\r\n    }\r\n}\r\ncatch (int error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Handling exceptions in C++ provides a mechanism to deal with errors or exceptional scenarios during program execution, enabling the code to gracefully recover from unexpected issues.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling (Reading, Writing, and Closing)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use file streams (<code>ifstream</code>, <code>ofstream</code>, <code>fstream</code>) for file operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>ifstream</code> for reading from files, <code>ofstream</code> for writing to files, and <code>fstream</code> for both.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Open files using file stream objects, perform read/write operations, and close files.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Writing to a file\r\nstd::ofstream outFile(\"file.txt\");\r\noutFile &lt;&lt; \"Hello, File!\";\r\n\r\n// Reading from a file\r\nstd::ifstream inFile(\"file.txt\");\r\nstd::string content;\r\ngetline(inFile, content);\r\nstd::cout &lt;&lt; \"Content: \" &lt;&lt; content;\r\n\r\n// Closing files\r\noutFile.close();\r\ninFile.close();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Streams and File I/O Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File streams use insertion (<code>&lt;&lt;</code>) and extraction (<code>&gt;&gt;</code>) operators similar to standard I/O.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File open modes (<code>ios::in</code>, <code>ios::out</code>, <code>ios::app</code>, <code>ios::binary</code>, etc.) control file operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>std::fstream file(\"data.txt\", std::ios::out | std::ios::app);\r\nif (file.is_open()) {\r\n    file &lt;&lt; \"New data\\n\";\r\n    file.close();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in C++ involves working with file streams to perform reading, writing, and manipulation of files. Understanding file stream operations and file open modes is crucial for managing file I/O effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:53:04','2023-11-18 09:53:04','',121,'https://simplelearn.local/?p=266',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (267,1,'2023-11-18 09:54:27','2023-11-18 09:54:27','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C, created in the early 1970s by Dennis Ritchie at Bell Labs, is a foundational programming language known for its efficiency and flexibility. Its simplicity and low-level features enable precise control over hardware, making it favored in system programming, operating systems, and embedded systems. C\'s influence spans across modern languages, as it served as the basis for C++, C#, and many others. Its direct interaction with memory and hardware, coupled with its portability, has solidified C\'s enduring significance in the programming world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Passing Arguments</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Return Values and Recursion</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Array Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array-Pointer Relationship</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>String Manipulation and Functions</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointers to Functions and Callbacks</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structure Creation and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nested Structures and Unions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Dynamic Memory Allocation (malloc, calloc, free)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Memory Leaks and Management Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Opening, Reading, Writing, Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Error Handling and Debugging Techniques</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Macros and <code>#define</code></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data, and data types define the type of data variables can hold (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\nfloat height = 5.8;\nchar letter = \'A\';</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>printf()</code> and <code>scanf()</code> functions for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\nprintf(\"Enter a number: \");\nscanf(\"%d\", &amp;num);\nprintf(\"You entered: %d\", num);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>C programs consist of functions, where the main function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Programs follow a structure with curly braces <code>{}</code> to define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h&gt;  // Header file for standard input/output\n\nint main() {\n    printf(\"Hello, C Programming!\");\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output, and the basic syntax of C lays the foundation for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\nif (x &gt; 0) {\n    printf(\"x is positive\");\n} else if (x == 0) {\n    printf(\"x is zero\");\n} else {\n    printf(\"x is negative\");\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>A multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\nswitch (choice) {\n    case 1:\n        printf(\"Option 1 selected\");\n        break;\n    case 2:\n        printf(\"Option 2 selected\");\n        break;\n    default:\n        printf(\"Invalid option\");\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\nfor (int i = 0; i &lt; 5; i++) {\n    printf(\"%d \", i);\n}\n\n// While loop\nint count = 0;\nwhile (count &lt; 5) {\n    printf(\"%d \", count);\n    count++;\n}\n\n// Do-while loop\nint num = 0;\ndo {\n    printf(\"%d \", num);\n    num++;\n} while (num &lt; 5);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions encapsulate specific tasks or operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration includes return type, function name, parameters, and body.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\nint add(int a, int b) {\n    return a + b;\n}\n\n// Function invocation\nint result = add(3, 5); // Result: 8\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Passing Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Passing data to functions through parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parameters can be passed by value or by reference.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Pass by value\nvoid square(int num) {\n    num = num * num;\n}\nint x = 5;\nsquare(x);  // x remains unchanged\n\n// Pass by reference\nvoid increment(int *ptr) {\n    (*ptr)++;\n}\nint y = 10;\nincrement(&amp;y);  // y is incremented to 11\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Values and Recursion</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values using the <code>return</code> statement.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Recursion occurs when a function calls itself.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Return value\nint multiply(int a, int b) {\n    return a * b;\n}\n\n// Recursion\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C allow code modularization, enabling better code organization and reuse. Understanding function creation, parameter passing, return values, and recursion is essential for building complex C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays \\u0026 Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays &amp; Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory locations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5];  // Declaration of an integer array of size 5\n\nint values&#91;3] = {10, 20, 30};  // Initializing an array during declaration\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers are variables that store memory addresses.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer arithmetic involves manipulating pointers\' values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\nint *ptr;  // Pointer declaration\nptr = &amp;number;  // Assigning address of \'number\' to \'ptr\'\n\nprintf(\"Value of number: %d\\n\", *ptr);  // Dereferencing pointer to get value\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array-Pointer Relationship</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays and pointers are closely related in C.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array name acts as a pointer to the first element of the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;3] = {1, 2, 3};\nint *arr_ptr = arr;  // Array name \'arr\' acts as a pointer to its first element\n\nprintf(\"First element of array: %d\\n\", *arr_ptr);  // Output: 1\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding arrays and pointers is crucial in C programming as they are extensively used for managing memory, accessing elements, and passing data between functions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Strings \\u0026 Function Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Strings &amp; Function Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>String Manipulation and Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Strings are arrays of characters terminated by a null character <code>\'\\0\'</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String functions in <code>&lt;string.h&gt;</code> library handle string operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>char greeting&#91;20] = \"Hello\";\nchar name&#91;10] = \"Alice\";\n\n// Concatenating strings\nstrcat(greeting, \" \");  // Appending a space\nstrcat(greeting, name); // Appending \'name\' to \'greeting\'\nprintf(\"%s\\n\", greeting); // Output: \"Hello Alice\"\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointers to Functions and Callbacks</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function pointers store addresses of functions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Callback functions are functions passed as arguments to other functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>void greet() {\n    printf(\"Hello!\\n\");\n}\n\nvoid say_hi(void (*function_ptr)()) {\n    function_ptr();  // Invoking function using function pointer\n}\n\nint main() {\n    void (*ptr)() = greet;  // Assigning function address to pointer\n    say_hi(ptr);  // Passing function pointer as an argument\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding string manipulation and utilizing function pointers are essential in C programming for handling text-based data and implementing callbacks for various functionalities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Structures \\u0026 Unions\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Structures &amp; Unions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Structure Creation and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures allow grouping different data types under a single name.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Structure declaration\nstruct Person {\n    char name&#91;50];\n    int age;\n    float height;\n};\n\n// Structure initialization\nstruct Person person1 = {\"Alice\", 25, 5.8};\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Nested Structures and Unions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Structures can contain other structures (nested structures) or be members of unions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Nested structure\nstruct Address {\n    char city&#91;50];\n    int postal_code;\n};\n\nstruct Employee {\n    char name&#91;50];\n    int emp_id;\n    struct Address address;  // Nested structure\n};\n\n// Union\nunion Data {\n    int num;\n    float decimal;\n    char letter;\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Structures in C allow bundling different data types together, facilitating better organization and representation of complex data. Unions provide a way to store different data types in the same memory location. Understanding these concepts is crucial for managing and working with structured data in C programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Memory Management\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. <strong>Memory Management</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Dynamic Memory Allocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, and <code>free()</code> are used for dynamic memory allocation and deallocation.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>malloc()</code> allocates memory, <code>calloc()</code> allocates and initializes memory to zero, <code>realloc()</code> reallocates memory, and <code>free()</code> deallocates memory.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int *arr = (int *)malloc(5 * sizeof(int)); // Allocating memory for an integer array\n\n// Reallocating memory\narr = (int *)realloc(arr, 10 * sizeof(int));\n\nfree(arr); // Deallocating memory when done using it</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Memory Leaks and Management Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Memory leaks occur when allocated memory is not deallocated properly.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Proper memory management involves deallocating memory when no longer needed to prevent memory leaks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques like tracking allocated memory and ensuring proper deallocation help manage memory efficiently.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Understanding dynamic memory allocation and proper deallocation is essential for efficient memory usage in C programming. Effective memory management prevents memory leaks and ensures optimal utilization of system resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files \\u0026 Error Handling\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>Files &amp; Error Handling</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File operations involve opening, reading, writing, and closing files.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Standard library functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, <code>fscanf()</code>, <code>fgets()</code>, and <code>fputs()</code> are used.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\nfile_ptr = fopen(\"example.txt\", \"w\"); // Opening file in write mode\nif (file_ptr != NULL) {\n    fprintf(file_ptr, \"Writing to file\\n\");\n    fclose(file_ptr); // Closing the file\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Error Handling and Debugging Techniques</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Error handling involves checking for errors during file operations and handling them gracefully.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Techniques include checking return values of file operations and using conditional statements to handle errors.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>FILE *file_ptr;\nfile_ptr = fopen(\"nonexistent.txt\", \"r\"); // Attempting to open a non-existent file\nif (file_ptr == NULL) {\n    printf(\"Error opening file\\n\");\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling is essential for input/output operations in C programming. Effective error handling ensures robustness and reliability in file operations, preventing unexpected errors during file handling processes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"The Preprocessor\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>The Preprocessor</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Macros and <code>#define</code></strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#define</code> directive is used to define macros, which are symbolic constants or short functions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#define PI 3.14159\n#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Conditional Compilation (<code>#ifdef</code>, <code>#ifndef</code>, <code>#endif</code>)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>#ifdef</code> checks if a macro is defined, <code>#ifndef</code> checks if a macro is not defined, and <code>#endif</code> denotes the end of a conditional block.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#ifndef DEBUG\n#define DEBUG\n#endif\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The preprocessor in C is a powerful tool for code manipulation before compilation. It allows defining constants, creating macros, and conditional compilation, enabling better code organization and portability. Understanding and utilizing the preprocessor directives contribute to writing efficient and maintainable C programs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our C Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through the fundamental aspects of C programming, we\'ve delved into the intricacies of variables, control structures, functions, memory management, file handling, and more. This course has equipped you with a solid foundation in C, a language renowned for its efficiency and versatility. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, mastering C programming is a continuous learning process. Practicing coding challenges, exploring real-world applications, and diving deeper into advanced concepts will further solidify your expertise. Congratulations on completing this course, and may your coding journey with C be both rewarding and full of innovation!</p>\n<!-- /wp:paragraph -->','C Course','','inherit','closed','closed','','119-revision-v1','','','2023-11-18 09:54:27','2023-11-18 09:54:27','',119,'https://simplelearn.local/?p=267',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (268,1,'2023-11-18 09:54:56','2023-11-18 09:54:56','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of C++</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>C++, developed by Bjarne Stroustrup in the 1980s, extends the capabilities of the C language by introducing object-oriented programming features. It combines the efficiency of C with additional functionalities like classes, inheritance, polymorphism, and templates. C++ offers high performance, flexibility, and a rich standard library, making it suitable for various applications, from system software and game development to high-performance applications and embedded systems. Its influence on programming languages is substantial, shaping modern software development practices while maintaining compatibility with C, solidifying its position as a powerful and versatile language in the programming landscape.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Fundamental Data Types (int, float, double, etc.)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>User-Defined Data Types (struct, enum)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Array Manipulation and Access</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointer Basics and Arithmetic</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pointer to Objects</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation and Invocation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Overloading and Default Arguments</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Member Functions and Access Specifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes and Base-Derived Relationships</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Function Overriding and Virtual Functions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Generic Programming with Templates</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Templates and Class Templates</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">11. <strong>Exceptions</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">12. <strong>Files</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Streams and File I/O Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. <strong>Basic Concepts</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables store data and have specific data types (integers, floats, characters, etc.).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Data types determine the type of data that variables can hold.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators (+, -, *, /, %, etc.) perform operations on data.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;  // Variable declaration and initialization\r\nfloat height = 5.8;\r\nchar letter = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>std::cout</code> for output and <code>std::cin</code> for input.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators used for output and input, respectively.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num;\r\nstd::cout &lt;&lt; \"Enter a number: \";\r\nstd::cin >> num;\r\nstd::cout &lt;&lt; \"You entered: \" &lt;&lt; num;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Programs consist of functions; <code>main()</code> function is the entry point.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Curly braces <code>{}</code> define blocks of code.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  // Header file for input/output\r\n\r\nint main() {\r\n    std::cout &lt;&lt; \"Hello, C++ Programming!\";\r\n    return 0;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, input/output mechanisms, and basic program structure is fundamental for starting C++ programming. These concepts lay the groundwork for writing programs and manipulating data effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. <strong>Conditionals and Loops</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Conditional statements used to execute code based on conditions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int x = 10;\r\nif (x > 0) {\r\n    std::cout &lt;&lt; \"x is positive\";\r\n} else if (x == 0) {\r\n    std::cout &lt;&lt; \"x is zero\";\r\n} else {\r\n    std::cout &lt;&lt; \"x is negative\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multi-branching statement used to compare a value against multiple cases.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int choice;\r\nswitch (choice) {\r\n    case 1:\r\n        std::cout &lt;&lt; \"Option 1 selected\";\r\n        break;\r\n    case 2:\r\n        std::cout &lt;&lt; \"Option 2 selected\";\r\n        break;\r\n    default:\r\n        std::cout &lt;&lt; \"Invalid option\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop iterates a specific number of times.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop executes while a condition is true.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop executes at least once before checking the condition.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// For loop\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; i &lt;&lt; \" \";\r\n}\r\n\r\n// While loop\r\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    std::cout &lt;&lt; count &lt;&lt; \" \";\r\n    count++;\r\n}\r\n\r\n// Do-while loop\r\nint num = 0;\r\ndo {\r\n    std::cout &lt;&lt; num &lt;&lt; \" \";\r\n    num++;\r\n} while (num &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding and utilizing conditionals (<code>if</code>, <code>else if</code>, <code>else</code>, <code>switch</code>) along with loops (<code>for</code>, <code>while</code>, <code>do-while</code>) are fundamental for controlling program flow and executing code iteratively based on conditions in C++ programming.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Data Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. <strong>Data Types</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Fundamental Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, etc., are fundamental data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They define the type and size of data that variables can store.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25;\r\nfloat salary = 55000.50;\r\nchar grade = \'A\';\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>User-Defined Data Types</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>struct</code> and <code>enum</code> allow defining custom data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>struct</code> groups variables of different data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enum</code> creates a set of named integer constants.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Struct\r\nstruct Person {\r\n    std::string name;\r\n    int age;\r\n};\r\n\r\n// Enum\r\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday };\r\nDays today = Tuesday;\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding data types is crucial in C++ as they define the kind of data that variables can hold. Fundamental types manage standard data, while user-defined types offer flexibility in structuring complex data entities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. <strong>Arrays</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Declaration and Initialization</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Arrays store multiple elements of the same data type in contiguous memory.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and initialization syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5]; // Declaration of an integer array of size 5\r\n\r\nint values&#91;3] = {10, 20, 30}; // Initializing an array during declaration\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Array Manipulation and Access</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access elements using index notation (<code>[]</code>) starting from index 0.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modify or retrieve elements at specific positions in the array.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nnumbers&#91;2] = 10; // Modifying the third element\r\nint value = numbers&#91;4]; // Accessing the fifth element\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Through Arrays</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use loops (e.g., <code>for</code> loop) to traverse arrays and perform operations on elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int numbers&#91;5] = {1, 2, 3, 4, 5};\r\nfor (int i = 0; i &lt; 5; i++) {\r\n    std::cout &lt;&lt; numbers&#91;i] &lt;&lt; \" \";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays in C++ offer a way to store and manipulate collections of elements of the same data type. Understanding array declaration, initialization, access, and iteration through loops is essential for handling and processing data efficiently.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pointers\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. <strong>Pointers</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Basics and Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers store memory addresses of variables.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <code>&amp;</code> operator to get the address of a variable and <code>*</code> (dereference operator) to access the value stored at that address.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int number = 10;\r\nint *ptr; // Pointer declaration\r\nptr = &amp;number; // Assigning address of \'number\' to \'ptr\'\r\n\r\nstd::cout &lt;&lt; \"Value of number: \" &lt;&lt; *ptr; // Dereferencing pointer to get value\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer to Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pointers can also point to objects (instances of classes).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access object members using the pointer notation (<code>-></code>).</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    int value;\r\n};\r\n\r\nMyClass obj;\r\nMyClass *ptr = &amp;obj; // Pointer to an object\r\nptr->value = 20; // Accessing object member using pointer\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>(More on that later, on the section 7. Classes and Objects)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pointer Arithmetic</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Incrementing and decrementing pointers moves them to the next or previous memory location based on the data type size.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int arr&#91;5] = {1, 2, 3, 4, 5};\r\nint *p = arr; // Pointer to the first element of the array\r\n\r\n// Incrementing pointer\r\np++; // Moves to the next element\'s memory location\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding pointers is crucial in C++ for efficient memory management, dynamic memory allocation, and manipulation of data structures. Proper usage of pointers enables direct memory access and efficient handling of memory addresses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. <strong>Functions</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Creation and Invocation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions are blocks of code that perform a specific task.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function creation and invocation:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function declaration\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// Function invocation\r\nint result = add(5, 3); // Calling the add function\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Overloading and Default Arguments</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overloading enables defining multiple functions with the same name but different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default arguments provide values to parameters if no arguments are passed during function call.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function overloading\r\nvoid display(int num) {\r\n    std::cout &lt;&lt; \"Number: \" &lt;&lt; num;\r\n}\r\nvoid display(std::string message) {\r\n    std::cout &lt;&lt; \"Message: \" &lt;&lt; message;\r\n}\r\n\r\n// Default arguments\r\nvoid greet(std::string name, std::string greeting = \"Hello\") {\r\n    std::cout &lt;&lt; greeting &lt;&lt; \", \" &lt;&lt; name;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Return Types and Void Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Functions can return values of specified data types using <code>return</code>.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>void</code> functions do not return any value.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function with return type\r\nint multiply(int x, int y) {\r\n    return x * y;\r\n}\r\n\r\n// Void function\r\nvoid greet() {\r\n    std::cout &lt;&lt; \"Hello, World!\";\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions in C++ promote code reusability by encapsulating logic into modular blocks. They can have different functionalities, accept different arguments, and return different data types, making the code more organized and manageable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. <strong>Classes and Objects</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Class Declaration and Definition</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes are blueprints for creating objects, encapsulating data (attributes) and functions (methods).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Declaration and definition syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\nclass Person {\n    public:\n        std::string name;\n        int age;\n        void displayInfo(); // Method declaration\n};\n\n// Class definition (method implementation)\nvoid Person::displayInfo() {\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; \", Age: \" &lt;&lt; age;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Object Creation and Manipulation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Objects are instances of classes that contain specific data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create objects and access their attributes and methods using the dot (<code>.</code>) operator.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Person person1; // Object creation\r\nperson1.name = \"Alice\"; // Accessing attributes\r\nperson1.age = 25;\r\nperson1.displayInfo(); // Calling method\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Encapsulation and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) define the visibility of class members.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation restricts direct access to certain class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Example {\n    private:\n        int secretData;\n\n    public:\n        void setData(int value) {\n            secretData = value;\n        }\n        int getData() {\n            return secretData;\n        }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the backbone of object-oriented programming in C++. Classes encapsulate data and behavior, allowing the creation of reusable and organized code. Objects are instances of classes that hold specific data and behavior defined by the class. Understanding classes, objects, and their relationship is crucial in building complex systems and applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More On Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. <strong>More On Classes</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Constructors and Destructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize class objects and can be overloaded with different parameters.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Destructors clean up resources when an object is destroyed.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyClass {\r\n    public:\r\n        // Constructor\r\n        MyClass() {\r\n            // Initialization code\r\n        }\r\n        // Destructor\r\n        ~MyClass() {\r\n            // Cleanup code\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Member Functions and Access Specifiers</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Member functions are functions defined inside a class and operate on class objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Access specifiers (<code>public</code>, <code>private</code>, <code>protected</code>) control the accessibility of class members.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Car {\r\n    private:\r\n        int speed;\r\n    public:\r\n        void setSpeed(int s) {\r\n            speed = s;\r\n        }\r\n        int getSpeed() {\r\n            return speed;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Static Members and Static Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>static</code> members belong to the class rather than individual objects.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>static</code> functions can access only static members and are called using the class name.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MathOperations {\r\n    public:\r\n        static int add(int a, int b) {\r\n            return a + b;\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced features of classes like constructors, destructors, access specifiers, static members, and functions enhances the functionality and organization of classes in C++ programming. These concepts facilitate better control over class behavior, object creation, and memory management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Inheritance \\u0026 Polymorphism\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. <strong>Inheritance &amp; Polymorphism</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheriting Classes and Base-Derived Relationships</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance allows a new class (derived class) to inherit properties and behavior from an existing class (base class).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for inheriting classes:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Vehicle {\r\n    // ... (attributes and methods)\r\n};\r\n\r\n// Derived class\r\nclass Car : public Vehicle {\r\n    // ... (additional attributes and methods)\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Polymorphism: Function Overriding and Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function overriding redefines a base class function in a derived class.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Virtual functions allow dynamic binding and late binding.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Base class\r\nclass Shape {\r\n    public:\r\n        virtual void draw() {\r\n            std::cout &lt;&lt; \"Drawing a shape\";\r\n        }\r\n};\r\n\r\n// Derived class\r\nclass Circle : public Shape {\r\n    public:\r\n        void draw() override {\r\n            std::cout &lt;&lt; \"Drawing a circle\";\r\n        }\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Pure Virtual Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain at least one pure virtual function (virtual function with no implementation).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cannot be instantiated, used as base classes.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Abstract class\r\nclass Animal {\r\n    public:\r\n        virtual void makeSound() = 0; // Pure virtual function\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Inheritance and polymorphism are core concepts in object-oriented programming. Inheritance allows the creation of new classes based on existing ones, facilitating code reuse and structure. Polymorphism enables the use of a single interface for different data types and behaviors, enhancing flexibility and extensibility in software design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Templates\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10. <strong>Templates</strong>:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Generic Programming with Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Templates allow writing generic classes and functions that work with any data type.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Syntax for function templates:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT maximum(T x, T y) {\r\n    return (x > y) ? x : y;\r\n}\r\n\r\n// Using the template function\r\nint maxInt = maximum(5, 10);\r\nfloat maxFloat = maximum(3.5, 7.8);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Function Templates and Class Templates</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function templates define generic functions that can accept multiple data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Class templates define generic classes that can handle various data types.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Function template\r\ntemplate&lt;typename T>\r\nT add(T x, T y) {\r\n    return x + y;\r\n}\r\n\r\n// Class template\r\ntemplate&lt;typename T>\r\nclass Container {\r\n    T value;\r\n};\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Specialization and Explicit Instantiation</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Template specialization allows customizing templates for specific data types.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Explicit instantiation provides control over template instantiation.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Template specialization\r\ntemplate&lt;>\r\nclass Container&lt;int> {\r\n    int value;\r\n};\r\n\r\n// Explicit instantiation\r\ntemplate class Container&lt;float>; // Explicit instantiation for float\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Templates in C++ enable generic programming, where algorithms and data structures can work with various data types. Function templates and class templates provide flexibility in creating reusable code that adapts to different data types without sacrificing type safety.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exception Handling (try-catch blocks)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try</code>, <code>catch</code>, and <code>throw</code> for handling exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>try</code> block encloses the code that might generate an exception.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>catch</code> block catches and handles the thrown exceptions.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>throw</code> statement generates exceptions explicitly.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that might throw an exception\r\n    if (condition) {\r\n        throw \"Some error occurred\";\r\n    }\r\n}\r\ncatch (const char* error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exceptions can be thrown of various types (int, char*, custom types).</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Catch blocks can handle different types of exceptions.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    if (condition) {\r\n        throw 404; // Throwing an integer exception\r\n    }\r\n}\r\ncatch (int error) {\r\n    std::cout &lt;&lt; \"Error caught: \" &lt;&lt; error;\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Handling exceptions in C++ provides a mechanism to deal with errors or exceptional scenarios during program execution, enabling the code to gracefully recover from unexpected issues.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling (Reading, Writing, and Closing)</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use file streams (<code>ifstream</code>, <code>ofstream</code>, <code>fstream</code>) for file operations.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>ifstream</code> for reading from files, <code>ofstream</code> for writing to files, and <code>fstream</code> for both.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Open files using file stream objects, perform read/write operations, and close files.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Writing to a file\r\nstd::ofstream outFile(\"file.txt\");\r\noutFile &lt;&lt; \"Hello, File!\";\r\n\r\n// Reading from a file\r\nstd::ifstream inFile(\"file.txt\");\r\nstd::string content;\r\ngetline(inFile, content);\r\nstd::cout &lt;&lt; \"Content: \" &lt;&lt; content;\r\n\r\n// Closing files\r\noutFile.close();\r\ninFile.close();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Streams and File I/O Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File streams use insertion (<code>&lt;&lt;</code>) and extraction (<code>&gt;&gt;</code>) operators similar to standard I/O.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File open modes (<code>ios::in</code>, <code>ios::out</code>, <code>ios::app</code>, <code>ios::binary</code>, etc.) control file operations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>std::fstream file(\"data.txt\", std::ios::out | std::ios::app);\r\nif (file.is_open()) {\r\n    file &lt;&lt; \"New data\\n\";\r\n    file.close();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in C++ involves working with file streams to perform reading, writing, and manipulation of files. Understanding file stream operations and file open modes is crucial for managing file I/O effectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our C++ Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Congratulations on completing the C++ course! You\'ve covered essential topics, from fundamental concepts like variables and loops to advanced topics such as inheritance, templates, and file handling. Mastery of these concepts forms a solid foundation for creating robust and efficient C++ applications. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, practice and experimentation are key to mastering any programming language. Keep exploring, building, and refining your skills to unlock the full potential of C++ programming. Whether you\'re diving deeper into software development or exploring new domains, the knowledge gained from this course will undoubtedly be invaluable. Good luck on your programming journey!</p>\n<!-- /wp:paragraph -->','C++ Course','','inherit','closed','closed','','121-revision-v1','','','2023-11-18 09:54:56','2023-11-18 09:54:56','',121,'https://simplelearn.local/?p=268',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (269,1,'2023-11-18 10:08:00','2023-11-18 10:08:00','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:08:00','2023-11-18 10:08:00','',125,'https://simplelearn.local/?p=269',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (270,1,'2023-11-18 10:08:19','2023-11-18 10:08:19','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:08:19','2023-11-18 10:08:19','',125,'https://simplelearn.local/?p=270',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (271,1,'2023-11-18 10:13:38','2023-11-18 10:13:38','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:13:38','2023-11-18 10:13:38','',125,'https://simplelearn.local/?p=271',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (272,1,'2023-11-18 10:13:57','2023-11-18 10:13:57','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:13:57','2023-11-18 10:13:57','',125,'https://simplelearn.local/?p=272',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (273,1,'2023-11-18 10:14:04','2023-11-18 10:14:04','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#232323\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#5C40CA\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 10:14:04','2023-11-18 10:14:04','',6,'https://simplelearn.local/?p=273',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (274,1,'2023-11-18 10:18:50','2023-11-18 10:18:50','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\r\nfor (int i = 0; i &lt; numbers.length; i++) {\r\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:18:50','2023-11-18 10:18:50','',125,'https://simplelearn.local/?p=274',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (275,1,'2023-11-18 10:19:19','2023-11-18 10:19:19','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:19:19','2023-11-18 10:19:19','',125,'https://simplelearn.local/?p=275',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (276,1,'2023-11-18 10:21:02','2023-11-18 10:21:02','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:21:02','2023-11-18 10:21:02','',125,'https://simplelearn.local/?p=276',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (277,1,'2023-11-18 10:25:42','2023-11-18 10:25:42','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:25:42','2023-11-18 10:25:42','',125,'https://simplelearn.local/?p=277',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (278,1,'2023-11-18 10:27:34','2023-11-18 10:27:34','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:27:34','2023-11-18 10:27:34','',125,'https://simplelearn.local/?p=278',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (279,1,'2023-11-18 10:27:47','2023-11-18 10:27:47','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:27:47','2023-11-18 10:27:47','',125,'https://simplelearn.local/?p=279',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (280,1,'2023-11-18 10:30:18','2023-11-18 10:30:18','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Lists\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lists:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists in Java are part of the Collections Framework, providing dynamic-sized, ordered collections of elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Collections Framework (ArrayList, LinkedList)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ArrayList: Resizable array implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\r\n\r\n// Creating an ArrayList\r\nArrayList&lt;String> names = new ArrayList&lt;>();\r\n\r\n// Adding elements\r\nnames.add(\"Alice\");\r\nnames.add(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>LinkedList: Doubly-linked list implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.LinkedList;\r\n\r\n// Creating a LinkedList\r\nLinkedList&lt;Integer> numbers = new LinkedList&lt;>();\r\n\r\n// Adding elements\r\nnumbers.add(10);\r\nnumbers.add(20);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>List Interface and Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Common List interface operations (applicable to both ArrayList and LinkedList):</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Accessing elements by index\r\nString name = names.get(0);\r\n\r\n// Removing elements\r\nnames.remove(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Lists and Manipulating Elements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Iterating through a list using enhanced for loop:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>for (String name : names) {\r\n    System.out.println(name);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists offer flexibility and various operations for managing collections of elements. The List interface provides methods to add, access, remove, and manipulate elements in different ways. ArrayList and LinkedList are commonly used implementations that allow efficient handling of dynamic lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:30:18','2023-11-18 10:30:18','',125,'https://simplelearn.local/?p=280',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (281,1,'2023-11-18 10:32:28','2023-11-18 10:32:28','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Lists\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lists:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists in Java are part of the Collections Framework, providing dynamic-sized, ordered collections of elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Collections Framework (ArrayList, LinkedList)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ArrayList: Resizable array implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\r\n\r\n// Creating an ArrayList\r\nArrayList&lt;String> names = new ArrayList&lt;>();\r\n\r\n// Adding elements\r\nnames.add(\"Alice\");\r\nnames.add(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>LinkedList: Doubly-linked list implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.LinkedList;\r\n\r\n// Creating a LinkedList\r\nLinkedList&lt;Integer> numbers = new LinkedList&lt;>();\r\n\r\n// Adding elements\r\nnumbers.add(10);\r\nnumbers.add(20);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>List Interface and Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Common List interface operations (applicable to both ArrayList and LinkedList):</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Accessing elements by index\r\nString name = names.get(0);\r\n\r\n// Removing elements\r\nnames.remove(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Lists and Manipulating Elements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Iterating through a list using enhanced for loop:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>for (String name : names) {\r\n    System.out.println(name);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists offer flexibility and various operations for managing collections of elements. The List interface provides methods to add, access, remove, and manipulate elements in different ways. ArrayList and LinkedList are commonly used implementations that allow efficient handling of dynamic lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Threads \\u0026 Concurrency\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Threads &amp; Concurrency:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Threads in Java allow programs to execute multiple tasks concurrently, enhancing performance and responsiveness.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Multithreading Basics</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creating a thread by extending the Thread class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println(\"MyThread running\");\r\n    }\r\n}\r\n\r\n// Starting the thread\r\nMyThread thread = new MyThread();\r\nthread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Implementing a thread using the Runnable interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyRunnable implements Runnable {\r\n    public void run() {\r\n        System.out.println(\"MyRunnable running\");\r\n    }\r\n}\r\n\r\n// Creating a thread using Runnable\r\nThread runnableThread = new Thread(new MyRunnable());\r\nrunnableThread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Synchronization and Thread Safety</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Synchronizing threads to avoid data inconsistency:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Counter {\r\n    private int count = 0;\r\n\r\n    public synchronized void increment() {\r\n        count++;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread Management and Interaction</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Joining threads to wait for their completion:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Thread t1 = new Thread(() -> {\r\n    // Thread t1 logic\r\n});\r\nThread t2 = new Thread(() -> {\r\n    // Thread t2 logic\r\n});\r\n\r\nt1.start();\r\nt2.start();\r\n\r\ntry {\r\n    t1.join();\r\n    t2.join();\r\n} catch (InterruptedException e) {\r\n    // Handle interrupted exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Java\'s concurrency features allow multiple tasks to run concurrently, improving program performance. Understanding multithreading basics, synchronization, and thread interaction is crucial for developing applications that benefit from concurrent execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:32:28','2023-11-18 10:32:28','',125,'https://simplelearn.local/?p=281',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (282,1,'2023-11-18 10:34:41','2023-11-18 10:34:41','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Lists\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lists:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists in Java are part of the Collections Framework, providing dynamic-sized, ordered collections of elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Collections Framework (ArrayList, LinkedList)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ArrayList: Resizable array implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\r\n\r\n// Creating an ArrayList\r\nArrayList&lt;String> names = new ArrayList&lt;>();\r\n\r\n// Adding elements\r\nnames.add(\"Alice\");\r\nnames.add(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>LinkedList: Doubly-linked list implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.LinkedList;\r\n\r\n// Creating a LinkedList\r\nLinkedList&lt;Integer> numbers = new LinkedList&lt;>();\r\n\r\n// Adding elements\r\nnumbers.add(10);\r\nnumbers.add(20);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>List Interface and Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Common List interface operations (applicable to both ArrayList and LinkedList):</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Accessing elements by index\r\nString name = names.get(0);\r\n\r\n// Removing elements\r\nnames.remove(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Lists and Manipulating Elements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Iterating through a list using enhanced for loop:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>for (String name : names) {\r\n    System.out.println(name);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists offer flexibility and various operations for managing collections of elements. The List interface provides methods to add, access, remove, and manipulate elements in different ways. ArrayList and LinkedList are commonly used implementations that allow efficient handling of dynamic lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Threads \\u0026 Concurrency\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Threads &amp; Concurrency:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Threads in Java allow programs to execute multiple tasks concurrently, enhancing performance and responsiveness.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Multithreading Basics</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creating a thread by extending the Thread class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println(\"MyThread running\");\r\n    }\r\n}\r\n\r\n// Starting the thread\r\nMyThread thread = new MyThread();\r\nthread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Implementing a thread using the Runnable interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyRunnable implements Runnable {\r\n    public void run() {\r\n        System.out.println(\"MyRunnable running\");\r\n    }\r\n}\r\n\r\n// Creating a thread using Runnable\r\nThread runnableThread = new Thread(new MyRunnable());\r\nrunnableThread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Synchronization and Thread Safety</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Synchronizing threads to avoid data inconsistency:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Counter {\r\n    private int count = 0;\r\n\r\n    public synchronized void increment() {\r\n        count++;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread Management and Interaction</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Joining threads to wait for their completion:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Thread t1 = new Thread(() -> {\r\n    // Thread t1 logic\r\n});\r\nThread t2 = new Thread(() -> {\r\n    // Thread t2 logic\r\n});\r\n\r\nt1.start();\r\nt2.start();\r\n\r\ntry {\r\n    t1.join();\r\n    t2.join();\r\n} catch (InterruptedException e) {\r\n    // Handle interrupted exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Java\'s concurrency features allow multiple tasks to run concurrently, improving program performance. Understanding multithreading basics, synchronization, and thread interaction is crucial for developing applications that benefit from concurrent execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java involves reading from and writing to files, allowing data persistence and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>File Handling (Reading, Writing, and Closing)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from a file using FileReader and BufferedReader:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"))) {\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        System.out.println(line);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Writing to a file using FileWriter and BufferedWriter:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"))) {\r\n    writer.write(\"Hello, Java Files!\");\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input and Output Streams</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading and writing binary data using InputStream and OutputStream:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\ntry (FileInputStream inputStream = new FileInputStream(\"input.jpg\");\r\n     FileOutputStream outputStream = new FileOutputStream(\"output.jpg\")) {\r\n    byte&#91;] buffer = new byte&#91;1024];\r\n    int bytesRead;\r\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\r\n        outputStream.write(buffer, 0, bytesRead);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java allows for various operations like reading, writing, and manipulating files. Using classes like FileReader, FileWriter, InputStream, and OutputStream, Java provides a rich set of tools for file input and output operations, enabling efficient data handling with external files.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:34:41','2023-11-18 10:34:41','',125,'https://simplelearn.local/?p=282',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (283,1,'2023-11-18 10:35:38','2023-11-18 10:35:38','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Lists\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lists:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists in Java are part of the Collections Framework, providing dynamic-sized, ordered collections of elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Collections Framework (ArrayList, LinkedList)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ArrayList: Resizable array implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\r\n\r\n// Creating an ArrayList\r\nArrayList&lt;String> names = new ArrayList&lt;>();\r\n\r\n// Adding elements\r\nnames.add(\"Alice\");\r\nnames.add(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>LinkedList: Doubly-linked list implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.LinkedList;\r\n\r\n// Creating a LinkedList\r\nLinkedList&lt;Integer> numbers = new LinkedList&lt;>();\r\n\r\n// Adding elements\r\nnumbers.add(10);\r\nnumbers.add(20);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>List Interface and Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Common List interface operations (applicable to both ArrayList and LinkedList):</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Accessing elements by index\r\nString name = names.get(0);\r\n\r\n// Removing elements\r\nnames.remove(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Lists and Manipulating Elements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Iterating through a list using enhanced for loop:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>for (String name : names) {\r\n    System.out.println(name);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists offer flexibility and various operations for managing collections of elements. The List interface provides methods to add, access, remove, and manipulate elements in different ways. ArrayList and LinkedList are commonly used implementations that allow efficient handling of dynamic lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Threads \\u0026 Concurrency\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Threads &amp; Concurrency:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Threads in Java allow programs to execute multiple tasks concurrently, enhancing performance and responsiveness.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Multithreading Basics</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creating a thread by extending the Thread class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println(\"MyThread running\");\r\n    }\r\n}\r\n\r\n// Starting the thread\r\nMyThread thread = new MyThread();\r\nthread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Implementing a thread using the Runnable interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyRunnable implements Runnable {\r\n    public void run() {\r\n        System.out.println(\"MyRunnable running\");\r\n    }\r\n}\r\n\r\n// Creating a thread using Runnable\r\nThread runnableThread = new Thread(new MyRunnable());\r\nrunnableThread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Synchronization and Thread Safety</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Synchronizing threads to avoid data inconsistency:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Counter {\r\n    private int count = 0;\r\n\r\n    public synchronized void increment() {\r\n        count++;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread Management and Interaction</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Joining threads to wait for their completion:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Thread t1 = new Thread(() -> {\r\n    // Thread t1 logic\r\n});\r\nThread t2 = new Thread(() -> {\r\n    // Thread t2 logic\r\n});\r\n\r\nt1.start();\r\nt2.start();\r\n\r\ntry {\r\n    t1.join();\r\n    t2.join();\r\n} catch (InterruptedException e) {\r\n    // Handle interrupted exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Java\'s concurrency features allow multiple tasks to run concurrently, improving program performance. Understanding multithreading basics, synchronization, and thread interaction is crucial for developing applications that benefit from concurrent execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java involves reading from and writing to files, allowing data persistence and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>File Handling (Reading, Writing, and Closing)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from a file using FileReader and BufferedReader:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"))) {\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        System.out.println(line);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Writing to a file using FileWriter and BufferedWriter:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"))) {\r\n    writer.write(\"Hello, Java Files!\");\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input and Output Streams</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading and writing binary data using InputStream and OutputStream:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\ntry (FileInputStream inputStream = new FileInputStream(\"input.jpg\");\r\n     FileOutputStream outputStream = new FileOutputStream(\"output.jpg\")) {\r\n    byte&#91;] buffer = new byte&#91;1024];\r\n    int bytesRead;\r\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\r\n        outputStream.write(buffer, 0, bytesRead);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java allows for various operations like reading, writing, and manipulating files. Using classes like FileReader, FileWriter, InputStream, and OutputStream, Java provides a rich set of tools for file input and output operations, enabling efficient data handling with external files.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Java Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As you conclude your journey through Java programming, you\'ve delved into its fundamental concepts and explored various advanced topics. Equipped with knowledge about classes, objects, exceptions, collections, threads, and file handling, you\'ve gained a solid understanding of Java\'s capabilities in developing robust applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Continuing to explore and practice these concepts will enhance your proficiency in Java development. Remember, Java\'s versatility makes it applicable in diverse domains, from web and mobile applications to enterprise systems and beyond.</p>\n<!-- /wp:paragraph -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:35:38','2023-11-18 10:35:38','',125,'https://simplelearn.local/?p=283',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (284,1,'2023-11-18 10:37:05','2023-11-18 10:37:05','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Java</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Java, introduced by James Gosling and his team at Sun Microsystems (later acquired by Oracle), emerged in 1995. Initially named Oak, it was designed for consumer electronics. However, its implementation changed with the rise of the internet. Java gained prominence due to its \"Write Once, Run Anywhere\" feature, allowing code to be executed across various platforms with a Java Virtual Machine (JVM). This portability made it an ideal choice for web applets, enterprise applications, mobile development (Android), and more. Java\'s object-oriented nature, extensive standard library, and robust features have solidified its place as a versatile and widely-used programming language across diverse domains.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">1. Basic Concepts:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables, Data Types, and Operators</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input/Output Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Basic Syntax and Structure</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Conditionals and Loops:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>if</code>, <code>else if</code>, <code>else</code> Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>switch</code> Statement</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>for</code>, <code>while</code>, <code>do-while</code> Loops</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">3. Arrays:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Declaration and Initialization</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manipulation and Access</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Through Arrays</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. Classes and Objects:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Declaration and Definition</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Creation and Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Encapsulation and Access Modifiers</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">5. More on Classes:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors and Destructors</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Inheritance and Polymorphism</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Abstract Classes and Interfaces</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">6. Exceptions:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Exception Handling (try-catch blocks)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Throwing and Catching Exceptions</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">7. Lists:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Collections Framework (ArrayList, LinkedList)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>List Interface and Operations</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Iterating Lists and Manipulating Elements</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">8. Threads &amp; Concurrency:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Multithreading Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Synchronization and Thread Safety</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thread Management and Interaction</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">9. Files:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>File Handling (Reading, Writing, and Closing)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Input and Output Streams</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>File I/O Operations and Stream Handling</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Variables, Data Types, and Operators</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables hold data and can be of various types:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int age = 25; // Integer variable\r\ndouble salary = 50000.50; // Double variable\r\nboolean isStudent = true; // Boolean variable\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Data types determine the kind of data variables can store.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Operators perform operations on variables:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int a = 10;\r\nint b = 5;\r\nint sum = a + b; // Addition\r\nint product = a * b; // Multiplication\r\nboolean isEqual = (a == b); // Equality check\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input/Output Basics</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Input: Using <code>Scanner</code> class for user input:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.Scanner;\r\n\r\nScanner scanner = new Scanner(System.in);\r\nSystem.out.print(\"Enter your name: \");\r\nString name = scanner.nextLine();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Output: Displaying output on the console:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nSystem.out.println(\"The number is: \" + num);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Basic Syntax and Structure</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Java programs consist of classes and methods:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class HelloWorld {\n    public static void main(String&#91;] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding variables, data types, operators, and basic syntax is crucial in Java programming. These concepts serve as building blocks for developing more complex applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Conditionals and Loops\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Conditionals and Loops:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conditionals and loops are essential for controlling program flow and repetition in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>if</code>, <code>else if</code>, <code>else</code> Statements</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>if</code> statements to execute code based on a condition:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int num = 10;\r\nif (num > 0) {\r\n    System.out.println(\"Number is positive\");\r\n} else if (num &lt; 0) {\r\n    System.out.println(\"Number is negative\");\r\n} else {\r\n    System.out.println(\"Number is zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>switch</code> Statement</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>switch</code> allows selecting among multiple code blocks based on a variable\'s value:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>int day = 2;\r\nString dayName;\r\nswitch (day) {\r\n    case 1:\r\n        dayName = \"Monday\";\r\n        break;\r\n    case 2:\r\n        dayName = \"Tuesday\";\r\n        break;\r\n    // ... Other cases\r\n    default:\r\n        dayName = \"Invalid day\";\r\n}\r\nSystem.out.println(\"Day: \" + dayName);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong><code>for</code>, <code>while</code>, <code>do-while</code> Loops</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>for</code> loop for definite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>while</code> loop for indefinite iteration:</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>do-while</code> loop ensures execution at least once:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// for loop\nfor (int i = 0; i &lt; 5; i++) {\r\n    System.out.println(\"Iteration: \" + i);\r\n}\n\n// while loop\nint count = 0;\r\nwhile (count &lt; 5) {\r\n    System.out.println(\"Count: \" + count);\r\n    count++;\r\n}\n\n// do-while loop\n\rint x = 0;\r\ndo {\r\n    System.out.println(\"Value of x: \" + x);\r\n    x++;\r\n} while (x &lt; 5);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding these control structures allows programmers to make decisions and create repetitive processes in Java programs. These constructs form the basis for implementing logic and iteration within applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Arrays\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Arrays:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Arrays are fundamental data structures in Java used to store multiple values of the same type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Declaration, Initialization, Manipulation, and Access</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Declare, initialize, and access elements in an array\r\nint&#91;] numbers = {10, 20, 30, 40, 50};\r\n\r\n// Accessing and modifying elements\r\nint value = numbers&#91;2]; // Accessing the third element (index 2)\r\nnumbers&#91;1] = 25; // Modifying the second element (index 1)\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Iterating Through Arrays</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Iterating through an array using for loop\nfor (int i = 0; i &lt; numbers.length; i++) {\n    System.out.println(\"Element at index \" + i + \": \" + numbers&#91;i]);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Arrays offer an efficient way to manage collections of elements in Java. Understanding array manipulation, including declaration, initialization, access, and iteration, is crucial for handling and processing sets of data within Java applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Classes and Objects\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. Classes and Objects:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Classes and objects form the foundation of object-oriented programming in Java, allowing the creation of reusable code structures and instances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Class Declaration and Definition</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Class declaration\r\npublic class Car {\r\n    // Attributes or fields\r\n    String brand;\r\n    String model;\r\n    int year;\r\n\r\n    // Methods\r\n    void drive() {\r\n        System.out.println(\"Driving the \" + year + \" \" + brand + \" \" + model);\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Object Creation and Manipulation</strong>:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Creating objects of the class Car\r\nCar myCar = new Car();\r\nCar anotherCar = new Car();\r\n\r\n// Accessing and modifying object attributes\r\nmyCar.brand = \"Toyota\";\r\nmyCar.model = \"Corolla\";\r\nmyCar.year = 2020;\r\n\r\n// Invoking object methods\r\nmyCar.drive(); // Output: Driving the 2020 Toyota Corolla\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Encapsulation and Access Modifiers</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Encapsulation helps in data hiding and better control over access:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    private String brand; // Private access modifier\r\n    public void setBrand(String brand) {\r\n        this.brand = brand;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding classes and objects is crucial for modeling real-world entities and organizing code in a modular and reusable way. Classes define the structure, while objects are instances of these classes that hold specific data and behaviors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More on Classes\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. More on Classes:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building upon the basics of classes and objects, this section delves deeper into various advanced features of class-oriented programming in Java.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Constructors and Destructors</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Constructors initialize objects when they are created:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class Car {\r\n    // Constructor\r\n    public Car(String brand, String model) {\r\n        this.brand = brand;\r\n        this.model = model;\r\n    }\r\n    // Destructor (Java does not have explicit destructors like C++)\r\n    // Java uses garbage collection to manage memory\r\n}\r\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance and Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance enables one class to inherit properties and behavior from another:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class SportsCar extends Car {\r\n    // Additional properties and methods specific to SportsCar\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Polymorphism allows objects to be treated as instances of their parent class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Car car1 = new Car();\r\nCar car2 = new SportsCar();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Abstract Classes and Interfaces</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Abstract classes contain abstract methods and can\'t be instantiated:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public abstract class Vehicle {\r\n    abstract void drive();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Interfaces define a contract that implementing classes must follow:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public interface Drivable {\r\n    void start();\r\n    void stop();\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Understanding advanced class concepts like constructors, inheritance, polymorphism, abstract classes, and interfaces expands the capabilities of object-oriented programming in Java. These concepts facilitate code organization, reusability, and extensibility in larger software projects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Exceptions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Exceptions in Java handle unexpected events or errors that occur during the execution of a program, ensuring proper error management and flow control.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Exception Handling (try-catch blocks)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Use <code>try-catch</code> blocks to catch and handle exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    // Code that may throw an exception\r\n    int result = divideNumbers(10, 0); // This may throw an ArithmeticException\r\n} catch (ArithmeticException e) {\r\n    // Handle the exception\r\n    System.out.println(\"Error: Division by zero\");\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Throwing and Catching Exceptions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Throwing custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>public class AgeValidator {\r\n    public void validateAge(int age) throws InvalidAgeException {\r\n        if (age &lt; 0 || age > 120) {\r\n            throw new InvalidAgeException(\"Invalid age entered\");\r\n        }\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Catching custom exceptions:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>try {\r\n    AgeValidator validator = new AgeValidator();\r\n    validator.validateAge(-5); // This may throw an InvalidAgeException\r\n} catch (InvalidAgeException e) {\r\n    System.out.println(\"Error: \" + e.getMessage());\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling ensures the graceful handling of errors, preventing abrupt program termination. It involves <code>try-catch</code> blocks to catch and handle specific exceptions and allows for throwing custom exceptions to handle exceptional cases that may occur during program execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Lists\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Lists:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lists in Java are part of the Collections Framework, providing dynamic-sized, ordered collections of elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Collections Framework (ArrayList, LinkedList)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>ArrayList: Resizable array implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\r\n\r\n// Creating an ArrayList\r\nArrayList&lt;String> names = new ArrayList&lt;>();\r\n\r\n// Adding elements\r\nnames.add(\"Alice\");\r\nnames.add(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>LinkedList: Doubly-linked list implementation of the List interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.util.LinkedList;\r\n\r\n// Creating a LinkedList\r\nLinkedList&lt;Integer> numbers = new LinkedList&lt;>();\r\n\r\n// Adding elements\r\nnumbers.add(10);\r\nnumbers.add(20);\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>List Interface and Operations</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Common List interface operations (applicable to both ArrayList and LinkedList):</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// Accessing elements by index\r\nString name = names.get(0);\r\n\r\n// Removing elements\r\nnames.remove(\"Bob\");\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Iterating Lists and Manipulating Elements</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Iterating through a list using enhanced for loop:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>for (String name : names) {\r\n    System.out.println(name);\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists offer flexibility and various operations for managing collections of elements. The List interface provides methods to add, access, remove, and manipulate elements in different ways. ArrayList and LinkedList are commonly used implementations that allow efficient handling of dynamic lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Threads \\u0026 Concurrency\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8. Threads &amp; Concurrency:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Threads in Java allow programs to execute multiple tasks concurrently, enhancing performance and responsiveness.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Multithreading Basics</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creating a thread by extending the Thread class:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyThread extends Thread {\r\n    public void run() {\r\n        System.out.println(\"MyThread running\");\r\n    }\r\n}\r\n\r\n// Starting the thread\r\nMyThread thread = new MyThread();\r\nthread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Implementing a thread using the Runnable interface:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class MyRunnable implements Runnable {\r\n    public void run() {\r\n        System.out.println(\"MyRunnable running\");\r\n    }\r\n}\r\n\r\n// Creating a thread using Runnable\r\nThread runnableThread = new Thread(new MyRunnable());\r\nrunnableThread.start();\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Synchronization and Thread Safety</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Synchronizing threads to avoid data inconsistency:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Counter {\r\n    private int count = 0;\r\n\r\n    public synchronized void increment() {\r\n        count++;\r\n    }\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Thread Management and Interaction</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Joining threads to wait for their completion:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Thread t1 = new Thread(() -> {\r\n    // Thread t1 logic\r\n});\r\nThread t2 = new Thread(() -> {\r\n    // Thread t2 logic\r\n});\r\n\r\nt1.start();\r\nt2.start();\r\n\r\ntry {\r\n    t1.join();\r\n    t2.join();\r\n} catch (InterruptedException e) {\r\n    // Handle interrupted exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Java\'s concurrency features allow multiple tasks to run concurrently, improving program performance. Understanding multithreading basics, synchronization, and thread interaction is crucial for developing applications that benefit from concurrent execution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9. Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java involves reading from and writing to files, allowing data persistence and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>File Handling (Reading, Writing, and Closing)</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from a file using FileReader and BufferedReader:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"))) {\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        System.out.println(line);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Writing to a file using FileWriter and BufferedWriter:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\ntry (BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"))) {\r\n    writer.write(\"Hello, Java Files!\");\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Input and Output Streams</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading and writing binary data using InputStream and OutputStream:</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\ntry (FileInputStream inputStream = new FileInputStream(\"input.jpg\");\r\n     FileOutputStream outputStream = new FileOutputStream(\"output.jpg\")) {\r\n    byte&#91;] buffer = new byte&#91;1024];\r\n    int bytesRead;\r\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\r\n        outputStream.write(buffer, 0, bytesRead);\r\n    }\r\n} catch (IOException e) {\r\n    // Handle IO exception\r\n}\r</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>File handling in Java allows for various operations like reading, writing, and manipulating files. Using classes like FileReader, FileWriter, InputStream, and OutputStream, Java provides a rich set of tools for file input and output operations, enabling efficient data handling with external files.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Java Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As you conclude your journey through Java programming, you\'ve delved into its fundamental concepts and explored various advanced topics. Equipped with knowledge about classes, objects, exceptions, collections, threads, and file handling, you\'ve gained a solid understanding of Java\'s capabilities in developing robust applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Continuing to explore and practice these concepts will enhance your proficiency in Java development. Remember, Java\'s versatility makes it applicable in diverse domains, from web and mobile applications to enterprise systems and beyond.</p>\n<!-- /wp:paragraph -->','Java Course','','inherit','closed','closed','','125-revision-v1','','','2023-11-18 10:37:05','2023-11-18 10:37:05','',125,'https://simplelearn.local/?p=284',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (285,1,'2023-11-18 10:37:42','2023-11-18 10:37:42','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction \\u0026 Brief History of Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction &amp; Brief History of Python</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Python, conceived by Guido van Rossum in 1991, stands out for its readability and versatility. Its straightforward syntax, utilizing significant whitespace for code structure, appeals to both beginners and seasoned developers. Python\'s strength lies in its vast standard library and an abundance of third-party packages, empowering applications across diverse domains like web development, data analysis, artificial intelligence, automation, and scientific computing. Its community-driven ethos fosters continuous evolution and innovation, cementing Python as a go-to language for its simplicity, adaptability, and extensive capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:details -->\n<details class=\"wp-block-details\"><summary>Table of Contents</summary><!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1. Basic Concepts:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Structures</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops (For, While, Do-While equivalent)</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2. Functions &amp; Modules:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":3} -->\n<ul start=\"3\"><!-- wp:list-item -->\n<li><strong>Functions</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Function Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Function Parameters and Returns</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Modules &amp; Packages</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing Modules</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and Using Packages</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":5} -->\n<ul start=\"5\"><!-- wp:list-item -->\n<li><strong>Exceptions Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Try-Except Blocks</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handling Errors</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>File Handling</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from Files</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Writing to Files</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">4. More Types:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":7} -->\n<ul start=\"7\"><!-- wp:list-item -->\n<li><strong>Lists &amp; Dictionaries</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>List Manipulation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionary Manipulation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Tuples &amp; Sets</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuple Basics</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set Basics</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":9} -->\n<ul start=\"9\"><!-- wp:list-item -->\n<li><strong>Classes &amp; Objects</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Class Creation</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Object Instantiation</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Inheritance &amp; Polymorphism</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheriting Classes</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Method Overriding</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">6. Regular Expressions:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":11} -->\n<ul start=\"11\"><!-- wp:list-item -->\n<li><strong>Regular Expressions Basics</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pattern Matching</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Search and Replace Operations</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging - Table of Contents\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"start\":12} -->\n<ul start=\"12\"><!-- wp:list-item -->\n<li><strong>Pythonicness</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Pythonic Coding Practices</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Zen of Python</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Packaging and Distribution</strong><!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Building Packages</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Distributing Python Code</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></div>\n<!-- /wp:group --></details>\n<!-- /wp:details --></div>\n<!-- /wp:group -->\n\n<!-- wp:spacer {\"height\":\"30px\"} -->\n<div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Basic Concepts\"}} -->\n<div class=\"wp-block-group\"><!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Basic Concepts:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Strings &amp; Variables</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Variables and Data Types: Containers for storing different types of data.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>String Manipulation: Operations like concatenation, slicing, and formatting for strings.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Variables &amp; Data Types\nname = \"Alice\"  # String\nage = 25        # Integer\nheight = 5.8    # Float\nis_student = True  # Boolean\n\n# String Manipulation\ngreeting = \"Hello\"\nname = \"Alice\"\n\nmessage = greeting + \", \" + name + \"!\"  # Concatenation\nsubstring = message&#91;6:]  # Slicing\nformatted = f\"{greeting}, {name}!\"  # String formatting\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Control Structures</strong>:<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>If Statements: Conditional execution of code blocks.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Loops: Iterating through sequences or executing code while a condition is true.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list --></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># If Statements\nx = 10\ny = 5\n\nif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x and y are equal\")\nelse:\n    print(\"y is greater than x\")\n\n# Loops\nfruits = &#91;\"apple\", \"banana\", \"cherry\"]\n\n# For loop\nfor fruit in fruits:\n    print(fruit)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This breakdown provides an introduction to the basic concepts of variables, strings, control structures (if statements and loops), and their corresponding code examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Functions \\u0026 Modules\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2. Functions &amp; Modules:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Functions</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Creation of functions with parameters and return values.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Functions\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Modules &amp; Packages</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Importing modules to use pre-built functionalities.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Creating and using packages to organize modules.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Modules &amp; Packages\nimport math  # Importing a module\n\nvalue = math.sqrt(16)  # Using a function from the \'math\' module\n\n# Creating a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Functions encapsulate a specific task or operation, allowing reuse throughout the code. Modules and packages help organize code into reusable units and facilitate collaboration by grouping related functionalities together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Exceptions \\u0026 Files\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Exceptions &amp; Files:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exceptions Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks to handle errors gracefully.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Exceptions Handling\ntry:\n    result = 10 / 0  # Trying to divide by zero, which raises an error\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed\")\nelse:\n    print(\"No error occurred\")\nfinally:\n    print(\"This will always execute\")\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>File Handling</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reading from and writing to files using Python.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># File Handling - Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    data = file.read()\n    print(data)\n\n# File Handling - Writing to a file\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"This is a test.\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exception handling helps manage errors and unexpected situations, allowing the program to continue running gracefully. File handling enables reading from and writing to files, facilitating data storage and manipulation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"More Types\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4. More Types:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Lists &amp; Dictionaries</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Lists: Ordered collections of items that are mutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dictionaries: Unordered collections of key-value pairs.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Lists &amp; Dictionaries\n# Lists - Mutable collections\nnumbers = &#91;1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(numbers&#91;0])  # Prints the first element of \'numbers\'\n\n# Dictionaries - Key-value pairs\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person&#91;\"name\"])\nprint(person&#91;\"age\"])</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Tuples &amp; Sets</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Tuples: Ordered collections of elements that are immutable.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sets: Unordered collections of unique elements.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Tuples &amp; Sets\n# Tuples - Immutable collections\ncoordinates = (10, 20)\n\n# Sets - Unordered unique collections\nunique_numbers = {1, 2, 3, 4, 5, 1}  # Note: Duplicates are automatically removed</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Lists allow storing multiple items in a single variable, while dictionaries enable organizing data using key-value pairs. Tuples are immutable collections, and sets are collections of unique elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"OOP (Object-Oriented Programming):\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5. OOP (Object-Oriented Programming):</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Classes &amp; Objects</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Classes: Blueprint for creating objects, encapsulating data and behaviors.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Objects: Instances of classes, holding attributes and methods.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Classes &amp; Objects\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n# Creating an object (instance of the Dog class)\nmy_dog = Dog(\"Buddy\", 3)\n\n# Accessing object attributes\nprint(my_dog.name)\nprint(my_dog.age)\n\n# Calling object methods\nmy_dog.bark()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Inheritance &amp; Polymorphism</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Inheritance: Creating new classes based on existing ones.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Polymorphism: Methods having different forms in subclasses.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Inheritance &amp; Polymorphism\nclass Animal:\n    def sound(self):\n        pass  # Placeholder method\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\n\n# Polymorphic behavior\ndef make_sound(animal):\n    animal.sound()\n\nmake_sound(Dog())  # Output: Woof!\nmake_sound(Cat())  # Output: Meow!</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Object-oriented programming utilizes classes and objects to model real-world entities, allowing data abstraction, encapsulation, inheritance, and polymorphism.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Regular Expressions\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">6. Regular Expressions:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions (regex) are sequences of characters that define a search pattern, aiding in string manipulation and search operations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import re  # Importing the regex module\n\n# Regular Expression Basics\ntext = \"Hello, my email is example@email.com\"\npattern = r\"&#91;\\w\\.-]+@&#91;\\w\\.-]+\"  # Email pattern\n\nmatch = re.search(pattern, text)  # Searching for the pattern in the text\n\nif match:\n    print(\"Found:\", match.group())  # Output: example@email.com\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regular expressions allow complex pattern matching, facilitating tasks like searching for specific strings, replacing text, and validating inputs based on defined patterns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Pythonicness \\u0026 Packaging\"}} -->\n<div class=\"wp-block-group\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">7. Pythonicness &amp; Packaging:</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pythonicness:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pythonic code follows the idiomatic principles and style guidelines of Python, emphasizing readability and simplicity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Pythonic Coding Practices\n# Using list comprehensions for concise code\nnumbers = &#91;1, 2, 3, 4, 5]\nsquared = &#91;x ** 2 for x in numbers]\n\n# Utilizing built-in functions\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))  # Filtering even numbers</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packaging and Distribution:</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Packaging involves organizing code into reusable units, and distribution deals with sharing and installing Python packages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Packaging and Distribution\n# Building a package structure\n# my_package/\n# ├── __init__.py\n# ├── module1.py\n# └── module2.py\n\n# Distributing Python Code\n# Using tools like pip to install and distribute packages\n# pip install package_name\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pythonic coding practices emphasize simplicity, readability, and utilizing Python\'s features effectively. Packaging and distribution are vital for sharing code as reusable packages, allowing easy installation and usage by others.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"align\":\"wide\",\"className\":\"is-style-wide\"} -->\n<hr class=\"wp-block-separator alignwide has-alpha-channel-opacity is-style-wide\"/>\n<!-- /wp:separator --></div>\n<!-- /wp:group -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thank you for completing our Python Course!</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As we conclude this journey through Python\'s fundamental concepts, we\'ve explored the versatile capabilities Python offers. From mastering basic syntax to delving into object-oriented programming, handling exceptions, leveraging regular expressions, and embracing Pythonic coding practices, this course has provided a solid foundation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember, this is just the beginning of your Python adventure. Continuously practicing and exploring real-world applications will further enhance your skills. Keep coding, keep experimenting, and keep pushing the boundaries of what you can achieve with Python!</p>\n<!-- /wp:paragraph -->','Python Course','','inherit','closed','closed','','76-revision-v1','','','2023-11-18 10:37:42','2023-11-18 10:37:42','',76,'https://simplelearn.local/?p=285',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (286,1,'2023-11-18 10:39:06','2023-11-18 10:39:06','<!-- wp:paragraph -->\n<p>This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like piña coladas. (And gettin\' caught in the rain.)</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>...or something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>As a new WordPress user, you should go to <a href=\"http://simplelearn.local/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">Lorem ipsum dolor sit amet</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">George Cruise</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Arnold Stevens</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Jessica Barrows</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CTO / Co-founder</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Sample Page','','inherit','closed','closed','','2-revision-v1','','','2023-11-18 10:39:06','2023-11-18 10:39:06','',2,'https://simplelearn.local/?p=286',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (287,1,'2023-11-18 10:39:42','2023-11-18 10:39:42','<!-- wp:paragraph -->\n<p>This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like piña coladas. (And gettin\' caught in the rain.)</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>...or something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>As a new WordPress user, you should go to <a href=\"http://simplelearn.local/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!</p>\n<!-- /wp:paragraph -->','Sample Page','','inherit','closed','closed','','2-revision-v1','','','2023-11-18 10:39:42','2023-11-18 10:39:42','',2,'https://simplelearn.local/?p=287',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (288,1,'2023-11-18 10:39:55','2023-11-18 10:39:55','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 10:39:55','2023-11-18 10:39:55','',6,'https://simplelearn.local/?p=288',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (289,1,'2023-11-18 10:44:23','2023-11-18 10:44:23','<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">Lorem ipsum dolor sit amet</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χάρης Μακρυλάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Our Team Section','','publish','closed','closed','','our-team-section','','','2023-11-18 10:44:23','2023-11-18 10:44:23','',0,'https://simplelearn.local/our-team-section/',0,'wp_template_part','',0);
INSERT INTO `wp_posts` VALUES (290,1,'2023-11-18 10:44:40','2023-11-18 10:44:40','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χάρης Μακρυλάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 10:44:40','2023-11-18 10:44:40','',28,'https://simplelearn.local/?p=290',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (291,1,'2023-11-18 10:45:09','2023-11-18 10:45:09','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 10:45:09','2023-11-18 10:45:09','',28,'https://simplelearn.local/?p=291',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (292,1,'2023-11-18 10:46:15','2023-11-18 10:46:15','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 10:46:15','2023-11-18 10:46:15','',28,'https://simplelearn.local/?p=292',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (293,1,'2023-11-18 10:47:34','2023-11-18 10:47:34','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 10:47:34','2023-11-18 10:47:34','',28,'https://simplelearn.local/?p=293',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (294,1,'2023-11-18 10:48:06','2023-11-18 10:48:06','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 10:48:06','2023-11-18 10:48:06','',28,'https://simplelearn.local/?p=294',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (295,1,'2023-11-18 14:29:26','2023-11-18 14:29:26','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 14:29:26','2023-11-18 14:29:26','',28,'https://simplelearn.local/?p=295',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (296,1,'2023-11-18 14:30:12','2023-11-18 14:30:12','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction to C</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 14:30:12','2023-11-18 14:30:12','',28,'https://simplelearn.local/?p=296',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (297,1,'2023-11-18 14:31:36','2023-11-18 14:31:36','<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Python\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":25,\"mediaLink\":\"https://simplelearn.local/python_logo_icon/\",\"mediaType\":\"image\",\"mediaWidth\":15,\"imageFill\":false,\"style\":{\"spacing\":{\"padding\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"},\"margin\":{\"top\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"right\":\"0\"}}}} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"margin-top:0;margin-right:0;margin-bottom:0;margin-left:0;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0;grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/Python_logo_icon-1024x1020.png\" alt=\"\" class=\"wp-image-25 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Introduction to Python</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/python-course/\" data-type=\"page\" data-id=\"76\">Python stands out as a widely embraced, user-friendly, and exceptionally potent programming language utilized across diverse domains such as software and web development, data science, machine learning, and more. Throughout this course, we will delve into fundamental Python concepts while concurrently constructing practical projects and addressing various coding challenges. This course is tailored for beginners, eliminating the need for any prior programming expertise. So, without further ado, let\'s embark on this Python journey!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":37,\"mediaLink\":\"https://simplelearn.local/6e46e7dbe2bb73dacc055e5dbd85c3ad/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/6e46e7dbe2bb73dacc055e5dbd85c3ad.png\" alt=\"\" class=\"wp-image-37 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/c-course/\" data-type=\"page\" data-id=\"119\">Introduction to C</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/c-course/\" data-type=\"page\" data-id=\"119\">C, a powerful and versatile programming language, holds a prominent place in software development, system programming, and embedded systems. In this course, we\'ll explore the foundational concepts of C while engaging in hands-on projects and tackling coding obstacles. Geared towards beginners, this course doesn\'t require any prior programming knowledge. Join us as we venture into the world of C programming and discover its potential!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to C++\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":38,\"mediaLink\":\"https://simplelearn.local/iso_c_logo-svg/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/ISO_C_Logo.svg_.png\" alt=\"\" class=\"wp-image-38 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/cplusplus-course/\" data-type=\"page\" data-id=\"121\">Introduction to C++</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/cplusplus-course/\" data-type=\"page\" data-id=\"121\">C++ stands as a robust and widely-used programming language pivotal in software development, gaming, and system programming. Throughout this course, we\'ll navigate through the fundamental concepts of C++, crafting practical projects and addressing coding challenges along the way. Tailored for beginners, this course welcomes learners without any prior programming experience. Join us on this C++ journey and unlock the power of this versatile language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Introduction to Java\"}} -->\n<div class=\"wp-block-group\"><!-- wp:media-text {\"align\":\"full\",\"mediaId\":20,\"mediaLink\":\"https://simplelearn.local/java/\",\"mediaType\":\"image\",\"mediaWidth\":15} -->\n<div class=\"wp-block-media-text alignfull is-stacked-on-mobile\" style=\"grid-template-columns:15% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://simplelearn.local/wp-content/uploads/2023/11/java-1024x1024.png\" alt=\"\" class=\"wp-image-20 size-full\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https://simplelearn.local/courses/java-course/\" data-type=\"page\" data-id=\"125\">Introduction to Java</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"placeholder\":\"Content…\"} -->\n<p><a href=\"https://simplelearn.local/courses/java-course/\" data-type=\"page\" data-id=\"125\">Java, a versatile and widely-adopted programming language, finds its application in software development, mobile apps, and web services. In this course, we\'ll delve into the foundational concepts of Java, constructing real-world projects and overcoming coding hurdles. Specifically designed for beginners, this course is accessible to anyone without prior programming knowledge. Join us on this Java exploration and discover the capabilities of this influential language!</a></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"},\"metadata\":{\"name\":\"Team Section\"}} -->\n<div class=\"wp-block-group\"><!-- wp:columns {\"align\":\"full\"} -->\n<div class=\"wp-block-columns alignfull\"><!-- wp:column {\"width\":\"100%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:100%\"><!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"64px\",\"bottom\":\"64px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group alignfull has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:64px;padding-bottom:64px\"><!-- wp:group {\"align\":\"wide\"} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:heading {\"fontSize\":\"x-large\"} -->\n<h2 class=\"wp-block-heading has-x-large-font-size\">Team Section</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"fontSize\":\"medium\"} -->\n<p class=\"has-medium-font-size\">SimpleLearn Creators and Coders</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"align\":\"wide\",\"layout\":{\"inherit\":false}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Χαράλαμπος Μακρυλάκης </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CEO / Co-founder (P2019214)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image {\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"style\":{\"color\":{\"duotone\":\"unset\"}},\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https://simplelearn.local/wp-content/themes/raft/assets/img/shape-02.svg\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Βασίλειος Κατωτομιχελάκης</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"small\"} -->\n<p class=\"has-small-font-size\" style=\"text-transform:uppercase\">CFO / Co-founder (P2020132)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"raft-accent\",\"iconColorValue\":\"#C26148\",\"openInNewTab\":true,\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"8px\",\"left\":\"8px\"}}},\"className\":\"is-style-logos-only\"} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->','Courses','','inherit','closed','closed','','28-revision-v1','','','2023-11-18 14:31:36','2023-11-18 14:31:36','',28,'https://simplelearn.local/?p=297',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (298,1,'2023-11-18 14:36:11','2023-11-18 14:36:11','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 14:36:11','2023-11-18 14:36:11','',6,'https://simplelearn.local/?p=298',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (299,1,'2023-11-18 14:37:16','2023-11-18 14:37:16','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#334FAE\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#EAEEFD\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.1)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#272727\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#F9C33E\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 14:37:16','2023-11-18 14:37:16','',6,'https://simplelearn.local/?p=299',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (300,1,'2023-11-18 15:51:01','2023-11-18 15:51:01','{\"styles\":{\"typography\":{\"fontFamily\":\"var(--wp--preset--font-family--outfit)\"}},\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#232323\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#FFFFFF\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(0, 0, 0, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#FFFFFF\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#5C40CA\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 15:51:01','2023-11-18 15:51:01','',6,'https://simplelearn.local/?p=300',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (301,1,'2023-11-18 15:51:39','2023-11-18 15:51:39','{\"styles\":[],\"settings\":[],\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 15:51:39','2023-11-18 15:51:39','',6,'https://simplelearn.local/?p=301',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (302,1,'2023-11-18 19:59:04','2023-11-18 19:59:04','{\"styles\":[],\"settings\":{\"color\":{\"palette\":{\"theme\":[{\"slug\":\"raft-bg\",\"color\":\"#E7DED0\",\"name\":\"Background\"},{\"slug\":\"raft-fg\",\"color\":\"#292E29\",\"name\":\"Foreground\"},{\"slug\":\"raft-bg-alt\",\"color\":\"rgba(255, 255, 255, 0.3)\",\"name\":\"Background Alt\"},{\"slug\":\"raft-fg-alt\",\"color\":\"#fcfcfc\",\"name\":\"Foreground Alt\"},{\"slug\":\"raft-accent\",\"color\":\"#C25252\",\"name\":\"Accent\"}]}}},\"isGlobalStylesUserThemeJSON\":true,\"version\":2}','Custom Styles','','inherit','closed','closed','','6-revision-v1','','','2023-11-18 19:59:04','2023-11-18 19:59:04','',6,'https://simplelearn.local/?p=302',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (303,1,'2023-11-18 20:12:37','2023-11-18 20:12:37','<!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"20px\",\"bottom\":\"20px\"},\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}},\"backgroundColor\":\"raft-bg-alt\",\"layout\":{\"inherit\":true,\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group has-raft-bg-alt-background-color has-background\" style=\"margin-top:0px;margin-bottom:0px;padding-top:20px;padding-bottom:20px\"><!-- wp:group {\"className\":\"alignwide\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"space-between\"}} -->\n<div class=\"wp-block-group alignwide\"><!-- wp:group {\"layout\":{\"type\":\"flex\"}} -->\n<div class=\"wp-block-group\"><!-- wp:site-logo {\"width\":55,\"shouldSyncIcon\":true,\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#292E29\"]}}} /-->\n\n<!-- wp:site-title {\"style\":{\"typography\":{\"textTransform\":\"uppercase\"}},\"fontSize\":\"large\"} /--></div>\n<!-- /wp:group -->\n\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"verticalAlignment\":\"top\"}} -->\n<div class=\"wp-block-group\"><!-- wp:navigation {\"ref\":9,\"layout\":{\"type\":\"flex\",\"setCascadingProperties\":true,\"justifyContent\":\"space-between\",\"orientation\":\"horizontal\",\"flexWrap\":\"nowrap\"},\"style\":{\"spacing\":{\"blockGap\":\"32px\"}}} /--></div>\n<!-- /wp:group --></div>\n<!-- /wp:group --></div>\n<!-- /wp:group -->','Header','','inherit','closed','closed','','12-revision-v1','','','2023-11-18 20:12:37','2023-11-18 20:12:37','',12,'https://simplelearn.local/?p=303',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (304,1,'2023-11-18 20:15:25','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=304',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (305,1,'2023-11-18 20:15:25','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=305',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (306,1,'2023-11-18 20:15:25','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=306',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (307,1,'2023-11-18 20:15:25','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=307',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (308,1,'2023-11-18 20:15:25','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=308',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (309,1,'2023-11-18 20:15:25','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=309',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (310,1,'2023-11-18 20:15:25','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:25','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=310',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (311,1,'2023-11-18 20:15:52','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=311',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (312,1,'2023-11-18 20:15:52','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=312',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (313,1,'2023-11-18 20:15:52','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=313',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (314,1,'2023-11-18 20:15:52','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=314',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (315,1,'2023-11-18 20:15:52','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=315',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (316,1,'2023-11-18 20:15:52','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=316',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (317,1,'2023-11-18 20:15:52','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:52','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=317',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (318,1,'2023-11-18 20:15:54','0000-00-00 00:00:00','','Home','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=318',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (319,1,'2023-11-18 20:15:54','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=319',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (320,1,'2023-11-18 20:15:54','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=320',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (321,1,'2023-11-18 20:15:54','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=321',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (322,1,'2023-11-18 20:15:54','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=322',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (323,1,'2023-11-18 20:15:54','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',28,'https://simplelearn.local/?p=323',1,'nav_menu_item','',0);
INSERT INTO `wp_posts` VALUES (324,1,'2023-11-18 20:15:54','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2023-11-18 20:15:54','0000-00-00 00:00:00','',0,'https://simplelearn.local/?p=324',1,'nav_menu_item','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (1,1,0);
INSERT INTO `wp_term_relationships` VALUES (6,2,0);
INSERT INTO `wp_term_relationships` VALUES (10,2,0);
INSERT INTO `wp_term_relationships` VALUES (12,2,0);
INSERT INTO `wp_term_relationships` VALUES (12,3,0);
INSERT INTO `wp_term_relationships` VALUES (23,2,0);
INSERT INTO `wp_term_relationships` VALUES (23,4,0);
INSERT INTO `wp_term_relationships` VALUES (30,2,0);
INSERT INTO `wp_term_relationships` VALUES (30,3,0);
INSERT INTO `wp_term_relationships` VALUES (40,2,0);
INSERT INTO `wp_term_relationships` VALUES (132,2,0);
INSERT INTO `wp_term_relationships` VALUES (143,2,0);
INSERT INTO `wp_term_relationships` VALUES (151,2,0);
INSERT INTO `wp_term_relationships` VALUES (154,2,0);
INSERT INTO `wp_term_relationships` VALUES (289,2,0);
INSERT INTO `wp_term_relationships` VALUES (289,5,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,0);
INSERT INTO `wp_term_taxonomy` VALUES (2,2,'wp_theme','',0,11);
INSERT INTO `wp_term_taxonomy` VALUES (3,3,'wp_template_part_area','',0,2);
INSERT INTO `wp_term_taxonomy` VALUES (4,4,'wp_template_part_area','',0,1);
INSERT INTO `wp_term_taxonomy` VALUES (5,5,'wp_template_part_area','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0);
INSERT INTO `wp_terms` VALUES (2,'raft','raft',0);
INSERT INTO `wp_terms` VALUES (3,'header','header',0);
INSERT INTO `wp_terms` VALUES (4,'footer','footer',0);
INSERT INTO `wp_terms` VALUES (5,'uncategorized','uncategorized',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','SimpleLearn');
INSERT INTO `wp_usermeta` VALUES (2,1,'first_name','');
INSERT INTO `wp_usermeta` VALUES (3,1,'last_name','');
INSERT INTO `wp_usermeta` VALUES (4,1,'description','');
INSERT INTO `wp_usermeta` VALUES (5,1,'rich_editing','true');
INSERT INTO `wp_usermeta` VALUES (6,1,'syntax_highlighting','true');
INSERT INTO `wp_usermeta` VALUES (7,1,'comment_shortcuts','false');
INSERT INTO `wp_usermeta` VALUES (8,1,'admin_color','fresh');
INSERT INTO `wp_usermeta` VALUES (9,1,'use_ssl','0');
INSERT INTO `wp_usermeta` VALUES (10,1,'show_admin_bar_front','true');
INSERT INTO `wp_usermeta` VALUES (11,1,'locale','');
INSERT INTO `wp_usermeta` VALUES (12,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}');
INSERT INTO `wp_usermeta` VALUES (13,1,'wp_user_level','10');
INSERT INTO `wp_usermeta` VALUES (14,1,'dismissed_wp_pointers','');
INSERT INTO `wp_usermeta` VALUES (15,1,'show_welcome_panel','1');
INSERT INTO `wp_usermeta` VALUES (16,1,'session_tokens','a:1:{s:64:\"3e3fd74dd61329bfc9927e3795dc85a8337881027b7e7dfe0f2288a28ddfc973\";a:4:{s:10:\"expiration\";i:1700412472;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\";s:5:\"login\";i:1700239672;}}');
INSERT INTO `wp_usermeta` VALUES (17,1,'wp_dashboard_quick_press_last_post_id','5');
INSERT INTO `wp_usermeta` VALUES (18,1,'wp_persisted_preferences','a:5:{s:4:\"core\";a:1:{s:29:\"isTemplatePartMoveHintVisible\";b:0;}s:9:\"_modified\";s:24:\"2023-11-18T10:48:15.117Z\";s:14:\"core/edit-site\";a:10:{s:12:\"welcomeGuide\";b:0;s:26:\"isComplementaryAreaVisible\";b:1;s:18:\"welcomeGuideStyles\";b:0;s:16:\"welcomeGuidePage\";b:0;s:20:\"welcomeGuideTemplate\";b:0;s:9:\"focusMode\";b:0;s:12:\"fixedToolbar\";b:1;s:15:\"distractionFree\";b:0;s:10:\"editorMode\";s:6:\"visual\";s:20:\"keepCaretInsideBlock\";b:0;}s:14:\"core/edit-post\";a:3:{s:26:\"isComplementaryAreaVisible\";b:1;s:12:\"welcomeGuide\";b:0;s:10:\"openPanels\";a:4:{i:0;s:11:\"post-status\";i:1;s:16:\"discussion-panel\";i:2;s:15:\"page-attributes\";i:3;s:14:\"featured-image\";}}s:17:\"core/block-editor\";a:1:{s:25:\"linkControlSettingsDrawer\";b:1;}}');
INSERT INTO `wp_usermeta` VALUES (19,1,'wp_user-settings','libraryContent=browse');
INSERT INTO `wp_usermeta` VALUES (20,1,'wp_user-settings-time','1699972126');
INSERT INTO `wp_usermeta` VALUES (21,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}');
INSERT INTO `wp_usermeta` VALUES (22,1,'metaboxhidden_nav-menus','a:1:{i:0;s:12:\"add-post_tag\";}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'SimpleLearn','$P$BgjFgTNwppfHcGfmDu9Xufyyb/ySyC1','simplelearn','simple.learn@learn.org','http://simplelearn.local','2023-11-14 13:16:36','',0,'SimpleLearn');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-11-20  0:01:14
